// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot
{
	public unsafe partial class ImPlot
	{

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									fixed (bool* pheld = &held)
									{
										byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
										return ret != 0;
									}
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									fixed (bool* pheld = &held)
									{
										byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
										return ret != 0;
									}
								}
							}
						}
					}
				}
			}
		}

		internal static void AnnotationNative(double x, double y, Vector4 col, Vector2 pixOffset, byte clamp, byte round)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, Vector4, Vector2, byte, byte, void>)vt[297])(x, y, col, pixOffset, clamp, round);
			#else
			((delegate* unmanaged[Cdecl]<double, double, Vector4, Vector2, byte, byte, void>)vt[297])(x, y, col, pixOffset, clamp, round);
			#endif
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, bool round)
		{
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, round ? (byte)1 : (byte)0);
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp)
		{
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte)(0));
		}

		internal static void AnnotationNative(double x, double y, Vector4 col, Vector2 pixOffset, byte clamp, byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, Vector4, Vector2, byte, byte*, void>)vt[298])(x, y, col, pixOffset, clamp, fmt);
			#else
			((delegate* unmanaged[Cdecl]<double, double, Vector4, Vector2, byte, nint, void>)vt[298])(x, y, col, pixOffset, clamp, (nint)fmt);
			#endif
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, byte* fmt)
		{
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, fmt);
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte*)pfmt);
			}
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte*)pfmt);
			}
		}

		internal static void AnnotationVNative(double x, double y, Vector4 col, Vector2 pixOffset, byte clamp, byte* fmt, nuint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, Vector4, Vector2, byte, byte*, nuint, void>)vt[299])(x, y, col, pixOffset, clamp, fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<double, double, Vector4, Vector2, byte, nint, nuint, void>)vt[299])(x, y, col, pixOffset, clamp, (nint)fmt, args);
			#endif
		}

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, byte* fmt, nuint args)
		{
			AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, fmt, args);
		}

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte*)pfmt, args);
			}
		}

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, ReadOnlySpan<byte> fmt, nuint args)
		{
			fixed (byte* pfmt = fmt)
			{
				AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte*)pfmt, args);
			}
		}

		internal static void TagXNative(double x, Vector4 col, byte round)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, Vector4, byte, void>)vt[300])(x, col, round);
			#else
			((delegate* unmanaged[Cdecl]<double, Vector4, byte, void>)vt[300])(x, col, round);
			#endif
		}

		public static void TagX(double x, Vector4 col, bool round)
		{
			TagXNative(x, col, round ? (byte)1 : (byte)0);
		}

		public static void TagX(double x, Vector4 col)
		{
			TagXNative(x, col, (byte)(0));
		}

		internal static void TagXNative(double x, Vector4 col, byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, Vector4, byte*, void>)vt[301])(x, col, fmt);
			#else
			((delegate* unmanaged[Cdecl]<double, Vector4, nint, void>)vt[301])(x, col, (nint)fmt);
			#endif
		}

		public static void TagX(double x, Vector4 col, byte* fmt)
		{
			TagXNative(x, col, fmt);
		}

		public static void TagX(double x, Vector4 col, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagXNative(x, col, (byte*)pfmt);
			}
		}

		public static void TagX(double x, Vector4 col, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagXNative(x, col, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TagX(double x, Vector4 col, ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				TagXNative(x, col, (byte*)pfmt);
			}
		}

		internal static void TagXVNative(double x, Vector4 col, byte* fmt, nuint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, Vector4, byte*, nuint, void>)vt[302])(x, col, fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<double, Vector4, nint, nuint, void>)vt[302])(x, col, (nint)fmt, args);
			#endif
		}

		public static void TagXV(double x, Vector4 col, byte* fmt, nuint args)
		{
			TagXVNative(x, col, fmt, args);
		}

		public static void TagXV(double x, Vector4 col, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagXVNative(x, col, (byte*)pfmt, args);
			}
		}

		public static void TagXV(double x, Vector4 col, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagXVNative(x, col, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TagXV(double x, Vector4 col, ReadOnlySpan<byte> fmt, nuint args)
		{
			fixed (byte* pfmt = fmt)
			{
				TagXVNative(x, col, (byte*)pfmt, args);
			}
		}

		internal static void TagYNative(double y, Vector4 col, byte round)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, Vector4, byte, void>)vt[303])(y, col, round);
			#else
			((delegate* unmanaged[Cdecl]<double, Vector4, byte, void>)vt[303])(y, col, round);
			#endif
		}

		public static void TagY(double y, Vector4 col, bool round)
		{
			TagYNative(y, col, round ? (byte)1 : (byte)0);
		}

		public static void TagY(double y, Vector4 col)
		{
			TagYNative(y, col, (byte)(0));
		}

		internal static void TagYNative(double y, Vector4 col, byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, Vector4, byte*, void>)vt[304])(y, col, fmt);
			#else
			((delegate* unmanaged[Cdecl]<double, Vector4, nint, void>)vt[304])(y, col, (nint)fmt);
			#endif
		}

		public static void TagY(double y, Vector4 col, byte* fmt)
		{
			TagYNative(y, col, fmt);
		}

		public static void TagY(double y, Vector4 col, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagYNative(y, col, (byte*)pfmt);
			}
		}

		public static void TagY(double y, Vector4 col, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagYNative(y, col, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TagY(double y, Vector4 col, ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				TagYNative(y, col, (byte*)pfmt);
			}
		}

		internal static void TagYVNative(double y, Vector4 col, byte* fmt, nuint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, Vector4, byte*, nuint, void>)vt[305])(y, col, fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<double, Vector4, nint, nuint, void>)vt[305])(y, col, (nint)fmt, args);
			#endif
		}

		public static void TagYV(double y, Vector4 col, byte* fmt, nuint args)
		{
			TagYVNative(y, col, fmt, args);
		}

		public static void TagYV(double y, Vector4 col, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagYVNative(y, col, (byte*)pfmt, args);
			}
		}

		public static void TagYV(double y, Vector4 col, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagYVNative(y, col, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TagYV(double y, Vector4 col, ReadOnlySpan<byte> fmt, nuint args)
		{
			fixed (byte* pfmt = fmt)
			{
				TagYVNative(y, col, (byte*)pfmt, args);
			}
		}

		internal static void SetAxisNative(ImAxis axis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImAxis, void>)vt[306])(axis);
			#else
			((delegate* unmanaged[Cdecl]<ImAxis, void>)vt[306])(axis);
			#endif
		}

		public static void SetAxis(ImAxis axis)
		{
			SetAxisNative(axis);
		}

		internal static void SetAxesNative(ImAxis xAxis, ImAxis yAxis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImAxis, ImAxis, void>)vt[307])(xAxis, yAxis);
			#else
			((delegate* unmanaged[Cdecl]<ImAxis, ImAxis, void>)vt[307])(xAxis, yAxis);
			#endif
		}

		public static void SetAxes(ImAxis xAxis, ImAxis yAxis)
		{
			SetAxesNative(xAxis, yAxis);
		}

		internal static void PixelsToPlotNative(ImPlotPoint* output, Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotPoint*, Vector2, ImAxis, ImAxis, void>)vt[308])(output, pix, xAxis, yAxis);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, ImAxis, ImAxis, void>)vt[308])((nint)output, pix, xAxis, yAxis);
			#endif
		}

		public static ImPlotPoint PixelsToPlot(Vector2 pix)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, pix, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotPoint PixelsToPlot(Vector2 pix, ImAxis xAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, pix, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, Vector2 pix, ImAxis yAxis)
		{
			PixelsToPlotNative(output, pix, (ImAxis)(-1), yAxis);
		}

		public static void PixelsToPlot(ImPlotPointPtr output, Vector2 pix)
		{
			PixelsToPlotNative(output, pix, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotPoint PixelsToPlot(Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, pix, xAxis, yAxis);
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			PixelsToPlotNative(output, pix, xAxis, yAxis);
		}

		public static void PixelsToPlot(ref ImPlotPoint output, Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, pix, xAxis, yAxis);
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, Vector2 pix, ImAxis xAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, pix, xAxis, (ImAxis)(-1));
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, Vector2 pix)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, pix, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		internal static void PixelsToPlotNative(ImPlotPoint* output, float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotPoint*, float, float, ImAxis, ImAxis, void>)vt[309])(output, x, y, xAxis, yAxis);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, ImAxis, ImAxis, void>)vt[309])((nint)output, x, y, xAxis, yAxis);
			#endif
		}

		public static ImPlotPoint PixelsToPlot(float x, float y)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, x, y, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotPoint PixelsToPlot(float x, float y, ImAxis xAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, x, y, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, float x, float y, ImAxis yAxis)
		{
			PixelsToPlotNative(output, x, y, (ImAxis)(-1), yAxis);
		}

		public static void PixelsToPlot(ImPlotPointPtr output, float x, float y)
		{
			PixelsToPlotNative(output, x, y, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotPoint PixelsToPlot(float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, x, y, xAxis, yAxis);
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			PixelsToPlotNative(output, x, y, xAxis, yAxis);
		}

		public static void PixelsToPlot(ref ImPlotPoint output, float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, x, y, xAxis, yAxis);
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, float x, float y, ImAxis xAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, x, y, xAxis, (ImAxis)(-1));
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, float x, float y)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, x, y, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		internal static void PlotToPixelsNative(Vector2* output, ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImPlotPoint, ImAxis, ImAxis, void>)vt[310])(output, plt, xAxis, yAxis);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotPoint, ImAxis, ImAxis, void>)vt[310])((nint)output, plt, xAxis, yAxis);
			#endif
		}

		public static Vector2 PlotToPixels(ImPlotPoint plt)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, plt, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static Vector2 PlotToPixels(ImPlotPoint plt, ImAxis xAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, plt, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PlotToPixels(Vector2* output, ImPlotPoint plt, ImAxis yAxis)
		{
			PlotToPixelsNative(output, plt, (ImAxis)(-1), yAxis);
		}

		public static void PlotToPixels(Vector2* output, ImPlotPoint plt)
		{
			PlotToPixelsNative(output, plt, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static Vector2 PlotToPixels(ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, plt, xAxis, yAxis);
			return ret;
		}

		public static void PlotToPixels(Vector2* output, ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			PlotToPixelsNative(output, plt, xAxis, yAxis);
		}

		public static void PlotToPixels(ref Vector2 output, ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, plt, xAxis, yAxis);
			}
		}

		public static void PlotToPixels(ref Vector2 output, ImPlotPoint plt, ImAxis xAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, plt, xAxis, (ImAxis)(-1));
			}
		}

		public static void PlotToPixels(ref Vector2 output, ImPlotPoint plt)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, plt, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		internal static void PlotToPixelsNative(Vector2* output, double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, double, double, ImAxis, ImAxis, void>)vt[311])(output, x, y, xAxis, yAxis);
			#else
			((delegate* unmanaged[Cdecl]<nint, double, double, ImAxis, ImAxis, void>)vt[311])((nint)output, x, y, xAxis, yAxis);
			#endif
		}

		public static Vector2 PlotToPixels(double x, double y)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, x, y, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static Vector2 PlotToPixels(double x, double y, ImAxis xAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, x, y, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PlotToPixels(Vector2* output, double x, double y, ImAxis yAxis)
		{
			PlotToPixelsNative(output, x, y, (ImAxis)(-1), yAxis);
		}

		public static void PlotToPixels(Vector2* output, double x, double y)
		{
			PlotToPixelsNative(output, x, y, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static Vector2 PlotToPixels(double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, x, y, xAxis, yAxis);
			return ret;
		}

		public static void PlotToPixels(Vector2* output, double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			PlotToPixelsNative(output, x, y, xAxis, yAxis);
		}

		public static void PlotToPixels(ref Vector2 output, double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, x, y, xAxis, yAxis);
			}
		}

		public static void PlotToPixels(ref Vector2 output, double x, double y, ImAxis xAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, x, y, xAxis, (ImAxis)(-1));
			}
		}

		public static void PlotToPixels(ref Vector2 output, double x, double y)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, x, y, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		internal static void GetPlotPosNative(Vector2* output)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[312])(output);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[312])((nint)output);
			#endif
		}

		public static Vector2 GetPlotPos()
		{
			Vector2 ret;
			GetPlotPosNative(&ret);
			return ret;
		}

		public static void GetPlotPos(Vector2* output)
		{
			GetPlotPosNative(output);
		}

		public static void GetPlotPos(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetPlotPosNative((Vector2*)poutput);
			}
		}

		internal static void GetPlotSizeNative(Vector2* output)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[313])(output);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[313])((nint)output);
			#endif
		}

		public static Vector2 GetPlotSize()
		{
			Vector2 ret;
			GetPlotSizeNative(&ret);
			return ret;
		}

		public static void GetPlotSize(Vector2* output)
		{
			GetPlotSizeNative(output);
		}

		public static void GetPlotSize(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetPlotSizeNative((Vector2*)poutput);
			}
		}

		internal static void GetPlotMousePosNative(ImPlotPoint* output, ImAxis xAxis, ImAxis yAxis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotPoint*, ImAxis, ImAxis, void>)vt[314])(output, xAxis, yAxis);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImAxis, ImAxis, void>)vt[314])((nint)output, xAxis, yAxis);
			#endif
		}

		public static ImPlotPoint GetPlotMousePos()
		{
			ImPlotPoint ret;
			GetPlotMousePosNative(&ret, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotPoint GetPlotMousePos(ImAxis xAxis)
		{
			ImPlotPoint ret;
			GetPlotMousePosNative(&ret, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void GetPlotMousePos(ImPlotPointPtr output, ImAxis yAxis)
		{
			GetPlotMousePosNative(output, (ImAxis)(-1), yAxis);
		}

		public static void GetPlotMousePos(ImPlotPointPtr output)
		{
			GetPlotMousePosNative(output, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotPoint GetPlotMousePos(ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotPoint ret;
			GetPlotMousePosNative(&ret, xAxis, yAxis);
			return ret;
		}

		public static void GetPlotMousePos(ImPlotPointPtr output, ImAxis xAxis, ImAxis yAxis)
		{
			GetPlotMousePosNative(output, xAxis, yAxis);
		}

		public static void GetPlotMousePos(ref ImPlotPoint output, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				GetPlotMousePosNative((ImPlotPoint*)poutput, xAxis, yAxis);
			}
		}

		public static void GetPlotMousePos(ref ImPlotPoint output, ImAxis xAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				GetPlotMousePosNative((ImPlotPoint*)poutput, xAxis, (ImAxis)(-1));
			}
		}

		public static void GetPlotMousePos(ref ImPlotPoint output)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				GetPlotMousePosNative((ImPlotPoint*)poutput, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		internal static void GetPlotLimitsNative(ImPlotRect* output, ImAxis xAxis, ImAxis yAxis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotRect*, ImAxis, ImAxis, void>)vt[315])(output, xAxis, yAxis);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImAxis, ImAxis, void>)vt[315])((nint)output, xAxis, yAxis);
			#endif
		}

		public static ImPlotRect GetPlotLimits()
		{
			ImPlotRect ret;
			GetPlotLimitsNative(&ret, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotRect GetPlotLimits(ImAxis xAxis)
		{
			ImPlotRect ret;
			GetPlotLimitsNative(&ret, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void GetPlotLimits(ImPlotRectPtr output, ImAxis yAxis)
		{
			GetPlotLimitsNative(output, (ImAxis)(-1), yAxis);
		}

		public static void GetPlotLimits(ImPlotRectPtr output)
		{
			GetPlotLimitsNative(output, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotRect GetPlotLimits(ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotRect ret;
			GetPlotLimitsNative(&ret, xAxis, yAxis);
			return ret;
		}

		public static void GetPlotLimits(ImPlotRectPtr output, ImAxis xAxis, ImAxis yAxis)
		{
			GetPlotLimitsNative(output, xAxis, yAxis);
		}

		public static void GetPlotLimits(ref ImPlotRect output, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotLimitsNative((ImPlotRect*)poutput, xAxis, yAxis);
			}
		}

		public static void GetPlotLimits(ref ImPlotRect output, ImAxis xAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotLimitsNative((ImPlotRect*)poutput, xAxis, (ImAxis)(-1));
			}
		}

		public static void GetPlotLimits(ref ImPlotRect output)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotLimitsNative((ImPlotRect*)poutput, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		internal static byte IsPlotHoveredNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[316])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[316])();
			#endif
		}

		public static bool IsPlotHovered()
		{
			byte ret = IsPlotHoveredNative();
			return ret != 0;
		}

		internal static byte IsAxisHoveredNative(ImAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImAxis, byte>)vt[317])(axis);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImAxis, byte>)vt[317])(axis);
			#endif
		}

		public static bool IsAxisHovered(ImAxis axis)
		{
			byte ret = IsAxisHoveredNative(axis);
			return ret != 0;
		}

		internal static byte IsSubplotsHoveredNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[318])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[318])();
			#endif
		}

		public static bool IsSubplotsHovered()
		{
			byte ret = IsSubplotsHoveredNative();
			return ret != 0;
		}

		internal static byte IsPlotSelectedNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[319])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[319])();
			#endif
		}

		public static bool IsPlotSelected()
		{
			byte ret = IsPlotSelectedNative();
			return ret != 0;
		}

		internal static void GetPlotSelectionNative(ImPlotRect* output, ImAxis xAxis, ImAxis yAxis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotRect*, ImAxis, ImAxis, void>)vt[320])(output, xAxis, yAxis);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImAxis, ImAxis, void>)vt[320])((nint)output, xAxis, yAxis);
			#endif
		}

		public static ImPlotRect GetPlotSelection()
		{
			ImPlotRect ret;
			GetPlotSelectionNative(&ret, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotRect GetPlotSelection(ImAxis xAxis)
		{
			ImPlotRect ret;
			GetPlotSelectionNative(&ret, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void GetPlotSelection(ImPlotRectPtr output, ImAxis yAxis)
		{
			GetPlotSelectionNative(output, (ImAxis)(-1), yAxis);
		}

		public static void GetPlotSelection(ImPlotRectPtr output)
		{
			GetPlotSelectionNative(output, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotRect GetPlotSelection(ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotRect ret;
			GetPlotSelectionNative(&ret, xAxis, yAxis);
			return ret;
		}

		public static void GetPlotSelection(ImPlotRectPtr output, ImAxis xAxis, ImAxis yAxis)
		{
			GetPlotSelectionNative(output, xAxis, yAxis);
		}

		public static void GetPlotSelection(ref ImPlotRect output, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotSelectionNative((ImPlotRect*)poutput, xAxis, yAxis);
			}
		}

		public static void GetPlotSelection(ref ImPlotRect output, ImAxis xAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotSelectionNative((ImPlotRect*)poutput, xAxis, (ImAxis)(-1));
			}
		}

		public static void GetPlotSelection(ref ImPlotRect output)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotSelectionNative((ImPlotRect*)poutput, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		internal static void CancelPlotSelectionNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[321])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[321])();
			#endif
		}

		public static void CancelPlotSelection()
		{
			CancelPlotSelectionNative();
		}

		internal static void HideNextItemNative(byte hidden, ImPlotCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, ImPlotCond, void>)vt[322])(hidden, cond);
			#else
			((delegate* unmanaged[Cdecl]<byte, ImPlotCond, void>)vt[322])(hidden, cond);
			#endif
		}

		public static void HideNextItem(bool hidden, ImPlotCond cond)
		{
			HideNextItemNative(hidden ? (byte)1 : (byte)0, cond);
		}

		public static void HideNextItem(bool hidden)
		{
			HideNextItemNative(hidden ? (byte)1 : (byte)0, (ImPlotCond)(ImPlotCond.Once));
		}

		public static void HideNextItem()
		{
			HideNextItemNative((byte)(1), (ImPlotCond)(ImPlotCond.Once));
		}

		public static void HideNextItem(ImPlotCond cond)
		{
			HideNextItemNative((byte)(1), cond);
		}

		internal static byte BeginAlignedPlotsNative(byte* groupId, byte vertical)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte, byte>)vt[323])(groupId, vertical);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte, byte>)vt[323])((nint)groupId, vertical);
			#endif
		}

		public static bool BeginAlignedPlots(byte* groupId, bool vertical)
		{
			byte ret = BeginAlignedPlotsNative(groupId, vertical ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool BeginAlignedPlots(byte* groupId)
		{
			byte ret = BeginAlignedPlotsNative(groupId, (byte)(1));
			return ret != 0;
		}

		public static bool BeginAlignedPlots(ref byte groupId, bool vertical)
		{
			fixed (byte* pgroupId = &groupId)
			{
				byte ret = BeginAlignedPlotsNative((byte*)pgroupId, vertical ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		public static bool BeginAlignedPlots(ref byte groupId)
		{
			fixed (byte* pgroupId = &groupId)
			{
				byte ret = BeginAlignedPlotsNative((byte*)pgroupId, (byte)(1));
				return ret != 0;
			}
		}

		public static bool BeginAlignedPlots(string groupId, bool vertical)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (groupId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(groupId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(groupId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginAlignedPlotsNative(pStr0, vertical ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginAlignedPlots(string groupId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (groupId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(groupId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(groupId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginAlignedPlotsNative(pStr0, (byte)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginAlignedPlots(ReadOnlySpan<byte> groupId, bool vertical)
		{
			fixed (byte* pgroupId = groupId)
			{
				byte ret = BeginAlignedPlotsNative((byte*)pgroupId, vertical ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		public static bool BeginAlignedPlots(ReadOnlySpan<byte> groupId)
		{
			fixed (byte* pgroupId = groupId)
			{
				byte ret = BeginAlignedPlotsNative((byte*)pgroupId, (byte)(1));
				return ret != 0;
			}
		}

		internal static void EndAlignedPlotsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[324])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[324])();
			#endif
		}

		public static void EndAlignedPlots()
		{
			EndAlignedPlotsNative();
		}

		internal static byte BeginLegendPopupNative(byte* labelId, ImGuiMouseButton mouseButton)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiMouseButton, byte>)vt[325])(labelId, mouseButton);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiMouseButton, byte>)vt[325])((nint)labelId, mouseButton);
			#endif
		}

		public static bool BeginLegendPopup(byte* labelId, ImGuiMouseButton mouseButton)
		{
			byte ret = BeginLegendPopupNative(labelId, mouseButton);
			return ret != 0;
		}

		public static bool BeginLegendPopup(byte* labelId)
		{
			byte ret = BeginLegendPopupNative(labelId, (ImGuiMouseButton)(1));
			return ret != 0;
		}

		public static bool BeginLegendPopup(ref byte labelId, ImGuiMouseButton mouseButton)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = BeginLegendPopupNative((byte*)plabelId, mouseButton);
				return ret != 0;
			}
		}

		public static bool BeginLegendPopup(ref byte labelId)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = BeginLegendPopupNative((byte*)plabelId, (ImGuiMouseButton)(1));
				return ret != 0;
			}
		}

		public static bool BeginLegendPopup(string labelId, ImGuiMouseButton mouseButton)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginLegendPopupNative(pStr0, mouseButton);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginLegendPopup(string labelId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginLegendPopupNative(pStr0, (ImGuiMouseButton)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginLegendPopup(ReadOnlySpan<byte> labelId, ImGuiMouseButton mouseButton)
		{
			fixed (byte* plabelId = labelId)
			{
				byte ret = BeginLegendPopupNative((byte*)plabelId, mouseButton);
				return ret != 0;
			}
		}

		public static bool BeginLegendPopup(ReadOnlySpan<byte> labelId)
		{
			fixed (byte* plabelId = labelId)
			{
				byte ret = BeginLegendPopupNative((byte*)plabelId, (ImGuiMouseButton)(1));
				return ret != 0;
			}
		}

		internal static void EndLegendPopupNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[326])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[326])();
			#endif
		}

		public static void EndLegendPopup()
		{
			EndLegendPopupNative();
		}

		internal static byte IsLegendEntryHoveredNative(byte* labelId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)vt[327])(labelId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[327])((nint)labelId);
			#endif
		}

		public static bool IsLegendEntryHovered(byte* labelId)
		{
			byte ret = IsLegendEntryHoveredNative(labelId);
			return ret != 0;
		}

		public static bool IsLegendEntryHovered(ref byte labelId)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = IsLegendEntryHoveredNative((byte*)plabelId);
				return ret != 0;
			}
		}

		public static bool IsLegendEntryHovered(string labelId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = IsLegendEntryHoveredNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool IsLegendEntryHovered(ReadOnlySpan<byte> labelId)
		{
			fixed (byte* plabelId = labelId)
			{
				byte ret = IsLegendEntryHoveredNative((byte*)plabelId);
				return ret != 0;
			}
		}

		internal static byte BeginDragDropTargetPlotNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[328])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[328])();
			#endif
		}

		public static bool BeginDragDropTargetPlot()
		{
			byte ret = BeginDragDropTargetPlotNative();
			return ret != 0;
		}

		internal static byte BeginDragDropTargetAxisNative(ImAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImAxis, byte>)vt[329])(axis);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImAxis, byte>)vt[329])(axis);
			#endif
		}

		public static bool BeginDragDropTargetAxis(ImAxis axis)
		{
			byte ret = BeginDragDropTargetAxisNative(axis);
			return ret != 0;
		}

		internal static byte BeginDragDropTargetLegendNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[330])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[330])();
			#endif
		}

		public static bool BeginDragDropTargetLegend()
		{
			byte ret = BeginDragDropTargetLegendNative();
			return ret != 0;
		}

		internal static void EndDragDropTargetNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[331])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[331])();
			#endif
		}

		public static void EndDragDropTarget()
		{
			EndDragDropTargetNative();
		}

		internal static byte BeginDragDropSourcePlotNative(ImGuiDragDropFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDragDropFlags, byte>)vt[332])(flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiDragDropFlags, byte>)vt[332])(flags);
			#endif
		}

		public static bool BeginDragDropSourcePlot(ImGuiDragDropFlags flags)
		{
			byte ret = BeginDragDropSourcePlotNative(flags);
			return ret != 0;
		}

		public static bool BeginDragDropSourcePlot()
		{
			byte ret = BeginDragDropSourcePlotNative((ImGuiDragDropFlags)(0));
			return ret != 0;
		}

		internal static byte BeginDragDropSourceAxisNative(ImAxis axis, ImGuiDragDropFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImAxis, ImGuiDragDropFlags, byte>)vt[333])(axis, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImAxis, ImGuiDragDropFlags, byte>)vt[333])(axis, flags);
			#endif
		}

		public static bool BeginDragDropSourceAxis(ImAxis axis, ImGuiDragDropFlags flags)
		{
			byte ret = BeginDragDropSourceAxisNative(axis, flags);
			return ret != 0;
		}

		public static bool BeginDragDropSourceAxis(ImAxis axis)
		{
			byte ret = BeginDragDropSourceAxisNative(axis, (ImGuiDragDropFlags)(0));
			return ret != 0;
		}

		internal static byte BeginDragDropSourceItemNative(byte* labelId, ImGuiDragDropFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiDragDropFlags, byte>)vt[334])(labelId, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiDragDropFlags, byte>)vt[334])((nint)labelId, flags);
			#endif
		}

		public static bool BeginDragDropSourceItem(byte* labelId, ImGuiDragDropFlags flags)
		{
			byte ret = BeginDragDropSourceItemNative(labelId, flags);
			return ret != 0;
		}

		public static bool BeginDragDropSourceItem(byte* labelId)
		{
			byte ret = BeginDragDropSourceItemNative(labelId, (ImGuiDragDropFlags)(0));
			return ret != 0;
		}

		public static bool BeginDragDropSourceItem(ref byte labelId, ImGuiDragDropFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = BeginDragDropSourceItemNative((byte*)plabelId, flags);
				return ret != 0;
			}
		}

		public static bool BeginDragDropSourceItem(ref byte labelId)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = BeginDragDropSourceItemNative((byte*)plabelId, (ImGuiDragDropFlags)(0));
				return ret != 0;
			}
		}

		public static bool BeginDragDropSourceItem(string labelId, ImGuiDragDropFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginDragDropSourceItemNative(pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginDragDropSourceItem(string labelId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginDragDropSourceItemNative(pStr0, (ImGuiDragDropFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginDragDropSourceItem(ReadOnlySpan<byte> labelId, ImGuiDragDropFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				byte ret = BeginDragDropSourceItemNative((byte*)plabelId, flags);
				return ret != 0;
			}
		}

		public static bool BeginDragDropSourceItem(ReadOnlySpan<byte> labelId)
		{
			fixed (byte* plabelId = labelId)
			{
				byte ret = BeginDragDropSourceItemNative((byte*)plabelId, (ImGuiDragDropFlags)(0));
				return ret != 0;
			}
		}

		internal static void EndDragDropSourceNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[335])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[335])();
			#endif
		}

		public static void EndDragDropSource()
		{
			EndDragDropSourceNative();
		}

		internal static ImPlotStyle* GetStyleNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotStyle*>)vt[336])();
			#else
			return (ImPlotStyle*)((delegate* unmanaged[Cdecl]<nint>)vt[336])();
			#endif
		}

		public static ImPlotStylePtr GetStyle()
		{
			ImPlotStylePtr ret = GetStyleNative();
			return ret;
		}

		internal static void StyleColorsAutoNative(ImPlotStyle* dst)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotStyle*, void>)vt[337])(dst);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[337])((nint)dst);
			#endif
		}

		public static void StyleColorsAuto(ImPlotStylePtr dst)
		{
			StyleColorsAutoNative(dst);
		}

		public static void StyleColorsAuto()
		{
			StyleColorsAutoNative((ImPlotStyle*)(default));
		}

		public static void StyleColorsAuto(ref ImPlotStyle dst)
		{
			fixed (ImPlotStyle* pdst = &dst)
			{
				StyleColorsAutoNative((ImPlotStyle*)pdst);
			}
		}

		internal static void StyleColorsClassicNative(ImPlotStyle* dst)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotStyle*, void>)vt[338])(dst);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[338])((nint)dst);
			#endif
		}

		public static void StyleColorsClassic(ImPlotStylePtr dst)
		{
			StyleColorsClassicNative(dst);
		}

		public static void StyleColorsClassic()
		{
			StyleColorsClassicNative((ImPlotStyle*)(default));
		}

		public static void StyleColorsClassic(ref ImPlotStyle dst)
		{
			fixed (ImPlotStyle* pdst = &dst)
			{
				StyleColorsClassicNative((ImPlotStyle*)pdst);
			}
		}

		internal static void StyleColorsDarkNative(ImPlotStyle* dst)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotStyle*, void>)vt[339])(dst);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[339])((nint)dst);
			#endif
		}

		public static void StyleColorsDark(ImPlotStylePtr dst)
		{
			StyleColorsDarkNative(dst);
		}

		public static void StyleColorsDark()
		{
			StyleColorsDarkNative((ImPlotStyle*)(default));
		}

		public static void StyleColorsDark(ref ImPlotStyle dst)
		{
			fixed (ImPlotStyle* pdst = &dst)
			{
				StyleColorsDarkNative((ImPlotStyle*)pdst);
			}
		}

		internal static void StyleColorsLightNative(ImPlotStyle* dst)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotStyle*, void>)vt[340])(dst);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[340])((nint)dst);
			#endif
		}

		public static void StyleColorsLight(ImPlotStylePtr dst)
		{
			StyleColorsLightNative(dst);
		}

		public static void StyleColorsLight()
		{
			StyleColorsLightNative((ImPlotStyle*)(default));
		}

		public static void StyleColorsLight(ref ImPlotStyle dst)
		{
			fixed (ImPlotStyle* pdst = &dst)
			{
				StyleColorsLightNative((ImPlotStyle*)pdst);
			}
		}

		internal static void PushStyleColorNative(ImPlotCol idx, uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotCol, uint, void>)vt[341])(idx, col);
			#else
			((delegate* unmanaged[Cdecl]<ImPlotCol, uint, void>)vt[341])(idx, col);
			#endif
		}

		public static void PushStyleColor(ImPlotCol idx, uint col)
		{
			PushStyleColorNative(idx, col);
		}

		internal static void PushStyleColorNative(ImPlotCol idx, Vector4 col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotCol, Vector4, void>)vt[342])(idx, col);
			#else
			((delegate* unmanaged[Cdecl]<ImPlotCol, Vector4, void>)vt[342])(idx, col);
			#endif
		}

		public static void PushStyleColor(ImPlotCol idx, Vector4 col)
		{
			PushStyleColorNative(idx, col);
		}

		internal static void PopStyleColorNative(int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[343])(count);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[343])(count);
			#endif
		}

		public static void PopStyleColor(int count)
		{
			PopStyleColorNative(count);
		}

		public static void PopStyleColor()
		{
			PopStyleColorNative((int)(1));
		}

		internal static void PushStyleVarNative(ImPlotStyleVar idx, float val)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotStyleVar, float, void>)vt[344])(idx, val);
			#else
			((delegate* unmanaged[Cdecl]<ImPlotStyleVar, float, void>)vt[344])(idx, val);
			#endif
		}

		public static void PushStyleVar(ImPlotStyleVar idx, float val)
		{
			PushStyleVarNative(idx, val);
		}

		internal static void PushStyleVarNative(ImPlotStyleVar idx, int val)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotStyleVar, int, void>)vt[345])(idx, val);
			#else
			((delegate* unmanaged[Cdecl]<ImPlotStyleVar, int, void>)vt[345])(idx, val);
			#endif
		}

		public static void PushStyleVar(ImPlotStyleVar idx, int val)
		{
			PushStyleVarNative(idx, val);
		}

		internal static void PushStyleVarNative(ImPlotStyleVar idx, Vector2 val)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotStyleVar, Vector2, void>)vt[346])(idx, val);
			#else
			((delegate* unmanaged[Cdecl]<ImPlotStyleVar, Vector2, void>)vt[346])(idx, val);
			#endif
		}

		public static void PushStyleVar(ImPlotStyleVar idx, Vector2 val)
		{
			PushStyleVarNative(idx, val);
		}

		internal static void PopStyleVarNative(int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[347])(count);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[347])(count);
			#endif
		}

		public static void PopStyleVar(int count)
		{
			PopStyleVarNative(count);
		}

		public static void PopStyleVar()
		{
			PopStyleVarNative((int)(1));
		}

		internal static void SetNextLineStyleNative(Vector4 col, float weight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4, float, void>)vt[348])(col, weight);
			#else
			((delegate* unmanaged[Cdecl]<Vector4, float, void>)vt[348])(col, weight);
			#endif
		}

		public static void SetNextLineStyle(Vector4 col, float weight)
		{
			SetNextLineStyleNative(col, weight);
		}

		public static void SetNextLineStyle(Vector4 col)
		{
			SetNextLineStyleNative(col, (float)(-1));
		}

		public static void SetNextLineStyle()
		{
			SetNextLineStyleNative((Vector4)(new Vector4(0,0,0,-1)), (float)(-1));
		}

		public static void SetNextLineStyle(float weight)
		{
			SetNextLineStyleNative((Vector4)(new Vector4(0,0,0,-1)), weight);
		}

		internal static void SetNextFillStyleNative(Vector4 col, float alphaMod)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4, float, void>)vt[349])(col, alphaMod);
			#else
			((delegate* unmanaged[Cdecl]<Vector4, float, void>)vt[349])(col, alphaMod);
			#endif
		}

		public static void SetNextFillStyle(Vector4 col, float alphaMod)
		{
			SetNextFillStyleNative(col, alphaMod);
		}

		public static void SetNextFillStyle(Vector4 col)
		{
			SetNextFillStyleNative(col, (float)(-1));
		}

		public static void SetNextFillStyle()
		{
			SetNextFillStyleNative((Vector4)(new Vector4(0,0,0,-1)), (float)(-1));
		}

		public static void SetNextFillStyle(float alphaMod)
		{
			SetNextFillStyleNative((Vector4)(new Vector4(0,0,0,-1)), alphaMod);
		}

		internal static void SetNextMarkerStyleNative(ImPlotMarker marker, float size, Vector4 fill, float weight, Vector4 outline)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotMarker, float, Vector4, float, Vector4, void>)vt[350])(marker, size, fill, weight, outline);
			#else
			((delegate* unmanaged[Cdecl]<ImPlotMarker, float, Vector4, float, Vector4, void>)vt[350])(marker, size, fill, weight, outline);
			#endif
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, Vector4 fill, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, size, fill, weight, outline);
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, Vector4 fill, float weight)
		{
			SetNextMarkerStyleNative(marker, size, fill, weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, Vector4 fill)
		{
			SetNextMarkerStyleNative(marker, size, fill, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size)
		{
			SetNextMarkerStyleNative(marker, size, (Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle()
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(float size)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, (Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, Vector4 fill)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), fill, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(Vector4 fill)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), fill, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(float size, Vector4 fill)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, fill, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, float weight)
		{
			SetNextMarkerStyleNative(marker, size, (Vector4)(new Vector4(0,0,0,-1)), weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(float size, float weight)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, (Vector4)(new Vector4(0,0,0,-1)), weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, Vector4 fill, float weight)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), fill, weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(Vector4 fill, float weight)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), fill, weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(float size, Vector4 fill, float weight)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, fill, weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, Vector4 fill, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, size, fill, (float)(-1), outline);
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, Vector4 fill, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), fill, (float)(-1), outline);
		}

		public static void SetNextMarkerStyle(Vector4 fill, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), fill, (float)(-1), outline);
		}

		public static void SetNextMarkerStyle(float size, Vector4 fill, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, fill, (float)(-1), outline);
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, size, (Vector4)(new Vector4(0,0,0,-1)), weight, outline);
		}

		public static void SetNextMarkerStyle(float size, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, (Vector4)(new Vector4(0,0,0,-1)), weight, outline);
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, Vector4 fill, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), fill, weight, outline);
		}

		public static void SetNextMarkerStyle(Vector4 fill, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), fill, weight, outline);
		}

		public static void SetNextMarkerStyle(float size, Vector4 fill, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, fill, weight, outline);
		}

		internal static void SetNextErrorBarStyleNative(Vector4 col, float size, float weight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4, float, float, void>)vt[351])(col, size, weight);
			#else
			((delegate* unmanaged[Cdecl]<Vector4, float, float, void>)vt[351])(col, size, weight);
			#endif
		}

		public static void SetNextErrorBarStyle(Vector4 col, float size, float weight)
		{
			SetNextErrorBarStyleNative(col, size, weight);
		}

		public static void SetNextErrorBarStyle(Vector4 col, float size)
		{
			SetNextErrorBarStyleNative(col, size, (float)(-1));
		}

		public static void SetNextErrorBarStyle(Vector4 col)
		{
			SetNextErrorBarStyleNative(col, (float)(-1), (float)(-1));
		}

		public static void SetNextErrorBarStyle()
		{
			SetNextErrorBarStyleNative((Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (float)(-1));
		}

		public static void SetNextErrorBarStyle(float size)
		{
			SetNextErrorBarStyleNative((Vector4)(new Vector4(0,0,0,-1)), size, (float)(-1));
		}

		public static void SetNextErrorBarStyle(float size, float weight)
		{
			SetNextErrorBarStyleNative((Vector4)(new Vector4(0,0,0,-1)), size, weight);
		}

		internal static void GetLastItemColorNative(Vector4* output)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, void>)vt[352])(output);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[352])((nint)output);
			#endif
		}

		public static Vector4 GetLastItemColor()
		{
			Vector4 ret;
			GetLastItemColorNative(&ret);
			return ret;
		}

		public static void GetLastItemColor(Vector4* output)
		{
			GetLastItemColorNative(output);
		}

		public static void GetLastItemColor(ref Vector4 output)
		{
			fixed (Vector4* poutput = &output)
			{
				GetLastItemColorNative((Vector4*)poutput);
			}
		}

		internal static byte* GetStyleColorNameNative(ImPlotCol idx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotCol, byte*>)vt[353])(idx);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<ImPlotCol, nint>)vt[353])(idx);
			#endif
		}

		public static byte* GetStyleColorName(ImPlotCol idx)
		{
			byte* ret = GetStyleColorNameNative(idx);
			return ret;
		}

		public static string GetStyleColorNameS(ImPlotCol idx)
		{
			string ret = Utils.DecodeStringUTF8(GetStyleColorNameNative(idx));
			return ret;
		}

		internal static byte* GetMarkerNameNative(ImPlotMarker idx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotMarker, byte*>)vt[354])(idx);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<ImPlotMarker, nint>)vt[354])(idx);
			#endif
		}

		public static byte* GetMarkerName(ImPlotMarker idx)
		{
			byte* ret = GetMarkerNameNative(idx);
			return ret;
		}

		public static string GetMarkerNameS(ImPlotMarker idx)
		{
			string ret = Utils.DecodeStringUTF8(GetMarkerNameNative(idx));
			return ret;
		}

		internal static ImPlotColormap AddColormapNative(byte* name, Vector4* cols, int size, byte qual)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Vector4*, int, byte, ImPlotColormap>)vt[355])(name, cols, size, qual);
			#else
			return (ImPlotColormap)((delegate* unmanaged[Cdecl]<nint, nint, int, byte, ImPlotColormap>)vt[355])((nint)name, (nint)cols, size, qual);
			#endif
		}

		public static ImPlotColormap AddColormap(byte* name, Vector4* cols, int size, bool qual)
		{
			ImPlotColormap ret = AddColormapNative(name, cols, size, qual ? (byte)1 : (byte)0);
			return ret;
		}

		public static ImPlotColormap AddColormap(byte* name, Vector4* cols, int size)
		{
			ImPlotColormap ret = AddColormapNative(name, cols, size, (byte)(1));
			return ret;
		}

		public static ImPlotColormap AddColormap(ref byte name, Vector4* cols, int size, bool qual)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, Vector4* cols, int size)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(string name, Vector4* cols, int size, bool qual)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = AddColormapNative(pStr0, cols, size, qual ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImPlotColormap AddColormap(string name, Vector4* cols, int size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = AddColormapNative(pStr0, cols, size, (byte)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImPlotColormap AddColormap(ReadOnlySpan<byte> name, Vector4* cols, int size, bool qual)
		{
			fixed (byte* pname = name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ReadOnlySpan<byte> name, Vector4* cols, int size)
		{
			fixed (byte* pname = name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(byte* name, ref Vector4 cols, int size, bool qual)
		{
			fixed (Vector4* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(name, (Vector4*)pcols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(byte* name, ref Vector4 cols, int size)
		{
			fixed (Vector4* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(name, (Vector4*)pcols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, ref Vector4 cols, int size, bool qual)
		{
			fixed (byte* pname = &name)
			{
				fixed (Vector4* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (Vector4*)pcols, size, qual ? (byte)1 : (byte)0);
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, ref Vector4 cols, int size)
		{
			fixed (byte* pname = &name)
			{
				fixed (Vector4* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (Vector4*)pcols, size, (byte)(1));
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(string name, ref Vector4 cols, int size, bool qual)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(pStr0, (Vector4*)pcols, size, qual ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(string name, ref Vector4 cols, int size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(pStr0, (Vector4*)pcols, size, (byte)(1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ReadOnlySpan<byte> name, ref Vector4 cols, int size, bool qual)
		{
			fixed (byte* pname = name)
			{
				fixed (Vector4* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (Vector4*)pcols, size, qual ? (byte)1 : (byte)0);
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(ReadOnlySpan<byte> name, ref Vector4 cols, int size)
		{
			fixed (byte* pname = name)
			{
				fixed (Vector4* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (Vector4*)pcols, size, (byte)(1));
					return ret;
				}
			}
		}

		internal static ImPlotColormap AddColormapNative(byte* name, uint* cols, int size, byte qual)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, uint*, int, byte, ImPlotColormap>)vt[356])(name, cols, size, qual);
			#else
			return (ImPlotColormap)((delegate* unmanaged[Cdecl]<nint, nint, int, byte, ImPlotColormap>)vt[356])((nint)name, (nint)cols, size, qual);
			#endif
		}

		public static ImPlotColormap AddColormap(byte* name, uint* cols, int size, bool qual)
		{
			ImPlotColormap ret = AddColormapNative(name, cols, size, qual ? (byte)1 : (byte)0);
			return ret;
		}

		public static ImPlotColormap AddColormap(byte* name, uint* cols, int size)
		{
			ImPlotColormap ret = AddColormapNative(name, cols, size, (byte)(1));
			return ret;
		}

		public static ImPlotColormap AddColormap(ref byte name, uint* cols, int size, bool qual)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, uint* cols, int size)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(string name, uint* cols, int size, bool qual)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = AddColormapNative(pStr0, cols, size, qual ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImPlotColormap AddColormap(string name, uint* cols, int size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = AddColormapNative(pStr0, cols, size, (byte)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImPlotColormap AddColormap(ReadOnlySpan<byte> name, uint* cols, int size, bool qual)
		{
			fixed (byte* pname = name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ReadOnlySpan<byte> name, uint* cols, int size)
		{
			fixed (byte* pname = name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(byte* name, ref uint cols, int size, bool qual)
		{
			fixed (uint* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(name, (uint*)pcols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(byte* name, ref uint cols, int size)
		{
			fixed (uint* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(name, (uint*)pcols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, ref uint cols, int size, bool qual)
		{
			fixed (byte* pname = &name)
			{
				fixed (uint* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (uint*)pcols, size, qual ? (byte)1 : (byte)0);
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, ref uint cols, int size)
		{
			fixed (byte* pname = &name)
			{
				fixed (uint* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (uint*)pcols, size, (byte)(1));
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(string name, ref uint cols, int size, bool qual)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(pStr0, (uint*)pcols, size, qual ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(string name, ref uint cols, int size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(pStr0, (uint*)pcols, size, (byte)(1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ReadOnlySpan<byte> name, ref uint cols, int size, bool qual)
		{
			fixed (byte* pname = name)
			{
				fixed (uint* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (uint*)pcols, size, qual ? (byte)1 : (byte)0);
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(ReadOnlySpan<byte> name, ref uint cols, int size)
		{
			fixed (byte* pname = name)
			{
				fixed (uint* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (uint*)pcols, size, (byte)(1));
					return ret;
				}
			}
		}

		internal static int GetColormapCountNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[357])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[357])();
			#endif
		}

		public static int GetColormapCount()
		{
			int ret = GetColormapCountNative();
			return ret;
		}

		internal static byte* GetColormapNameNative(ImPlotColormap cmap)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotColormap, byte*>)vt[358])(cmap);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<ImPlotColormap, nint>)vt[358])(cmap);
			#endif
		}

		public static byte* GetColormapName(ImPlotColormap cmap)
		{
			byte* ret = GetColormapNameNative(cmap);
			return ret;
		}

		public static string GetColormapNameS(ImPlotColormap cmap)
		{
			string ret = Utils.DecodeStringUTF8(GetColormapNameNative(cmap));
			return ret;
		}

		internal static ImPlotColormap GetColormapIndexNative(byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImPlotColormap>)vt[359])(name);
			#else
			return (ImPlotColormap)((delegate* unmanaged[Cdecl]<nint, ImPlotColormap>)vt[359])((nint)name);
			#endif
		}

		public static ImPlotColormap GetColormapIndex(byte* name)
		{
			ImPlotColormap ret = GetColormapIndexNative(name);
			return ret;
		}

		public static ImPlotColormap GetColormapIndex(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = GetColormapIndexNative((byte*)pname);
				return ret;
			}
		}

		public static ImPlotColormap GetColormapIndex(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = GetColormapIndexNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImPlotColormap GetColormapIndex(ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				ImPlotColormap ret = GetColormapIndexNative((byte*)pname);
				return ret;
			}
		}

		internal static void PushColormapNative(ImPlotColormap cmap)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotColormap, void>)vt[360])(cmap);
			#else
			((delegate* unmanaged[Cdecl]<ImPlotColormap, void>)vt[360])(cmap);
			#endif
		}

		public static void PushColormap(ImPlotColormap cmap)
		{
			PushColormapNative(cmap);
		}

		internal static void PushColormapNative(byte* name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[361])(name);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[361])((nint)name);
			#endif
		}

		public static void PushColormap(byte* name)
		{
			PushColormapNative(name);
		}

		public static void PushColormap(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				PushColormapNative((byte*)pname);
			}
		}

		public static void PushColormap(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushColormapNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PushColormap(ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				PushColormapNative((byte*)pname);
			}
		}

		internal static void PopColormapNative(int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[362])(count);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[362])(count);
			#endif
		}

		public static void PopColormap(int count)
		{
			PopColormapNative(count);
		}

		public static void PopColormap()
		{
			PopColormapNative((int)(1));
		}

		internal static void NextColormapColorNative(Vector4* output)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, void>)vt[363])(output);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[363])((nint)output);
			#endif
		}

		public static Vector4 NextColormapColor()
		{
			Vector4 ret;
			NextColormapColorNative(&ret);
			return ret;
		}

		public static void NextColormapColor(Vector4* output)
		{
			NextColormapColorNative(output);
		}

		public static void NextColormapColor(ref Vector4 output)
		{
			fixed (Vector4* poutput = &output)
			{
				NextColormapColorNative((Vector4*)poutput);
			}
		}

		internal static int GetColormapSizeNative(ImPlotColormap cmap)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotColormap, int>)vt[364])(cmap);
			#else
			return (int)((delegate* unmanaged[Cdecl]<ImPlotColormap, int>)vt[364])(cmap);
			#endif
		}

		public static int GetColormapSize(ImPlotColormap cmap)
		{
			int ret = GetColormapSizeNative(cmap);
			return ret;
		}

		public static int GetColormapSize()
		{
			int ret = GetColormapSizeNative((ImPlotColormap)(-1));
			return ret;
		}

		internal static void GetColormapColorNative(Vector4* output, int idx, ImPlotColormap cmap)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, int, ImPlotColormap, void>)vt[365])(output, idx, cmap);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotColormap, void>)vt[365])((nint)output, idx, cmap);
			#endif
		}

		public static Vector4 GetColormapColor(int idx)
		{
			Vector4 ret;
			GetColormapColorNative(&ret, idx, (ImPlotColormap)(-1));
			return ret;
		}

		public static Vector4 GetColormapColor(int idx, ImPlotColormap cmap)
		{
			Vector4 ret;
			GetColormapColorNative(&ret, idx, cmap);
			return ret;
		}

		public static void GetColormapColor(Vector4* output, int idx, ImPlotColormap cmap)
		{
			GetColormapColorNative(output, idx, cmap);
		}

		public static void GetColormapColor(Vector4* output, int idx)
		{
			GetColormapColorNative(output, idx, (ImPlotColormap)(-1));
		}

		public static void GetColormapColor(ref Vector4 output, int idx, ImPlotColormap cmap)
		{
			fixed (Vector4* poutput = &output)
			{
				GetColormapColorNative((Vector4*)poutput, idx, cmap);
			}
		}

		public static void GetColormapColor(ref Vector4 output, int idx)
		{
			fixed (Vector4* poutput = &output)
			{
				GetColormapColorNative((Vector4*)poutput, idx, (ImPlotColormap)(-1));
			}
		}

		internal static void SampleColormapNative(Vector4* output, float t, ImPlotColormap cmap)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, float, ImPlotColormap, void>)vt[366])(output, t, cmap);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, ImPlotColormap, void>)vt[366])((nint)output, t, cmap);
			#endif
		}

		public static Vector4 SampleColormap(float t)
		{
			Vector4 ret;
			SampleColormapNative(&ret, t, (ImPlotColormap)(-1));
			return ret;
		}

		public static Vector4 SampleColormap(float t, ImPlotColormap cmap)
		{
			Vector4 ret;
			SampleColormapNative(&ret, t, cmap);
			return ret;
		}

		public static void SampleColormap(Vector4* output, float t, ImPlotColormap cmap)
		{
			SampleColormapNative(output, t, cmap);
		}

		public static void SampleColormap(Vector4* output, float t)
		{
			SampleColormapNative(output, t, (ImPlotColormap)(-1));
		}

		public static void SampleColormap(ref Vector4 output, float t, ImPlotColormap cmap)
		{
			fixed (Vector4* poutput = &output)
			{
				SampleColormapNative((Vector4*)poutput, t, cmap);
			}
		}

		public static void SampleColormap(ref Vector4 output, float t)
		{
			fixed (Vector4* poutput = &output)
			{
				SampleColormapNative((Vector4*)poutput, t, (ImPlotColormap)(-1));
			}
		}

		internal static void ColormapScaleNative(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, double, double, Vector2, byte*, ImPlotColormapScaleFlags, ImPlotColormap, void>)vt[367])(label, scaleMin, scaleMax, size, format, flags, cmap);
			#else
			((delegate* unmanaged[Cdecl]<nint, double, double, Vector2, nint, ImPlotColormapScaleFlags, ImPlotColormap, void>)vt[367])((nint)label, scaleMin, scaleMax, size, (nint)format, flags, cmap);
			#endif
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, size, format, flags, cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, size, format, flags, (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size)
		{
			ColormapScale(label, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax)
		{
			ColormapScale(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, byte* format)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags)
		{
			ColormapScale(label, scaleMin, scaleMax, size, (string)"%g", flags, (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags)
		{
			ColormapScale(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormap cmap)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormap cmap)
		{
			ColormapScale(label, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ImPlotColormap cmap)
		{
			ColormapScale(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, byte* format, ImPlotColormap cmap)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			ColormapScale(label, scaleMin, scaleMax, size, (string)"%g", flags, cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			ColormapScale(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, cmap);
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, flags, cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", flags, cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, cmap);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, format, flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, format, flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, size, (string)"%g", flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, size, (string)"%g", flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, flags, cmap);
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, byte* format)
		{
			fixed (byte* plabel = label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size)
		{
			fixed (byte* plabel = label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax)
		{
			fixed (byte* plabel = label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, byte* format)
		{
			fixed (byte* plabel = label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", flags, cmap);
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, cmap);
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, flags, cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ref byte format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormap cmap)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ref byte format, ImPlotColormap cmap)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ref byte format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, size, pStr0, flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, size, pStr0, flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, size, pStr0, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr0, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, string format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr0, flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, size, pStr0, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, string format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr0, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, string format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr0, flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ReadOnlySpan<byte> format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* pformat = format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, flags, cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ReadOnlySpan<byte> format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* pformat = format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ReadOnlySpan<byte> format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* pformat = format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ReadOnlySpan<byte> format, ImPlotColormap cmap)
		{
			fixed (byte* pformat = format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ReadOnlySpan<byte> format, ImPlotColormap cmap)
		{
			fixed (byte* pformat = format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ReadOnlySpan<byte> format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* pformat = format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, flags, cmap);
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, flags, (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ref byte format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ref byte format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ref byte format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, cmap);
				}
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, pStr1, flags, cmap);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, pStr1, flags, (ImPlotColormap)(-1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, pStr1, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr1, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, string format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr1, flags, (ImPlotColormap)(-1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, pStr1, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, string format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr1, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, string format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr1, flags, cmap);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, ReadOnlySpan<byte> format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, flags, cmap);
				}
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, ReadOnlySpan<byte> format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, flags, (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, ReadOnlySpan<byte> format)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, ReadOnlySpan<byte> format)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, ReadOnlySpan<byte> format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, Vector2 size, ReadOnlySpan<byte> format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
				}
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, ReadOnlySpan<byte> format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
				}
			}
		}

		public static void ColormapScale(ReadOnlySpan<byte> label, double scaleMin, double scaleMax, ReadOnlySpan<byte> format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, cmap);
				}
			}
		}

		internal static byte ColormapSliderNative(byte* label, float* t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, float*, Vector4*, byte*, ImPlotColormap, byte>)vt[368])(label, t, output, format, cmap);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, ImPlotColormap, byte>)vt[368])((nint)label, (nint)t, (nint)output, (nint)format, cmap);
			#endif
		}

		public static bool ColormapSlider(byte* label, float* t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			byte ret = ColormapSliderNative(label, t, output, format, cmap);
			return ret != 0;
		}

		public static bool ColormapSlider(byte* label, float* t, Vector4* output, byte* format)
		{
			byte ret = ColormapSliderNative(label, t, output, format, (ImPlotColormap)(-1));
			return ret != 0;
		}

		public static bool ColormapSlider(byte* label, float* t, Vector4* output)
		{
			bool ret = ColormapSlider(label, t, output, (string)"", (ImPlotColormap)(-1));
			return ret;
		}

		public static bool ColormapSlider(byte* label, float* t)
		{
			bool ret = ColormapSlider(label, t, (Vector4*)(default), (string)"", (ImPlotColormap)(-1));
			return ret;
		}

		public static bool ColormapSlider(byte* label, float* t, byte* format)
		{
			byte ret = ColormapSliderNative(label, t, (Vector4*)(default), format, (ImPlotColormap)(-1));
			return ret != 0;
		}

		public static bool ColormapSlider(byte* label, float* t, Vector4* output, ImPlotColormap cmap)
		{
			bool ret = ColormapSlider(label, t, output, (string)"", cmap);
			return ret;
		}

		public static bool ColormapSlider(byte* label, float* t, ImPlotColormap cmap)
		{
			bool ret = ColormapSlider(label, t, (Vector4*)(default), (string)"", cmap);
			return ret;
		}

		public static bool ColormapSlider(byte* label, float* t, byte* format, ImPlotColormap cmap)
		{
			byte ret = ColormapSliderNative(label, t, (Vector4*)(default), format, cmap);
			return ret != 0;
		}

		public static bool ColormapSlider(ref byte label, float* t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColormapSliderNative((byte*)plabel, t, output, format, cmap);
				return ret != 0;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, Vector4* output, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColormapSliderNative((byte*)plabel, t, output, format, (ImPlotColormap)(-1));
				return ret != 0;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, Vector4* output)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = ColormapSlider((byte*)plabel, t, output, (string)"", (ImPlotColormap)(-1));
				return ret;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = ColormapSlider((byte*)plabel, t, (Vector4*)(default), (string)"", (ImPlotColormap)(-1));
				return ret;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColormapSliderNative((byte*)plabel, t, (Vector4*)(default), format, (ImPlotColormap)(-1));
				return ret != 0;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, Vector4* output, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = ColormapSlider((byte*)plabel, t, output, (string)"", cmap);
				return ret;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = ColormapSlider((byte*)plabel, t, (Vector4*)(default), (string)"", cmap);
				return ret;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColormapSliderNative((byte*)plabel, t, (Vector4*)(default), format, cmap);
				return ret != 0;
			}
		}

		public static bool ColormapSlider(string label, float* t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColormapSliderNative(pStr0, t, output, format, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool ColormapSlider(string label, float* t, Vector4* output, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColormapSliderNative(pStr0, t, output, format, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool ColormapSlider(string label, float* t, Vector4* output)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = ColormapSlider(pStr0, t, output, (string)"", (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static bool ColormapSlider(string label, float* t)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = ColormapSlider(pStr0, t, (Vector4*)(default), (string)"", (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static bool ColormapSlider(string label, float* t, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColormapSliderNative(pStr0, t, (Vector4*)(default), format, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool ColormapSlider(string label, float* t, Vector4* output, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = ColormapSlider(pStr0, t, output, (string)"", cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}
	}
}
