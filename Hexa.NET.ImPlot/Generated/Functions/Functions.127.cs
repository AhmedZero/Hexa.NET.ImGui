// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot
{
	public unsafe partial class ImPlot
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static uint CalcHoverColorNative(uint col)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint>)vt[654])(col);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint>)vt[654])(col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint CalcHoverColor(uint col)
		{
			uint ret = CalcHoverColorNative(col);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void ClampLabelPosNative(Vector2* pOut, Vector2 pos, Vector2 size, Vector2 min, Vector2 max)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, void>)vt[655])(pOut, pos, size, min, max);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, void>)vt[655])((nint)pOut, pos, size, min, max);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 ClampLabelPos(Vector2 pos, Vector2 size, Vector2 min, Vector2 max)
		{
			Vector2 ret;
			ClampLabelPosNative(&ret, pos, size, min, max);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClampLabelPos(Vector2* pOut, Vector2 pos, Vector2 size, Vector2 min, Vector2 max)
		{
			ClampLabelPosNative(pOut, pos, size, min, max);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ClampLabelPos(ref Vector2 pOut, Vector2 pos, Vector2 size, Vector2 min, Vector2 max)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ClampLabelPosNative((Vector2*)ppOut, pos, size, min, max);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static uint GetColormapColorU32Native(int idx, ImPlotColormap cmap)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImPlotColormap, uint>)vt[656])(idx, cmap);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<int, ImPlotColormap, uint>)vt[656])(idx, cmap);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint GetColormapColorU32(int idx, ImPlotColormap cmap)
		{
			uint ret = GetColormapColorU32Native(idx, cmap);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static uint NextColormapColorU32Native()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[657])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[657])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint NextColormapColorU32()
		{
			uint ret = NextColormapColorU32Native();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static uint SampleColormapU32Native(float t, ImPlotColormap cmap)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, ImPlotColormap, uint>)vt[658])(t, cmap);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<float, ImPlotColormap, uint>)vt[658])(t, cmap);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint SampleColormapU32(float t, ImPlotColormap cmap)
		{
			uint ret = SampleColormapU32Native(t, cmap);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void RenderColorBarNative(uint* colors, int size, ImDrawList* drawList, ImRect bounds, byte vert, byte reversed, byte continuous)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, ImDrawList*, ImRect, byte, byte, byte, void>)vt[659])(colors, size, drawList, bounds, vert, reversed, continuous);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, ImRect, byte, byte, byte, void>)vt[659])((nint)colors, size, (nint)drawList, bounds, vert, reversed, continuous);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RenderColorBar(uint* colors, int size, ImDrawListPtr drawList, ImRect bounds, bool vert, bool reversed, bool continuous)
		{
			RenderColorBarNative(colors, size, drawList, bounds, vert ? (byte)1 : (byte)0, reversed ? (byte)1 : (byte)0, continuous ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RenderColorBar(ref uint colors, int size, ImDrawListPtr drawList, ImRect bounds, bool vert, bool reversed, bool continuous)
		{
			fixed (uint* pcolors = &colors)
			{
				RenderColorBarNative((uint*)pcolors, size, drawList, bounds, vert ? (byte)1 : (byte)0, reversed ? (byte)1 : (byte)0, continuous ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RenderColorBar(uint* colors, int size, ref ImDrawList drawList, ImRect bounds, bool vert, bool reversed, bool continuous)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderColorBarNative(colors, size, (ImDrawList*)pdrawList, bounds, vert ? (byte)1 : (byte)0, reversed ? (byte)1 : (byte)0, continuous ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RenderColorBar(ref uint colors, int size, ref ImDrawList drawList, ImRect bounds, bool vert, bool reversed, bool continuous)
		{
			fixed (uint* pcolors = &colors)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					RenderColorBarNative((uint*)pcolors, size, (ImDrawList*)pdrawList, bounds, vert ? (byte)1 : (byte)0, reversed ? (byte)1 : (byte)0, continuous ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double NiceNumNative(double x, byte round)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, byte, double>)vt[660])(x, round);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, byte, double>)vt[660])(x, round);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double NiceNum(double x, bool round)
		{
			double ret = NiceNumNative(x, round ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int OrderOfMagnitudeNative(double val)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, int>)vt[661])(val);
			#else
			return (int)((delegate* unmanaged[Cdecl]<double, int>)vt[661])(val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int OrderOfMagnitude(double val)
		{
			int ret = OrderOfMagnitudeNative(val);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int OrderToPrecisionNative(int order)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[662])(order);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[662])(order);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int OrderToPrecision(int order)
		{
			int ret = OrderToPrecisionNative(order);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int PrecisionNative(double val)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, int>)vt[663])(val);
			#else
			return (int)((delegate* unmanaged[Cdecl]<double, int>)vt[663])(val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int Precision(double val)
		{
			int ret = PrecisionNative(val);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double RoundToNative(double val, int prec)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, int, double>)vt[664])(val, prec);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, int, double>)vt[664])(val, prec);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double RoundTo(double val, int prec)
		{
			double ret = RoundToNative(val, prec);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void IntersectionNative(Vector2* pOut, Vector2 a1, Vector2 a2, Vector2 b1, Vector2 b2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, void>)vt[665])(pOut, a1, a2, b1, b2);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, void>)vt[665])((nint)pOut, a1, a2, b1, b2);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Vector2 Intersection(Vector2 a1, Vector2 a2, Vector2 b1, Vector2 b2)
		{
			Vector2 ret;
			IntersectionNative(&ret, a1, a2, b1, b2);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Intersection(Vector2* pOut, Vector2 a1, Vector2 a2, Vector2 b1, Vector2 b2)
		{
			IntersectionNative(pOut, a1, a2, b1, b2);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Intersection(ref Vector2 pOut, Vector2 a1, Vector2 a2, Vector2 b1, Vector2 b2)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				IntersectionNative((Vector2*)ppOut, a1, a2, b1, b2);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorFloatPtrNative(ImVector<float>* buffer, int n, float vmin, float vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<float>*, int, float, float, void>)vt[666])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, float, float, void>)vt[666])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorFloatPtr(ImVector<float>* buffer, int n, float vmin, float vmax)
		{
			FillRangeVectorFloatPtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorFloatPtr(ref ImVector<float> buffer, int n, float vmin, float vmax)
		{
			fixed (ImVector<float>* pbuffer = &buffer)
			{
				FillRangeVectorFloatPtrNative((ImVector<float>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorDoublePtrNative(ImVector<double>* buffer, int n, double vmin, double vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<double>*, int, double, double, void>)vt[667])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, double, double, void>)vt[667])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorDoublePtr(ImVector<double>* buffer, int n, double vmin, double vmax)
		{
			FillRangeVectorDoublePtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorDoublePtr(ref ImVector<double> buffer, int n, double vmin, double vmax)
		{
			fixed (ImVector<double>* pbuffer = &buffer)
			{
				FillRangeVectorDoublePtrNative((ImVector<double>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorS8PtrNative(ImVector<sbyte>* buffer, int n, byte vmin, byte vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<sbyte>*, int, byte, byte, void>)vt[668])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, byte, byte, void>)vt[668])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorS8Ptr(ImVector<sbyte>* buffer, int n, byte vmin, byte vmax)
		{
			FillRangeVectorS8PtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorS8Ptr(ref ImVector<sbyte> buffer, int n, byte vmin, byte vmax)
		{
			fixed (ImVector<sbyte>* pbuffer = &buffer)
			{
				FillRangeVectorS8PtrNative((ImVector<sbyte>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorU8PtrNative(ImVector<byte>* buffer, int n, byte vmin, byte vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<byte>*, int, byte, byte, void>)vt[669])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, byte, byte, void>)vt[669])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorU8Ptr(ImVector<byte>* buffer, int n, byte vmin, byte vmax)
		{
			FillRangeVectorU8PtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorU8Ptr(ref ImVector<byte> buffer, int n, byte vmin, byte vmax)
		{
			fixed (ImVector<byte>* pbuffer = &buffer)
			{
				FillRangeVectorU8PtrNative((ImVector<byte>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorS16PtrNative(ImVector<short>* buffer, int n, short vmin, short vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<short>*, int, short, short, void>)vt[670])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, short, short, void>)vt[670])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorS16Ptr(ImVector<short>* buffer, int n, short vmin, short vmax)
		{
			FillRangeVectorS16PtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorS16Ptr(ref ImVector<short> buffer, int n, short vmin, short vmax)
		{
			fixed (ImVector<short>* pbuffer = &buffer)
			{
				FillRangeVectorS16PtrNative((ImVector<short>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorU16PtrNative(ImVector<ushort>* buffer, int n, ushort vmin, ushort vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<ushort>*, int, ushort, ushort, void>)vt[671])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ushort, ushort, void>)vt[671])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorU16Ptr(ImVector<ushort>* buffer, int n, ushort vmin, ushort vmax)
		{
			FillRangeVectorU16PtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorU16Ptr(ref ImVector<ushort> buffer, int n, ushort vmin, ushort vmax)
		{
			fixed (ImVector<ushort>* pbuffer = &buffer)
			{
				FillRangeVectorU16PtrNative((ImVector<ushort>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorS32PtrNative(ImVector<int>* buffer, int n, int vmin, int vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<int>*, int, int, int, void>)vt[672])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, void>)vt[672])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorS32Ptr(ImVector<int>* buffer, int n, int vmin, int vmax)
		{
			FillRangeVectorS32PtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorS32Ptr(ref ImVector<int> buffer, int n, int vmin, int vmax)
		{
			fixed (ImVector<int>* pbuffer = &buffer)
			{
				FillRangeVectorS32PtrNative((ImVector<int>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorU32PtrNative(ImVector<uint>* buffer, int n, uint vmin, uint vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<uint>*, int, uint, uint, void>)vt[673])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, uint, uint, void>)vt[673])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorU32Ptr(ImVector<uint>* buffer, int n, uint vmin, uint vmax)
		{
			FillRangeVectorU32PtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorU32Ptr(ref ImVector<uint> buffer, int n, uint vmin, uint vmax)
		{
			fixed (ImVector<uint>* pbuffer = &buffer)
			{
				FillRangeVectorU32PtrNative((ImVector<uint>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorS64PtrNative(ImVector<long>* buffer, int n, long vmin, long vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<long>*, int, long, long, void>)vt[674])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, long, long, void>)vt[674])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorS64Ptr(ImVector<long>* buffer, int n, long vmin, long vmax)
		{
			FillRangeVectorS64PtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorS64Ptr(ref ImVector<long> buffer, int n, long vmin, long vmax)
		{
			fixed (ImVector<long>* pbuffer = &buffer)
			{
				FillRangeVectorS64PtrNative((ImVector<long>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FillRangeVectorU64PtrNative(ImVector<ulong>* buffer, int n, ulong vmin, ulong vmax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<ulong>*, int, ulong, ulong, void>)vt[675])(buffer, n, vmin, vmax);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ulong, ulong, void>)vt[675])((nint)buffer, n, vmin, vmax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorU64Ptr(ImVector<ulong>* buffer, int n, ulong vmin, ulong vmax)
		{
			FillRangeVectorU64PtrNative(buffer, n, vmin, vmax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FillRangeVectorU64Ptr(ref ImVector<ulong> buffer, int n, ulong vmin, ulong vmax)
		{
			fixed (ImVector<ulong>* pbuffer = &buffer)
			{
				FillRangeVectorU64PtrNative((ImVector<ulong>*)pbuffer, n, vmin, vmax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsFloatPtrNative(float* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[676])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[676])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsFloatPtr(float* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsFloatPtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsFloatPtr(ref float values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (float* pvalues = &values)
			{
				CalculateBinsFloatPtrNative((float*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsFloatPtr(float* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsFloatPtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsFloatPtr(ref float values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (float* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsFloatPtrNative((float*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsFloatPtr(float* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsFloatPtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsFloatPtr(ref float values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (float* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsFloatPtrNative((float*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsFloatPtr(float* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsFloatPtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsFloatPtr(ref float values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (float* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsFloatPtrNative((float*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsDoublePtrNative(double* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[677])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[677])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsDoublePtr(double* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsDoublePtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsDoublePtr(ref double values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (double* pvalues = &values)
			{
				CalculateBinsDoublePtrNative((double*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsDoublePtr(double* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsDoublePtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsDoublePtr(ref double values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (double* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsDoublePtrNative((double*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsDoublePtr(double* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsDoublePtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsDoublePtr(ref double values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsDoublePtrNative((double*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsDoublePtr(double* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsDoublePtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsDoublePtr(ref double values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (double* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsDoublePtrNative((double*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsS8PtrNative(byte* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[678])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[678])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS8Ptr(byte* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsS8PtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS8Ptr(ref byte values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (byte* pvalues = &values)
			{
				CalculateBinsS8PtrNative((byte*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS8Ptr(byte* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsS8PtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS8Ptr(ref byte values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (byte* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsS8PtrNative((byte*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS8Ptr(byte* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsS8PtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS8Ptr(ref byte values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (byte* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsS8PtrNative((byte*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS8Ptr(byte* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsS8PtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS8Ptr(ref byte values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (byte* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsS8PtrNative((byte*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsU8PtrNative(byte* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[679])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[679])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU8Ptr(byte* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsU8PtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU8Ptr(ref byte values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (byte* pvalues = &values)
			{
				CalculateBinsU8PtrNative((byte*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU8Ptr(byte* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsU8PtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU8Ptr(ref byte values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (byte* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsU8PtrNative((byte*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU8Ptr(byte* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsU8PtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU8Ptr(ref byte values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (byte* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsU8PtrNative((byte*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU8Ptr(byte* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsU8PtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU8Ptr(ref byte values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (byte* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsU8PtrNative((byte*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsS16PtrNative(short* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[680])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[680])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS16Ptr(short* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsS16PtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS16Ptr(ref short values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (short* pvalues = &values)
			{
				CalculateBinsS16PtrNative((short*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS16Ptr(short* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsS16PtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS16Ptr(ref short values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (short* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsS16PtrNative((short*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS16Ptr(short* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsS16PtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS16Ptr(ref short values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (short* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsS16PtrNative((short*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS16Ptr(short* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsS16PtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS16Ptr(ref short values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (short* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsS16PtrNative((short*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsU16PtrNative(ushort* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[681])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[681])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU16Ptr(ushort* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsU16PtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU16Ptr(ref ushort values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (ushort* pvalues = &values)
			{
				CalculateBinsU16PtrNative((ushort*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU16Ptr(ushort* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsU16PtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU16Ptr(ref ushort values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (ushort* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsU16PtrNative((ushort*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU16Ptr(ushort* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsU16PtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU16Ptr(ref ushort values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (ushort* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsU16PtrNative((ushort*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU16Ptr(ushort* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsU16PtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU16Ptr(ref ushort values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (ushort* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsU16PtrNative((ushort*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsS32PtrNative(int* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[682])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[682])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS32Ptr(int* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsS32PtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS32Ptr(ref int values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (int* pvalues = &values)
			{
				CalculateBinsS32PtrNative((int*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS32Ptr(int* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsS32PtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS32Ptr(ref int values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsS32PtrNative((int*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS32Ptr(int* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsS32PtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS32Ptr(ref int values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (int* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsS32PtrNative((int*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS32Ptr(int* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsS32PtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS32Ptr(ref int values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsS32PtrNative((int*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsU32PtrNative(uint* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[683])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[683])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU32Ptr(uint* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsU32PtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU32Ptr(ref uint values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (uint* pvalues = &values)
			{
				CalculateBinsU32PtrNative((uint*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU32Ptr(uint* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsU32PtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU32Ptr(ref uint values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (uint* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsU32PtrNative((uint*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU32Ptr(uint* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsU32PtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU32Ptr(ref uint values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (uint* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsU32PtrNative((uint*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU32Ptr(uint* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsU32PtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU32Ptr(ref uint values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (uint* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsU32PtrNative((uint*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsS64PtrNative(long* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<long*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[684])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[684])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS64Ptr(long* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsS64PtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS64Ptr(ref long values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (long* pvalues = &values)
			{
				CalculateBinsS64PtrNative((long*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS64Ptr(long* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsS64PtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS64Ptr(ref long values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (long* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsS64PtrNative((long*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS64Ptr(long* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsS64PtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS64Ptr(ref long values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (long* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsS64PtrNative((long*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS64Ptr(long* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsS64PtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsS64Ptr(ref long values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (long* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsS64PtrNative((long*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CalculateBinsU64PtrNative(ulong* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong*, int, ImPlotBin, ImPlotRange, int*, double*, void>)vt[685])(values, count, meth, range, binsOut, widthOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImPlotBin, ImPlotRange, nint, nint, void>)vt[685])((nint)values, count, meth, range, (nint)binsOut, (nint)widthOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU64Ptr(ulong* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			CalculateBinsU64PtrNative(values, count, meth, range, binsOut, widthOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU64Ptr(ref ulong values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, double* widthOut)
		{
			fixed (ulong* pvalues = &values)
			{
				CalculateBinsU64PtrNative((ulong*)pvalues, count, meth, range, binsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU64Ptr(ulong* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				CalculateBinsU64PtrNative(values, count, meth, range, (int*)pbinsOut, widthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU64Ptr(ref ulong values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, double* widthOut)
		{
			fixed (ulong* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					CalculateBinsU64PtrNative((ulong*)pvalues, count, meth, range, (int*)pbinsOut, widthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU64Ptr(ulong* values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (double* pwidthOut = &widthOut)
			{
				CalculateBinsU64PtrNative(values, count, meth, range, binsOut, (double*)pwidthOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU64Ptr(ref ulong values, int count, ImPlotBin meth, ImPlotRange range, int* binsOut, ref double widthOut)
		{
			fixed (ulong* pvalues = &values)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsU64PtrNative((ulong*)pvalues, count, meth, range, binsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU64Ptr(ulong* values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (int* pbinsOut = &binsOut)
			{
				fixed (double* pwidthOut = &widthOut)
				{
					CalculateBinsU64PtrNative(values, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CalculateBinsU64Ptr(ref ulong values, int count, ImPlotBin meth, ImPlotRange range, ref int binsOut, ref double widthOut)
		{
			fixed (ulong* pvalues = &values)
			{
				fixed (int* pbinsOut = &binsOut)
				{
					fixed (double* pwidthOut = &widthOut)
					{
						CalculateBinsU64PtrNative((ulong*)pvalues, count, meth, range, (int*)pbinsOut, (double*)pwidthOut);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte IsLeapYearNative(int year)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[686])(year);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[686])(year);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool IsLeapYear(int year)
		{
			byte ret = IsLeapYearNative(year);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int GetDaysInMonthNative(int year, int month)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int>)vt[687])(year, month);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int>)vt[687])(year, month);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetDaysInMonth(int year, int month)
		{
			int ret = GetDaysInMonthNative(year, month);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void MkGmtTimeNative(ImPlotTime* pOut, Tm* ptm)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTime*, Tm*, void>)vt[688])(pOut, ptm);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[688])((nint)pOut, (nint)ptm);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime MkGmtTime(Tm* ptm)
		{
			ImPlotTime ret;
			MkGmtTimeNative(&ret, ptm);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MkGmtTime(ImPlotTimePtr pOut, Tm* ptm)
		{
			MkGmtTimeNative(pOut, ptm);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MkGmtTime(ref ImPlotTime pOut, Tm* ptm)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				MkGmtTimeNative((ImPlotTime*)ppOut, ptm);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime MkGmtTime(ref Tm ptm)
		{
			fixed (Tm* pptm = &ptm)
			{
				ImPlotTime ret;
				MkGmtTimeNative(&ret, (Tm*)pptm);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MkGmtTime(ImPlotTimePtr pOut, ref Tm ptm)
		{
			fixed (Tm* pptm = &ptm)
			{
				MkGmtTimeNative(pOut, (Tm*)pptm);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MkGmtTime(ref ImPlotTime pOut, ref Tm ptm)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				fixed (Tm* pptm = &ptm)
				{
					MkGmtTimeNative((ImPlotTime*)ppOut, (Tm*)pptm);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static Tm* GetGmtTimeNative(ImPlotTime t, Tm* ptm)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotTime, Tm*, Tm*>)vt[689])(t, ptm);
			#else
			return (Tm*)((delegate* unmanaged[Cdecl]<ImPlotTime, nint, nint>)vt[689])(t, (nint)ptm);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Tm* GetGmtTime(ImPlotTime t, Tm* ptm)
		{
			Tm* ret = GetGmtTimeNative(t, ptm);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Tm* GetGmtTime(ImPlotTime t, ref Tm ptm)
		{
			fixed (Tm* pptm = &ptm)
			{
				Tm* ret = GetGmtTimeNative(t, (Tm*)pptm);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void MkLocTimeNative(ImPlotTime* pOut, Tm* ptm)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTime*, Tm*, void>)vt[690])(pOut, ptm);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[690])((nint)pOut, (nint)ptm);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime MkLocTime(Tm* ptm)
		{
			ImPlotTime ret;
			MkLocTimeNative(&ret, ptm);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MkLocTime(ImPlotTimePtr pOut, Tm* ptm)
		{
			MkLocTimeNative(pOut, ptm);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MkLocTime(ref ImPlotTime pOut, Tm* ptm)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				MkLocTimeNative((ImPlotTime*)ppOut, ptm);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime MkLocTime(ref Tm ptm)
		{
			fixed (Tm* pptm = &ptm)
			{
				ImPlotTime ret;
				MkLocTimeNative(&ret, (Tm*)pptm);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MkLocTime(ImPlotTimePtr pOut, ref Tm ptm)
		{
			fixed (Tm* pptm = &ptm)
			{
				MkLocTimeNative(pOut, (Tm*)pptm);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MkLocTime(ref ImPlotTime pOut, ref Tm ptm)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				fixed (Tm* pptm = &ptm)
				{
					MkLocTimeNative((ImPlotTime*)ppOut, (Tm*)pptm);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static Tm* GetLocTimeNative(ImPlotTime t, Tm* ptm)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotTime, Tm*, Tm*>)vt[691])(t, ptm);
			#else
			return (Tm*)((delegate* unmanaged[Cdecl]<ImPlotTime, nint, nint>)vt[691])(t, (nint)ptm);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Tm* GetLocTime(ImPlotTime t, Tm* ptm)
		{
			Tm* ret = GetLocTimeNative(t, ptm);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static Tm* GetLocTime(ImPlotTime t, ref Tm ptm)
		{
			fixed (Tm* pptm = &ptm)
			{
				Tm* ret = GetLocTimeNative(t, (Tm*)pptm);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void MakeTimeNative(ImPlotTime* pOut, int year, int month, int day, int hour, int min, int sec, int us)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTime*, int, int, int, int, int, int, int, void>)vt[692])(pOut, year, month, day, hour, min, sec, us);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, int, int, int, void>)vt[692])((nint)pOut, year, month, day, hour, min, sec, us);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime MakeTime(int year, int month, int day, int hour, int min, int sec, int us)
		{
			ImPlotTime ret;
			MakeTimeNative(&ret, year, month, day, hour, min, sec, us);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MakeTime(ImPlotTimePtr pOut, int year, int month, int day, int hour, int min, int sec, int us)
		{
			MakeTimeNative(pOut, year, month, day, hour, min, sec, us);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void MakeTime(ref ImPlotTime pOut, int year, int month, int day, int hour, int min, int sec, int us)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				MakeTimeNative((ImPlotTime*)ppOut, year, month, day, hour, min, sec, us);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int GetYearNative(ImPlotTime t)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotTime, int>)vt[693])(t);
			#else
			return (int)((delegate* unmanaged[Cdecl]<ImPlotTime, int>)vt[693])(t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int GetYear(ImPlotTime t)
		{
			int ret = GetYearNative(t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void AddTimeNative(ImPlotTime* pOut, ImPlotTime t, ImPlotTimeUnit unit, int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTime*, ImPlotTime, ImPlotTimeUnit, int, void>)vt[694])(pOut, t, unit, count);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotTime, ImPlotTimeUnit, int, void>)vt[694])((nint)pOut, t, unit, count);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime AddTime(ImPlotTime t, ImPlotTimeUnit unit, int count)
		{
			ImPlotTime ret;
			AddTimeNative(&ret, t, unit, count);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AddTime(ImPlotTimePtr pOut, ImPlotTime t, ImPlotTimeUnit unit, int count)
		{
			AddTimeNative(pOut, t, unit, count);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void AddTime(ref ImPlotTime pOut, ImPlotTime t, ImPlotTimeUnit unit, int count)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				AddTimeNative((ImPlotTime*)ppOut, t, unit, count);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void FloorTimeNative(ImPlotTime* pOut, ImPlotTime t, ImPlotTimeUnit unit)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTime*, ImPlotTime, ImPlotTimeUnit, void>)vt[695])(pOut, t, unit);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotTime, ImPlotTimeUnit, void>)vt[695])((nint)pOut, t, unit);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime FloorTime(ImPlotTime t, ImPlotTimeUnit unit)
		{
			ImPlotTime ret;
			FloorTimeNative(&ret, t, unit);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FloorTime(ImPlotTimePtr pOut, ImPlotTime t, ImPlotTimeUnit unit)
		{
			FloorTimeNative(pOut, t, unit);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void FloorTime(ref ImPlotTime pOut, ImPlotTime t, ImPlotTimeUnit unit)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				FloorTimeNative((ImPlotTime*)ppOut, t, unit);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CeilTimeNative(ImPlotTime* pOut, ImPlotTime t, ImPlotTimeUnit unit)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTime*, ImPlotTime, ImPlotTimeUnit, void>)vt[696])(pOut, t, unit);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotTime, ImPlotTimeUnit, void>)vt[696])((nint)pOut, t, unit);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime CeilTime(ImPlotTime t, ImPlotTimeUnit unit)
		{
			ImPlotTime ret;
			CeilTimeNative(&ret, t, unit);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CeilTime(ImPlotTimePtr pOut, ImPlotTime t, ImPlotTimeUnit unit)
		{
			CeilTimeNative(pOut, t, unit);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CeilTime(ref ImPlotTime pOut, ImPlotTime t, ImPlotTimeUnit unit)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				CeilTimeNative((ImPlotTime*)ppOut, t, unit);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void RoundTimeNative(ImPlotTime* pOut, ImPlotTime t, ImPlotTimeUnit unit)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTime*, ImPlotTime, ImPlotTimeUnit, void>)vt[697])(pOut, t, unit);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotTime, ImPlotTimeUnit, void>)vt[697])((nint)pOut, t, unit);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime RoundTime(ImPlotTime t, ImPlotTimeUnit unit)
		{
			ImPlotTime ret;
			RoundTimeNative(&ret, t, unit);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RoundTime(ImPlotTimePtr pOut, ImPlotTime t, ImPlotTimeUnit unit)
		{
			RoundTimeNative(pOut, t, unit);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RoundTime(ref ImPlotTime pOut, ImPlotTime t, ImPlotTimeUnit unit)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				RoundTimeNative((ImPlotTime*)ppOut, t, unit);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void CombineDateTimeNative(ImPlotTime* pOut, ImPlotTime datePart, ImPlotTime timePart)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTime*, ImPlotTime, ImPlotTime, void>)vt[698])(pOut, datePart, timePart);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotTime, ImPlotTime, void>)vt[698])((nint)pOut, datePart, timePart);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImPlotTime CombineDateTime(ImPlotTime datePart, ImPlotTime timePart)
		{
			ImPlotTime ret;
			CombineDateTimeNative(&ret, datePart, timePart);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CombineDateTime(ImPlotTimePtr pOut, ImPlotTime datePart, ImPlotTime timePart)
		{
			CombineDateTimeNative(pOut, datePart, timePart);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void CombineDateTime(ref ImPlotTime pOut, ImPlotTime datePart, ImPlotTime timePart)
		{
			fixed (ImPlotTime* ppOut = &pOut)
			{
				CombineDateTimeNative((ImPlotTime*)ppOut, datePart, timePart);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int FormatTimeNative(ImPlotTime t, byte* buffer, int size, ImPlotTimeFmt fmt, byte use24HrClk)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotTime, byte*, int, ImPlotTimeFmt, byte, int>)vt[699])(t, buffer, size, fmt, use24HrClk);
			#else
			return (int)((delegate* unmanaged[Cdecl]<ImPlotTime, nint, int, ImPlotTimeFmt, byte, int>)vt[699])(t, (nint)buffer, size, fmt, use24HrClk);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatTime(ImPlotTime t, byte* buffer, int size, ImPlotTimeFmt fmt, bool use24HrClk)
		{
			int ret = FormatTimeNative(t, buffer, size, fmt, use24HrClk ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatTime(ImPlotTime t, ref byte buffer, int size, ImPlotTimeFmt fmt, bool use24HrClk)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = FormatTimeNative(t, (byte*)pbuffer, size, fmt, use24HrClk ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatTime(ImPlotTime t, ref string buffer, int size, ImPlotTimeFmt fmt, bool use24HrClk)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = FormatTimeNative(t, pStr0, size, fmt, use24HrClk ? (byte)1 : (byte)0);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int FormatDateNative(ImPlotTime t, byte* buffer, int size, ImPlotDateFmt fmt, byte useIso8601)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotTime, byte*, int, ImPlotDateFmt, byte, int>)vt[700])(t, buffer, size, fmt, useIso8601);
			#else
			return (int)((delegate* unmanaged[Cdecl]<ImPlotTime, nint, int, ImPlotDateFmt, byte, int>)vt[700])(t, (nint)buffer, size, fmt, useIso8601);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatDate(ImPlotTime t, byte* buffer, int size, ImPlotDateFmt fmt, bool useIso8601)
		{
			int ret = FormatDateNative(t, buffer, size, fmt, useIso8601 ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatDate(ImPlotTime t, ref byte buffer, int size, ImPlotDateFmt fmt, bool useIso8601)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = FormatDateNative(t, (byte*)pbuffer, size, fmt, useIso8601 ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatDate(ImPlotTime t, ref string buffer, int size, ImPlotDateFmt fmt, bool useIso8601)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = FormatDateNative(t, pStr0, size, fmt, useIso8601 ? (byte)1 : (byte)0);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int FormatDateTimeNative(ImPlotTime t, byte* buffer, int size, ImPlotDateTimeSpec fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlotTime, byte*, int, ImPlotDateTimeSpec, int>)vt[701])(t, buffer, size, fmt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<ImPlotTime, nint, int, ImPlotDateTimeSpec, int>)vt[701])(t, (nint)buffer, size, fmt);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatDateTime(ImPlotTime t, byte* buffer, int size, ImPlotDateTimeSpec fmt)
		{
			int ret = FormatDateTimeNative(t, buffer, size, fmt);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatDateTime(ImPlotTime t, ref byte buffer, int size, ImPlotDateTimeSpec fmt)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = FormatDateTimeNative(t, (byte*)pbuffer, size, fmt);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatDateTime(ImPlotTime t, ref string buffer, int size, ImPlotDateTimeSpec fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = FormatDateTimeNative(t, pStr0, size, fmt);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ShowDatePickerNative(byte* id, int* level, ImPlotTime* t, ImPlotTime* t1, ImPlotTime* t2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, ImPlotTime*, ImPlotTime*, ImPlotTime*, byte>)vt[702])(id, level, t, t1, t2);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, byte>)vt[702])((nint)id, (nint)level, (nint)t, (nint)t1, (nint)t2);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, int* level, ImPlotTimePtr t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			byte ret = ShowDatePickerNative(id, level, t, t1, t2);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, int* level, ImPlotTimePtr t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = &id)
			{
				byte ret = ShowDatePickerNative((byte*)pid, level, t, t1, t2);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, int* level, ImPlotTimePtr t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = id)
			{
				byte ret = ShowDatePickerNative((byte*)pid, level, t, t1, t2);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, int* level, ImPlotTimePtr t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ShowDatePickerNative(pStr0, level, t, t1, t2);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, ref int level, ImPlotTimePtr t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (int* plevel = &level)
			{
				byte ret = ShowDatePickerNative(id, (int*)plevel, t, t1, t2);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, ref int level, ImPlotTimePtr t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (int* plevel = &level)
				{
					byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, t, t1, t2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, ref int level, ImPlotTimePtr t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = id)
			{
				fixed (int* plevel = &level)
				{
					byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, t, t1, t2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, ref int level, ImPlotTimePtr t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* plevel = &level)
			{
				byte ret = ShowDatePickerNative(pStr0, (int*)plevel, t, t1, t2);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, int* level, ref ImPlotTime t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (ImPlotTime* pt = &t)
			{
				byte ret = ShowDatePickerNative(id, level, (ImPlotTime*)pt, t1, t2);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, int* level, ref ImPlotTime t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					byte ret = ShowDatePickerNative((byte*)pid, level, (ImPlotTime*)pt, t1, t2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, int* level, ref ImPlotTime t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					byte ret = ShowDatePickerNative((byte*)pid, level, (ImPlotTime*)pt, t1, t2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, int* level, ref ImPlotTime t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImPlotTime* pt = &t)
			{
				byte ret = ShowDatePickerNative(pStr0, level, (ImPlotTime*)pt, t1, t2);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, ref int level, ref ImPlotTime t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt = &t)
				{
					byte ret = ShowDatePickerNative(id, (int*)plevel, (ImPlotTime*)pt, t1, t2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, ref int level, ref ImPlotTime t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt = &t)
					{
						byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, (ImPlotTime*)pt, t1, t2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, ref int level, ref ImPlotTime t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt = &t)
					{
						byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, (ImPlotTime*)pt, t1, t2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, ref int level, ref ImPlotTime t, ImPlotTimePtr t1, ImPlotTimePtr t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt = &t)
				{
					byte ret = ShowDatePickerNative(pStr0, (int*)plevel, (ImPlotTime*)pt, t1, t2);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, int* level, ImPlotTimePtr t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (ImPlotTime* pt1 = &t1)
			{
				byte ret = ShowDatePickerNative(id, level, t, (ImPlotTime*)pt1, t2);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, int* level, ImPlotTimePtr t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					byte ret = ShowDatePickerNative((byte*)pid, level, t, (ImPlotTime*)pt1, t2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, int* level, ImPlotTimePtr t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = id)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					byte ret = ShowDatePickerNative((byte*)pid, level, t, (ImPlotTime*)pt1, t2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, int* level, ImPlotTimePtr t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImPlotTime* pt1 = &t1)
			{
				byte ret = ShowDatePickerNative(pStr0, level, t, (ImPlotTime*)pt1, t2);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, ref int level, ImPlotTimePtr t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					byte ret = ShowDatePickerNative(id, (int*)plevel, t, (ImPlotTime*)pt1, t2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, ref int level, ImPlotTimePtr t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, t, (ImPlotTime*)pt1, t2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, ref int level, ImPlotTimePtr t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, t, (ImPlotTime*)pt1, t2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, ref int level, ImPlotTimePtr t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					byte ret = ShowDatePickerNative(pStr0, (int*)plevel, t, (ImPlotTime*)pt1, t2);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, int* level, ref ImPlotTime t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (ImPlotTime* pt = &t)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					byte ret = ShowDatePickerNative(id, level, (ImPlotTime*)pt, (ImPlotTime*)pt1, t2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, int* level, ref ImPlotTime t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						byte ret = ShowDatePickerNative((byte*)pid, level, (ImPlotTime*)pt, (ImPlotTime*)pt1, t2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, int* level, ref ImPlotTime t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						byte ret = ShowDatePickerNative((byte*)pid, level, (ImPlotTime*)pt, (ImPlotTime*)pt1, t2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, int* level, ref ImPlotTime t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImPlotTime* pt = &t)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					byte ret = ShowDatePickerNative(pStr0, level, (ImPlotTime*)pt, (ImPlotTime*)pt1, t2);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, ref int level, ref ImPlotTime t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						byte ret = ShowDatePickerNative(id, (int*)plevel, (ImPlotTime*)pt, (ImPlotTime*)pt1, t2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, ref int level, ref ImPlotTime t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt = &t)
					{
						fixed (ImPlotTime* pt1 = &t1)
						{
							byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, (ImPlotTime*)pt, (ImPlotTime*)pt1, t2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, ref int level, ref ImPlotTime t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			fixed (byte* pid = id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt = &t)
					{
						fixed (ImPlotTime* pt1 = &t1)
						{
							byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, (ImPlotTime*)pt, (ImPlotTime*)pt1, t2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, ref int level, ref ImPlotTime t, ref ImPlotTime t1, ImPlotTimePtr t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						byte ret = ShowDatePickerNative(pStr0, (int*)plevel, (ImPlotTime*)pt, (ImPlotTime*)pt1, t2);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, int* level, ImPlotTimePtr t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (ImPlotTime* pt2 = &t2)
			{
				byte ret = ShowDatePickerNative(id, level, t, t1, (ImPlotTime*)pt2);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, int* level, ImPlotTimePtr t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (ImPlotTime* pt2 = &t2)
				{
					byte ret = ShowDatePickerNative((byte*)pid, level, t, t1, (ImPlotTime*)pt2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, int* level, ImPlotTimePtr t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = id)
			{
				fixed (ImPlotTime* pt2 = &t2)
				{
					byte ret = ShowDatePickerNative((byte*)pid, level, t, t1, (ImPlotTime*)pt2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, int* level, ImPlotTimePtr t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImPlotTime* pt2 = &t2)
			{
				byte ret = ShowDatePickerNative(pStr0, level, t, t1, (ImPlotTime*)pt2);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, ref int level, ImPlotTimePtr t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt2 = &t2)
				{
					byte ret = ShowDatePickerNative(id, (int*)plevel, t, t1, (ImPlotTime*)pt2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, ref int level, ImPlotTimePtr t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, t, t1, (ImPlotTime*)pt2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, ref int level, ImPlotTimePtr t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, t, t1, (ImPlotTime*)pt2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, ref int level, ImPlotTimePtr t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt2 = &t2)
				{
					byte ret = ShowDatePickerNative(pStr0, (int*)plevel, t, t1, (ImPlotTime*)pt2);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, int* level, ref ImPlotTime t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (ImPlotTime* pt = &t)
			{
				fixed (ImPlotTime* pt2 = &t2)
				{
					byte ret = ShowDatePickerNative(id, level, (ImPlotTime*)pt, t1, (ImPlotTime*)pt2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, int* level, ref ImPlotTime t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative((byte*)pid, level, (ImPlotTime*)pt, t1, (ImPlotTime*)pt2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, int* level, ref ImPlotTime t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative((byte*)pid, level, (ImPlotTime*)pt, t1, (ImPlotTime*)pt2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, int* level, ref ImPlotTime t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImPlotTime* pt = &t)
			{
				fixed (ImPlotTime* pt2 = &t2)
				{
					byte ret = ShowDatePickerNative(pStr0, level, (ImPlotTime*)pt, t1, (ImPlotTime*)pt2);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, ref int level, ref ImPlotTime t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative(id, (int*)plevel, (ImPlotTime*)pt, t1, (ImPlotTime*)pt2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, ref int level, ref ImPlotTime t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt = &t)
					{
						fixed (ImPlotTime* pt2 = &t2)
						{
							byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, (ImPlotTime*)pt, t1, (ImPlotTime*)pt2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, ref int level, ref ImPlotTime t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt = &t)
					{
						fixed (ImPlotTime* pt2 = &t2)
						{
							byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, (ImPlotTime*)pt, t1, (ImPlotTime*)pt2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, ref int level, ref ImPlotTime t, ImPlotTimePtr t1, ref ImPlotTime t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative(pStr0, (int*)plevel, (ImPlotTime*)pt, t1, (ImPlotTime*)pt2);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, int* level, ImPlotTimePtr t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (ImPlotTime* pt1 = &t1)
			{
				fixed (ImPlotTime* pt2 = &t2)
				{
					byte ret = ShowDatePickerNative(id, level, t, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, int* level, ImPlotTimePtr t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative((byte*)pid, level, t, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, int* level, ImPlotTimePtr t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = id)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative((byte*)pid, level, t, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, int* level, ImPlotTimePtr t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImPlotTime* pt1 = &t1)
			{
				fixed (ImPlotTime* pt2 = &t2)
				{
					byte ret = ShowDatePickerNative(pStr0, level, t, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, ref int level, ImPlotTimePtr t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative(id, (int*)plevel, t, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, ref int level, ImPlotTimePtr t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						fixed (ImPlotTime* pt2 = &t2)
						{
							byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, t, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, ref int level, ImPlotTimePtr t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						fixed (ImPlotTime* pt2 = &t2)
						{
							byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, t, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, ref int level, ImPlotTimePtr t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative(pStr0, (int*)plevel, t, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, int* level, ref ImPlotTime t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (ImPlotTime* pt = &t)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative(id, level, (ImPlotTime*)pt, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, int* level, ref ImPlotTime t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						fixed (ImPlotTime* pt2 = &t2)
						{
							byte ret = ShowDatePickerNative((byte*)pid, level, (ImPlotTime*)pt, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, int* level, ref ImPlotTime t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						fixed (ImPlotTime* pt2 = &t2)
						{
							byte ret = ShowDatePickerNative((byte*)pid, level, (ImPlotTime*)pt, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, int* level, ref ImPlotTime t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImPlotTime* pt = &t)
			{
				fixed (ImPlotTime* pt1 = &t1)
				{
					fixed (ImPlotTime* pt2 = &t2)
					{
						byte ret = ShowDatePickerNative(pStr0, level, (ImPlotTime*)pt, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(byte* id, ref int level, ref ImPlotTime t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						fixed (ImPlotTime* pt2 = &t2)
						{
							byte ret = ShowDatePickerNative(id, (int*)plevel, (ImPlotTime*)pt, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ref byte id, ref int level, ref ImPlotTime t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = &id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt = &t)
					{
						fixed (ImPlotTime* pt1 = &t1)
						{
							fixed (ImPlotTime* pt2 = &t2)
							{
								byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, (ImPlotTime*)pt, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(ReadOnlySpan<byte> id, ref int level, ref ImPlotTime t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			fixed (byte* pid = id)
			{
				fixed (int* plevel = &level)
				{
					fixed (ImPlotTime* pt = &t)
					{
						fixed (ImPlotTime* pt1 = &t1)
						{
							fixed (ImPlotTime* pt2 = &t2)
							{
								byte ret = ShowDatePickerNative((byte*)pid, (int*)plevel, (ImPlotTime*)pt, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowDatePicker(string id, ref int level, ref ImPlotTime t, ref ImPlotTime t1, ref ImPlotTime t2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* plevel = &level)
			{
				fixed (ImPlotTime* pt = &t)
				{
					fixed (ImPlotTime* pt1 = &t1)
					{
						fixed (ImPlotTime* pt2 = &t2)
						{
							byte ret = ShowDatePickerNative(pStr0, (int*)plevel, (ImPlotTime*)pt, (ImPlotTime*)pt1, (ImPlotTime*)pt2);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static byte ShowTimePickerNative(byte* id, ImPlotTime* t)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImPlotTime*, byte>)vt[703])(id, t);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[703])((nint)id, (nint)t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowTimePicker(byte* id, ImPlotTimePtr t)
		{
			byte ret = ShowTimePickerNative(id, t);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowTimePicker(ref byte id, ImPlotTimePtr t)
		{
			fixed (byte* pid = &id)
			{
				byte ret = ShowTimePickerNative((byte*)pid, t);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowTimePicker(ReadOnlySpan<byte> id, ImPlotTimePtr t)
		{
			fixed (byte* pid = id)
			{
				byte ret = ShowTimePickerNative((byte*)pid, t);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowTimePicker(string id, ImPlotTimePtr t)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ShowTimePickerNative(pStr0, t);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowTimePicker(byte* id, ref ImPlotTime t)
		{
			fixed (ImPlotTime* pt = &t)
			{
				byte ret = ShowTimePickerNative(id, (ImPlotTime*)pt);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowTimePicker(ref byte id, ref ImPlotTime t)
		{
			fixed (byte* pid = &id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					byte ret = ShowTimePickerNative((byte*)pid, (ImPlotTime*)pt);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowTimePicker(ReadOnlySpan<byte> id, ref ImPlotTime t)
		{
			fixed (byte* pid = id)
			{
				fixed (ImPlotTime* pt = &t)
				{
					byte ret = ShowTimePickerNative((byte*)pid, (ImPlotTime*)pt);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ShowTimePicker(string id, ref ImPlotTime t)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImPlotTime* pt = &t)
			{
				byte ret = ShowTimePickerNative(pStr0, (ImPlotTime*)pt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double TransformForwardLog10Native(double v, void* noname1)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, void*, double>)vt[704])(v, noname1);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, nint, double>)vt[704])(v, (nint)noname1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double TransformForwardLog10(double v, void* noname1)
		{
			double ret = TransformForwardLog10Native(v, noname1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double TransformInverseLog10Native(double v, void* noname1)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, void*, double>)vt[705])(v, noname1);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, nint, double>)vt[705])(v, (nint)noname1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double TransformInverseLog10(double v, void* noname1)
		{
			double ret = TransformInverseLog10Native(v, noname1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double TransformForwardSymLogNative(double v, void* noname1)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, void*, double>)vt[706])(v, noname1);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, nint, double>)vt[706])(v, (nint)noname1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double TransformForwardSymLog(double v, void* noname1)
		{
			double ret = TransformForwardSymLogNative(v, noname1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double TransformInverseSymLogNative(double v, void* noname1)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, void*, double>)vt[707])(v, noname1);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, nint, double>)vt[707])(v, (nint)noname1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double TransformInverseSymLog(double v, void* noname1)
		{
			double ret = TransformInverseSymLogNative(v, noname1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double TransformForwardLogitNative(double v, void* noname1)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, void*, double>)vt[708])(v, noname1);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, nint, double>)vt[708])(v, (nint)noname1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double TransformForwardLogit(double v, void* noname1)
		{
			double ret = TransformForwardLogitNative(v, noname1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static double TransformInverseLogitNative(double v, void* noname1)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, void*, double>)vt[709])(v, noname1);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, nint, double>)vt[709])(v, (nint)noname1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static double TransformInverseLogit(double v, void* noname1)
		{
			double ret = TransformInverseLogitNative(v, noname1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int FormatterDefaultNative(double value, byte* buff, int size, void* data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, byte*, int, void*, int>)vt[710])(value, buff, size, data);
			#else
			return (int)((delegate* unmanaged[Cdecl]<double, nint, int, nint, int>)vt[710])(value, (nint)buff, size, (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatterDefault(double value, byte* buff, int size, void* data)
		{
			int ret = FormatterDefaultNative(value, buff, size, data);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatterDefault(double value, ref byte buff, int size, void* data)
		{
			fixed (byte* pbuff = &buff)
			{
				int ret = FormatterDefaultNative(value, (byte*)pbuff, size, data);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatterDefault(double value, ref string buff, int size, void* data)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buff != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buff);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buff, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = FormatterDefaultNative(value, pStr0, size, data);
			buff = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int FormatterLogitNative(double value, byte* buff, int size, void* noname1)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, byte*, int, void*, int>)vt[711])(value, buff, size, noname1);
			#else
			return (int)((delegate* unmanaged[Cdecl]<double, nint, int, nint, int>)vt[711])(value, (nint)buff, size, (nint)noname1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatterLogit(double value, byte* buff, int size, void* noname1)
		{
			int ret = FormatterLogitNative(value, buff, size, noname1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatterLogit(double value, ref byte buff, int size, void* noname1)
		{
			fixed (byte* pbuff = &buff)
			{
				int ret = FormatterLogitNative(value, (byte*)pbuff, size, noname1);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatterLogit(double value, ref string buff, int size, void* noname1)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buff != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buff);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buff, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = FormatterLogitNative(value, pStr0, size, noname1);
			buff = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static int FormatterTimeNative(double noname1, byte* buff, int size, void* data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, byte*, int, void*, int>)vt[712])(noname1, buff, size, data);
			#else
			return (int)((delegate* unmanaged[Cdecl]<double, nint, int, nint, int>)vt[712])(noname1, (nint)buff, size, (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatterTime(double noname1, byte* buff, int size, void* data)
		{
			int ret = FormatterTimeNative(noname1, buff, size, data);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatterTime(double noname1, ref byte buff, int size, void* data)
		{
			fixed (byte* pbuff = &buff)
			{
				int ret = FormatterTimeNative(noname1, (byte*)pbuff, size, data);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int FormatterTime(double noname1, ref string buff, int size, void* data)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buff != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buff);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buff, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = FormatterTimeNative(noname1, pStr0, size, data);
			buff = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void LocatorDefaultNative(ImPlotTicker* ticker, ImPlotRange range, float pixels, byte vertical, ImPlotFormatter formatter, void* formatterData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTicker*, ImPlotRange, float, byte, delegate*<double, byte*, int, void*, int>, void*, void>)vt[713])(ticker, range, pixels, vertical, (delegate*<double, byte*, int, void*, int>)Utils.GetFunctionPointerForDelegate(formatter), formatterData);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotRange, float, byte, nint, nint, void>)vt[713])((nint)ticker, range, pixels, vertical, (nint)Utils.GetFunctionPointerForDelegate(formatter), (nint)formatterData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void LocatorDefault(ImPlotTickerPtr ticker, ImPlotRange range, float pixels, bool vertical, ImPlotFormatter formatter, void* formatterData)
		{
			LocatorDefaultNative(ticker, range, pixels, vertical ? (byte)1 : (byte)0, formatter, formatterData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void LocatorDefault(ref ImPlotTicker ticker, ImPlotRange range, float pixels, bool vertical, ImPlotFormatter formatter, void* formatterData)
		{
			fixed (ImPlotTicker* pticker = &ticker)
			{
				LocatorDefaultNative((ImPlotTicker*)pticker, range, pixels, vertical ? (byte)1 : (byte)0, formatter, formatterData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void LocatorTimeNative(ImPlotTicker* ticker, ImPlotRange range, float pixels, byte vertical, ImPlotFormatter formatter, void* formatterData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTicker*, ImPlotRange, float, byte, delegate*<double, byte*, int, void*, int>, void*, void>)vt[714])(ticker, range, pixels, vertical, (delegate*<double, byte*, int, void*, int>)Utils.GetFunctionPointerForDelegate(formatter), formatterData);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotRange, float, byte, nint, nint, void>)vt[714])((nint)ticker, range, pixels, vertical, (nint)Utils.GetFunctionPointerForDelegate(formatter), (nint)formatterData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void LocatorTime(ImPlotTickerPtr ticker, ImPlotRange range, float pixels, bool vertical, ImPlotFormatter formatter, void* formatterData)
		{
			LocatorTimeNative(ticker, range, pixels, vertical ? (byte)1 : (byte)0, formatter, formatterData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void LocatorTime(ref ImPlotTicker ticker, ImPlotRange range, float pixels, bool vertical, ImPlotFormatter formatter, void* formatterData)
		{
			fixed (ImPlotTicker* pticker = &ticker)
			{
				LocatorTimeNative((ImPlotTicker*)pticker, range, pixels, vertical ? (byte)1 : (byte)0, formatter, formatterData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void LocatorLog10Native(ImPlotTicker* ticker, ImPlotRange range, float pixels, byte vertical, ImPlotFormatter formatter, void* formatterData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTicker*, ImPlotRange, float, byte, delegate*<double, byte*, int, void*, int>, void*, void>)vt[715])(ticker, range, pixels, vertical, (delegate*<double, byte*, int, void*, int>)Utils.GetFunctionPointerForDelegate(formatter), formatterData);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotRange, float, byte, nint, nint, void>)vt[715])((nint)ticker, range, pixels, vertical, (nint)Utils.GetFunctionPointerForDelegate(formatter), (nint)formatterData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void LocatorLog10(ImPlotTickerPtr ticker, ImPlotRange range, float pixels, bool vertical, ImPlotFormatter formatter, void* formatterData)
		{
			LocatorLog10Native(ticker, range, pixels, vertical ? (byte)1 : (byte)0, formatter, formatterData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void LocatorLog10(ref ImPlotTicker ticker, ImPlotRange range, float pixels, bool vertical, ImPlotFormatter formatter, void* formatterData)
		{
			fixed (ImPlotTicker* pticker = &ticker)
			{
				LocatorLog10Native((ImPlotTicker*)pticker, range, pixels, vertical ? (byte)1 : (byte)0, formatter, formatterData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		internal static void LocatorSymLogNative(ImPlotTicker* ticker, ImPlotRange range, float pixels, byte vertical, ImPlotFormatter formatter, void* formatterData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlotTicker*, ImPlotRange, float, byte, delegate*<double, byte*, int, void*, int>, void*, void>)vt[716])(ticker, range, pixels, vertical, (delegate*<double, byte*, int, void*, int>)Utils.GetFunctionPointerForDelegate(formatter), formatterData);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotRange, float, byte, nint, nint, void>)vt[716])((nint)ticker, range, pixels, vertical, (nint)Utils.GetFunctionPointerForDelegate(formatter), (nint)formatterData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void LocatorSymLog(ImPlotTickerPtr ticker, ImPlotRange range, float pixels, bool vertical, ImPlotFormatter formatter, void* formatterData)
		{
			LocatorSymLogNative(ticker, range, pixels, vertical ? (byte)1 : (byte)0, formatter, formatterData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void LocatorSymLog(ref ImPlotTicker ticker, ImPlotRange range, float pixels, bool vertical, ImPlotFormatter formatter, void* formatterData)
		{
			fixed (ImPlotTicker* pticker = &ticker)
			{
				LocatorSymLogNative((ImPlotTicker*)pticker, range, pixels, vertical ? (byte)1 : (byte)0, formatter, formatterData);
			}
		}

	}
}
