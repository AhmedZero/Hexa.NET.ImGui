// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot
{
	public unsafe partial class ImPlot
	{

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ulong* ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotDigitalNative((byte*)plabelId, xs, ys, count, flags, offset, (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ulong* ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotDigitalNative((byte*)plabelId, xs, ys, count, flags, (int)(0), (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ulong* ys, int count)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotDigitalNative((byte*)plabelId, xs, ys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ulong* ys, int count, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotDigitalNative((byte*)plabelId, xs, ys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ulong* ys, int count, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotDigitalNative((byte*)plabelId, xs, ys, count, (ImPlotDigitalFlags)(0), offset, stride);
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(labelId, (ulong*)pxs, ys, count, flags, offset, stride);
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(labelId, (ulong*)pxs, ys, count, flags, offset, (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(labelId, (ulong*)pxs, ys, count, flags, (int)(0), (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ulong* ys, int count)
		{
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(labelId, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ulong* ys, int count, int offset)
		{
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(labelId, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ulong* ys, int count, int offset, int stride)
		{
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(labelId, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), offset, stride);
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, flags, offset, stride);
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, flags, offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, flags, (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ulong* ys, int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ulong* ys, int count, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ulong* ys, int count, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), offset, stride);
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(pStr0, (ulong*)pxs, ys, count, flags, offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(pStr0, (ulong*)pxs, ys, count, flags, offset, (int)(sizeof(ulong)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(pStr0, (ulong*)pxs, ys, count, flags, (int)(0), (int)(sizeof(ulong)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ulong* ys, int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(pStr0, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ulong* ys, int count, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(pStr0, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ulong* ys, int count, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				PlotDigitalNative(pStr0, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, flags, offset, stride);
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, flags, offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ulong* ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, flags, (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ulong* ys, int count)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ulong* ys, int count, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ulong* ys, int count, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					PlotDigitalNative((byte*)plabelId, (ulong*)pxs, ys, count, (ImPlotDigitalFlags)(0), offset, stride);
				}
			}
		}

		public static void PlotDigital(byte* labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(labelId, xs, (ulong*)pys, count, flags, offset, stride);
			}
		}

		public static void PlotDigital(byte* labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(labelId, xs, (ulong*)pys, count, flags, offset, (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(byte* labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(labelId, xs, (ulong*)pys, count, flags, (int)(0), (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(byte* labelId, ulong* xs, ref ulong ys, int count)
		{
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(labelId, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(byte* labelId, ulong* xs, ref ulong ys, int count, int offset)
		{
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(labelId, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
			}
		}

		public static void PlotDigital(byte* labelId, ulong* xs, ref ulong ys, int count, int offset, int stride)
		{
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(labelId, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, stride);
			}
		}

		public static void PlotDigital(ref byte labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, flags, offset, stride);
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, flags, offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, flags, (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ulong* xs, ref ulong ys, int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ulong* xs, ref ulong ys, int count, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ulong* xs, ref ulong ys, int count, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, stride);
				}
			}
		}

		public static void PlotDigital(string labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(pStr0, xs, (ulong*)pys, count, flags, offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(pStr0, xs, (ulong*)pys, count, flags, offset, (int)(sizeof(ulong)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(pStr0, xs, (ulong*)pys, count, flags, (int)(0), (int)(sizeof(ulong)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ulong* xs, ref ulong ys, int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(pStr0, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ulong* xs, ref ulong ys, int count, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(pStr0, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(string labelId, ulong* xs, ref ulong ys, int count, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pys = &ys)
			{
				PlotDigitalNative(pStr0, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, flags, offset, stride);
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, flags, offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ref ulong ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, flags, (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ref ulong ys, int count)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ref ulong ys, int count, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ulong* xs, ref ulong ys, int count, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative((byte*)plabelId, xs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, stride);
				}
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(labelId, (ulong*)pxs, (ulong*)pys, count, flags, offset, stride);
				}
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(labelId, (ulong*)pxs, (ulong*)pys, count, flags, offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(labelId, (ulong*)pxs, (ulong*)pys, count, flags, (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ref ulong ys, int count)
		{
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(labelId, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ref ulong ys, int count, int offset)
		{
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(labelId, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
				}
			}
		}

		public static void PlotDigital(byte* labelId, ref ulong xs, ref ulong ys, int count, int offset, int stride)
		{
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(labelId, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, stride);
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, flags, offset, stride);
					}
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, flags, offset, (int)(sizeof(ulong)));
					}
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, flags, (int)(0), (int)(sizeof(ulong)));
					}
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ref ulong ys, int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
					}
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ref ulong ys, int count, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
					}
				}
			}
		}

		public static void PlotDigital(ref byte labelId, ref ulong xs, ref ulong ys, int count, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, stride);
					}
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(pStr0, (ulong*)pxs, (ulong*)pys, count, flags, offset, stride);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(pStr0, (ulong*)pxs, (ulong*)pys, count, flags, offset, (int)(sizeof(ulong)));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(pStr0, (ulong*)pxs, (ulong*)pys, count, flags, (int)(0), (int)(sizeof(ulong)));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ref ulong ys, int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(pStr0, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ref ulong ys, int count, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(pStr0, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void PlotDigital(string labelId, ref ulong xs, ref ulong ys, int count, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pxs = &xs)
			{
				fixed (ulong* pys = &ys)
				{
					PlotDigitalNative(pStr0, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, stride);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, flags, offset, stride);
					}
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, flags, offset, (int)(sizeof(ulong)));
					}
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ref ulong ys, int count, ImPlotDigitalFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, flags, (int)(0), (int)(sizeof(ulong)));
					}
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ref ulong ys, int count)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), (int)(0), (int)(sizeof(ulong)));
					}
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ref ulong ys, int count, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, (int)(sizeof(ulong)));
					}
				}
			}
		}

		public static void PlotDigital(ReadOnlySpan<byte> labelId, ref ulong xs, ref ulong ys, int count, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (ulong* pxs = &xs)
				{
					fixed (ulong* pys = &ys)
					{
						PlotDigitalNative((byte*)plabelId, (ulong*)pxs, (ulong*)pys, count, (ImPlotDigitalFlags)(0), offset, stride);
					}
				}
			}
		}

		internal static void PlotDigitalGNative(byte* labelId, ImPlotPointGetter getter, void* data, int count, ImPlotDigitalFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, delegate*<void*, int, ImPlotPoint*, void*>, void*, int, ImPlotDigitalFlags, void>)vt[289])(labelId, (delegate*<void*, int, ImPlotPoint*, void*>)Utils.GetFunctionPointerForDelegate(getter), data, count, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, int, ImPlotDigitalFlags, void>)vt[289])((nint)labelId, (nint)Utils.GetFunctionPointerForDelegate(getter), (nint)data, count, flags);
			#endif
		}

		public static void PlotDigitalG(byte* labelId, ImPlotPointGetter getter, void* data, int count, ImPlotDigitalFlags flags)
		{
			PlotDigitalGNative(labelId, getter, data, count, flags);
		}

		public static void PlotDigitalG(byte* labelId, ImPlotPointGetter getter, void* data, int count)
		{
			PlotDigitalGNative(labelId, getter, data, count, (ImPlotDigitalFlags)(0));
		}

		public static void PlotDigitalG(ref byte labelId, ImPlotPointGetter getter, void* data, int count, ImPlotDigitalFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotDigitalGNative((byte*)plabelId, getter, data, count, flags);
			}
		}

		public static void PlotDigitalG(ref byte labelId, ImPlotPointGetter getter, void* data, int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotDigitalGNative((byte*)plabelId, getter, data, count, (ImPlotDigitalFlags)(0));
			}
		}

		public static void PlotDigitalG(string labelId, ImPlotPointGetter getter, void* data, int count, ImPlotDigitalFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotDigitalGNative(pStr0, getter, data, count, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotDigitalG(string labelId, ImPlotPointGetter getter, void* data, int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotDigitalGNative(pStr0, getter, data, count, (ImPlotDigitalFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotDigitalG(ReadOnlySpan<byte> labelId, ImPlotPointGetter getter, void* data, int count, ImPlotDigitalFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotDigitalGNative((byte*)plabelId, getter, data, count, flags);
			}
		}

		public static void PlotDigitalG(ReadOnlySpan<byte> labelId, ImPlotPointGetter getter, void* data, int count)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotDigitalGNative((byte*)plabelId, getter, data, count, (ImPlotDigitalFlags)(0));
			}
		}

		internal static void PlotImageNative(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, Vector4 tintCol, ImPlotImageFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, ImTextureID, ImPlotPoint, ImPlotPoint, Vector2, Vector2, Vector4, ImPlotImageFlags, void>)vt[290])(labelId, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImTextureID, ImPlotPoint, ImPlotPoint, Vector2, Vector2, Vector4, ImPlotImageFlags, void>)vt[290])((nint)labelId, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, flags);
			#endif
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, Vector4 tintCol, ImPlotImageFlags flags)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, flags);
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, Vector4 tintCol)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, (ImPlotImageFlags)(0));
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector4 tintCol)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), tintCol, (ImPlotImageFlags)(0));
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector4 tintCol)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, (ImPlotImageFlags)(0));
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, ImPlotImageFlags flags)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), flags);
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, ImPlotImageFlags flags)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), flags);
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, ImPlotImageFlags flags)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), flags);
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector4 tintCol, ImPlotImageFlags flags)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), tintCol, flags);
		}

		public static void PlotImage(byte* labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector4 tintCol, ImPlotImageFlags flags)
		{
			PlotImageNative(labelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, flags);
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, Vector4 tintCol, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, flags);
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, Vector4 tintCol)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector4 tintCol)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), tintCol, (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector4 tintCol)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), flags);
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), flags);
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), flags);
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector4 tintCol, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), tintCol, flags);
			}
		}

		public static void PlotImage(ref byte labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector4 tintCol, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, flags);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, Vector4 tintCol, ImPlotImageFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, Vector4 tintCol)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, (ImPlotImageFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector4 tintCol)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), tintCol, (ImPlotImageFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector4 tintCol)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, (ImPlotImageFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, ImPlotImageFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, ImPlotImageFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, ImPlotImageFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector4 tintCol, ImPlotImageFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), tintCol, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(string labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector4 tintCol, ImPlotImageFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotImageNative(pStr0, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, Vector4 tintCol, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, flags);
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, Vector4 tintCol)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, uv1, tintCol, (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector4 tintCol)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), tintCol, (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector4 tintCol)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, (ImPlotImageFlags)(0));
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector2 uv1, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), flags);
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), flags);
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), flags);
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector2 uv0, Vector4 tintCol, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, uv0, (Vector2)(new Vector2(1,1)), tintCol, flags);
			}
		}

		public static void PlotImage(ReadOnlySpan<byte> labelId, ImTextureID userTextureId, ImPlotPoint boundsMin, ImPlotPoint boundsMax, Vector4 tintCol, ImPlotImageFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotImageNative((byte*)plabelId, userTextureId, boundsMin, boundsMax, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, flags);
			}
		}

		internal static void PlotTextNative(byte* text, double x, double y, Vector2 pixOffset, ImPlotTextFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, double, double, Vector2, ImPlotTextFlags, void>)vt[291])(text, x, y, pixOffset, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, double, double, Vector2, ImPlotTextFlags, void>)vt[291])((nint)text, x, y, pixOffset, flags);
			#endif
		}

		public static void PlotText(byte* text, double x, double y, Vector2 pixOffset, ImPlotTextFlags flags)
		{
			PlotTextNative(text, x, y, pixOffset, flags);
		}

		public static void PlotText(byte* text, double x, double y, Vector2 pixOffset)
		{
			PlotTextNative(text, x, y, pixOffset, (ImPlotTextFlags)(0));
		}

		public static void PlotText(byte* text, double x, double y)
		{
			PlotTextNative(text, x, y, (Vector2)(new Vector2(0,0)), (ImPlotTextFlags)(0));
		}

		public static void PlotText(byte* text, double x, double y, ImPlotTextFlags flags)
		{
			PlotTextNative(text, x, y, (Vector2)(new Vector2(0,0)), flags);
		}

		public static void PlotText(ref byte text, double x, double y, Vector2 pixOffset, ImPlotTextFlags flags)
		{
			fixed (byte* ptext = &text)
			{
				PlotTextNative((byte*)ptext, x, y, pixOffset, flags);
			}
		}

		public static void PlotText(ref byte text, double x, double y, Vector2 pixOffset)
		{
			fixed (byte* ptext = &text)
			{
				PlotTextNative((byte*)ptext, x, y, pixOffset, (ImPlotTextFlags)(0));
			}
		}

		public static void PlotText(ref byte text, double x, double y)
		{
			fixed (byte* ptext = &text)
			{
				PlotTextNative((byte*)ptext, x, y, (Vector2)(new Vector2(0,0)), (ImPlotTextFlags)(0));
			}
		}

		public static void PlotText(ref byte text, double x, double y, ImPlotTextFlags flags)
		{
			fixed (byte* ptext = &text)
			{
				PlotTextNative((byte*)ptext, x, y, (Vector2)(new Vector2(0,0)), flags);
			}
		}

		public static void PlotText(string text, double x, double y, Vector2 pixOffset, ImPlotTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotTextNative(pStr0, x, y, pixOffset, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotText(string text, double x, double y, Vector2 pixOffset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotTextNative(pStr0, x, y, pixOffset, (ImPlotTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotText(string text, double x, double y)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotTextNative(pStr0, x, y, (Vector2)(new Vector2(0,0)), (ImPlotTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotText(string text, double x, double y, ImPlotTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotTextNative(pStr0, x, y, (Vector2)(new Vector2(0,0)), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotText(ReadOnlySpan<byte> text, double x, double y, Vector2 pixOffset, ImPlotTextFlags flags)
		{
			fixed (byte* ptext = text)
			{
				PlotTextNative((byte*)ptext, x, y, pixOffset, flags);
			}
		}

		public static void PlotText(ReadOnlySpan<byte> text, double x, double y, Vector2 pixOffset)
		{
			fixed (byte* ptext = text)
			{
				PlotTextNative((byte*)ptext, x, y, pixOffset, (ImPlotTextFlags)(0));
			}
		}

		public static void PlotText(ReadOnlySpan<byte> text, double x, double y)
		{
			fixed (byte* ptext = text)
			{
				PlotTextNative((byte*)ptext, x, y, (Vector2)(new Vector2(0,0)), (ImPlotTextFlags)(0));
			}
		}

		public static void PlotText(ReadOnlySpan<byte> text, double x, double y, ImPlotTextFlags flags)
		{
			fixed (byte* ptext = text)
			{
				PlotTextNative((byte*)ptext, x, y, (Vector2)(new Vector2(0,0)), flags);
			}
		}

		internal static void PlotDummyNative(byte* labelId, ImPlotDummyFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, ImPlotDummyFlags, void>)vt[292])(labelId, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlotDummyFlags, void>)vt[292])((nint)labelId, flags);
			#endif
		}

		public static void PlotDummy(byte* labelId, ImPlotDummyFlags flags)
		{
			PlotDummyNative(labelId, flags);
		}

		public static void PlotDummy(byte* labelId)
		{
			PlotDummyNative(labelId, (ImPlotDummyFlags)(0));
		}

		public static void PlotDummy(ref byte labelId, ImPlotDummyFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotDummyNative((byte*)plabelId, flags);
			}
		}

		public static void PlotDummy(ref byte labelId)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotDummyNative((byte*)plabelId, (ImPlotDummyFlags)(0));
			}
		}

		public static void PlotDummy(string labelId, ImPlotDummyFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotDummyNative(pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotDummy(string labelId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotDummyNative(pStr0, (ImPlotDummyFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PlotDummy(ReadOnlySpan<byte> labelId, ImPlotDummyFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotDummyNative((byte*)plabelId, flags);
			}
		}

		public static void PlotDummy(ReadOnlySpan<byte> labelId)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotDummyNative((byte*)plabelId, (ImPlotDummyFlags)(0));
			}
		}

		internal static byte DragPointNative(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, bool* held)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, double*, double*, Vector4, float, ImPlotDragToolFlags, bool*, bool*, bool*, byte>)vt[293])(id, x, y, col, size, flags, outClicked, outHovered, held);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, nint, nint, Vector4, float, ImPlotDragToolFlags, nint, nint, nint, byte>)vt[293])(id, (nint)x, (nint)y, col, size, flags, (nint)outClicked, (nint)outHovered, (nint)held);
			#endif
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, bool* held)
		{
			byte ret = DragPointNative(id, x, y, col, size, flags, outClicked, outHovered, held);
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered)
		{
			byte ret = DragPointNative(id, x, y, col, size, flags, outClicked, outHovered, (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked)
		{
			byte ret = DragPointNative(id, x, y, col, size, flags, outClicked, (bool*)(default), (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags)
		{
			byte ret = DragPointNative(id, x, y, col, size, flags, (bool*)(default), (bool*)(default), (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size)
		{
			byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), (bool*)(default), (bool*)(default), (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col)
		{
			byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)(default), (bool*)(default), (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags)
		{
			byte ret = DragPointNative(id, x, y, col, (float)(4), flags, (bool*)(default), (bool*)(default), (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, bool* outClicked)
		{
			byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)(default), (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, bool* outClicked)
		{
			byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)(default), (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked)
		{
			byte ret = DragPointNative(id, x, y, col, (float)(4), flags, outClicked, (bool*)(default), (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, bool* outClicked, bool* outHovered)
		{
			byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, bool* outClicked, bool* outHovered)
		{
			byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered)
		{
			byte ret = DragPointNative(id, x, y, col, (float)(4), flags, outClicked, outHovered, (bool*)(default));
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, bool* outClicked, bool* outHovered, bool* held)
		{
			byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, held);
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, bool* outClicked, bool* outHovered, bool* held)
		{
			byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, held);
			return ret != 0;
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, bool* held)
		{
			byte ret = DragPointNative(id, x, y, col, (float)(4), flags, outClicked, outHovered, held);
			return ret != 0;
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, size, flags, outClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, size, flags, outClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, size, flags, outClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, size, flags, (bool*)(default), (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), (bool*)(default), (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)(default), (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, (bool*)(default), (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, bool* outClicked)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, bool* outClicked)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, outClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, bool* outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, bool* outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, outClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, outClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, size, flags, outClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, size, flags, outClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, size, flags, outClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, size, flags, (bool*)(default), (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)(default), (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)(default), (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, (bool*)(default), (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, bool* outClicked)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, bool* outClicked)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, outClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, bool* outClicked, bool* outHovered)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, bool* outClicked, bool* outHovered)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, outClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, outClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, outClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, outClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, outClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, (bool*)(default), (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)(default), (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)(default), (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, (bool*)(default), (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, bool* outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, bool* outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, outClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, bool* outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, bool* outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, outClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, outClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, size, flags, (bool*)poutClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, size, flags, (bool*)poutClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, size, flags, (bool*)poutClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ref bool outClicked)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ref bool outClicked)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), flags, (bool*)poutClicked, (bool*)(default), (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ref bool outClicked, bool* outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ref bool outClicked, bool* outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), flags, (bool*)poutClicked, outHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), flags, (bool*)poutClicked, outHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, flags, (bool*)poutClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, flags, (bool*)poutClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, flags, (bool*)poutClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ref bool outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ref bool outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, (bool*)poutClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ref bool outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ref bool outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, (bool*)poutClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, (bool*)poutClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, flags, (bool*)poutClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, flags, (bool*)poutClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, flags, (bool*)poutClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ref bool outClicked)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ref bool outClicked)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, (bool*)poutClicked, (bool*)(default), (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ref bool outClicked, bool* outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ref bool outClicked, bool* outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, (bool*)poutClicked, outHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, (bool*)poutClicked, outHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, (bool*)poutClicked, outHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, (bool*)poutClicked, outHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, (bool*)poutClicked, (bool*)(default), (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ref bool outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)(default), (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ref bool outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)(default), (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, (bool*)poutClicked, (bool*)(default), (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ref bool outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ref bool outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, (bool*)poutClicked, outHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, (bool*)poutClicked, outHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				byte ret = DragPointNative(id, x, y, col, size, flags, outClicked, (bool*)poutHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				byte ret = DragPointNative(id, x, y, col, size, flags, outClicked, (bool*)poutHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, bool* outClicked, ref bool outHovered)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), flags, outClicked, (bool*)poutHovered, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), flags, outClicked, (bool*)poutHovered, held);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, flags, outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, flags, outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, flags, outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, flags, outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, y, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, y, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ref bool outClicked, ref bool outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, y, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragPointNative(id, x, y, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* pheld = &held)
			{
				byte ret = DragPointNative(id, x, y, col, size, flags, outClicked, outHovered, (bool*)pheld);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* pheld = &held)
			{
				byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* pheld = &held)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* pheld = &held)
			{
				byte ret = DragPointNative(id, x, y, col, (float)(4), flags, outClicked, outHovered, (bool*)pheld);
				return ret != 0;
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, flags, outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, flags, outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, y, col, size, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, y, col, (float)(4), flags, (bool*)poutClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, size, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, size, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, y, col, size, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragPointNative(id, x, y, col, (float)(4), flags, outClicked, (bool*)poutHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, size, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, size, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, (double*)py, col, (float)(4), flags, outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, float size, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, size, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, ref double y, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (double* py = &y)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, (double*)py, col, (float)(4), flags, outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, y, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, float size, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragPointNative(id, x, y, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, y, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, float size, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, y, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, ref double x, double* y, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px = &x)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, (double*)px, y, col, (float)(4), flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, x, (double*)py, col, size, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragPoint(int id, double* x, ref double y, Vector4 col, float size, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py = &y)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragPointNative(id, x, (double*)py, col, size, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}
	}
}
