// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot
{
	public unsafe partial class ImPlot
	{

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									fixed (bool* pheld = &held)
									{
										byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
										return ret != 0;
									}
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									fixed (bool* pheld = &held)
									{
										byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
										return ret != 0;
									}
								}
							}
						}
					}
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_Annotation_Bool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AnnotationNative(double x, double y, Vector4 col, Vector2 pixOffset, byte clamp, byte round);

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, bool round)
		{
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, round ? (byte)1 : (byte)0);
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp)
		{
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte)(0));
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_Annotation_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AnnotationNative(double x, double y, Vector4 col, Vector2 pixOffset, byte clamp, byte* fmt);

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, byte* fmt)
		{
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, fmt);
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte*)pfmt);
			}
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_AnnotationV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AnnotationVNative(double x, double y, Vector4 col, Vector2 pixOffset, byte clamp, byte* fmt, nuint args);

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, byte* fmt, nuint args)
		{
			AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, fmt, args);
		}

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte*)pfmt, args);
			}
		}

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagX_Bool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagXNative(double x, Vector4 col, byte round);

		public static void TagX(double x, Vector4 col, bool round)
		{
			TagXNative(x, col, round ? (byte)1 : (byte)0);
		}

		public static void TagX(double x, Vector4 col)
		{
			TagXNative(x, col, (byte)(0));
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagX_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagXNative(double x, Vector4 col, byte* fmt);

		public static void TagX(double x, Vector4 col, byte* fmt)
		{
			TagXNative(x, col, fmt);
		}

		public static void TagX(double x, Vector4 col, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagXNative(x, col, (byte*)pfmt);
			}
		}

		public static void TagX(double x, Vector4 col, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagXNative(x, col, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagXV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagXVNative(double x, Vector4 col, byte* fmt, nuint args);

		public static void TagXV(double x, Vector4 col, byte* fmt, nuint args)
		{
			TagXVNative(x, col, fmt, args);
		}

		public static void TagXV(double x, Vector4 col, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagXVNative(x, col, (byte*)pfmt, args);
			}
		}

		public static void TagXV(double x, Vector4 col, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagXVNative(x, col, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagY_Bool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagYNative(double y, Vector4 col, byte round);

		public static void TagY(double y, Vector4 col, bool round)
		{
			TagYNative(y, col, round ? (byte)1 : (byte)0);
		}

		public static void TagY(double y, Vector4 col)
		{
			TagYNative(y, col, (byte)(0));
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagY_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagYNative(double y, Vector4 col, byte* fmt);

		public static void TagY(double y, Vector4 col, byte* fmt)
		{
			TagYNative(y, col, fmt);
		}

		public static void TagY(double y, Vector4 col, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagYNative(y, col, (byte*)pfmt);
			}
		}

		public static void TagY(double y, Vector4 col, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagYNative(y, col, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagYV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagYVNative(double y, Vector4 col, byte* fmt, nuint args);

		public static void TagYV(double y, Vector4 col, byte* fmt, nuint args)
		{
			TagYVNative(y, col, fmt, args);
		}

		public static void TagYV(double y, Vector4 col, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagYVNative(y, col, (byte*)pfmt, args);
			}
		}

		public static void TagYV(double y, Vector4 col, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagYVNative(y, col, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_SetAxis")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetAxisNative(ImAxis axis);

		public static void SetAxis(ImAxis axis)
		{
			SetAxisNative(axis);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_SetAxes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetAxesNative(ImAxis xAxis, ImAxis yAxis);

		public static void SetAxes(ImAxis xAxis, ImAxis yAxis)
		{
			SetAxesNative(xAxis, yAxis);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PixelsToPlot_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PixelsToPlotNative(ImPlotPoint* output, Vector2 pix, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotPoint PixelsToPlot(Vector2 pix)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, pix, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotPoint PixelsToPlot(Vector2 pix, ImAxis xAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, pix, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, Vector2 pix, ImAxis yAxis)
		{
			PixelsToPlotNative(output, pix, (ImAxis)(-1), yAxis);
		}

		public static void PixelsToPlot(ImPlotPointPtr output, Vector2 pix)
		{
			PixelsToPlotNative(output, pix, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotPoint PixelsToPlot(Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, pix, xAxis, yAxis);
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			PixelsToPlotNative(output, pix, xAxis, yAxis);
		}

		public static void PixelsToPlot(ref ImPlotPoint output, Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, pix, xAxis, yAxis);
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, Vector2 pix, ImAxis xAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, pix, xAxis, (ImAxis)(-1));
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, Vector2 pix)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, pix, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PixelsToPlot_Float")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PixelsToPlotNative(ImPlotPoint* output, float x, float y, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotPoint PixelsToPlot(float x, float y)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, x, y, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotPoint PixelsToPlot(float x, float y, ImAxis xAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, x, y, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, float x, float y, ImAxis yAxis)
		{
			PixelsToPlotNative(output, x, y, (ImAxis)(-1), yAxis);
		}

		public static void PixelsToPlot(ImPlotPointPtr output, float x, float y)
		{
			PixelsToPlotNative(output, x, y, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotPoint PixelsToPlot(float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, x, y, xAxis, yAxis);
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			PixelsToPlotNative(output, x, y, xAxis, yAxis);
		}

		public static void PixelsToPlot(ref ImPlotPoint output, float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, x, y, xAxis, yAxis);
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, float x, float y, ImAxis xAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, x, y, xAxis, (ImAxis)(-1));
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, float x, float y)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, x, y, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PlotToPixels_PlotPoInt")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PlotToPixelsNative(Vector2* output, ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis);

		public static Vector2 PlotToPixels(ImPlotPoint plt)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, plt, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static Vector2 PlotToPixels(ImPlotPoint plt, ImAxis xAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, plt, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PlotToPixels(Vector2* output, ImPlotPoint plt, ImAxis yAxis)
		{
			PlotToPixelsNative(output, plt, (ImAxis)(-1), yAxis);
		}

		public static void PlotToPixels(Vector2* output, ImPlotPoint plt)
		{
			PlotToPixelsNative(output, plt, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static Vector2 PlotToPixels(ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, plt, xAxis, yAxis);
			return ret;
		}

		public static void PlotToPixels(Vector2* output, ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			PlotToPixelsNative(output, plt, xAxis, yAxis);
		}

		public static void PlotToPixels(ref Vector2 output, ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, plt, xAxis, yAxis);
			}
		}

		public static void PlotToPixels(ref Vector2 output, ImPlotPoint plt, ImAxis xAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, plt, xAxis, (ImAxis)(-1));
			}
		}

		public static void PlotToPixels(ref Vector2 output, ImPlotPoint plt)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, plt, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PlotToPixels_double")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PlotToPixelsNative(Vector2* output, double x, double y, ImAxis xAxis, ImAxis yAxis);

		public static Vector2 PlotToPixels(double x, double y)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, x, y, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static Vector2 PlotToPixels(double x, double y, ImAxis xAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, x, y, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PlotToPixels(Vector2* output, double x, double y, ImAxis yAxis)
		{
			PlotToPixelsNative(output, x, y, (ImAxis)(-1), yAxis);
		}

		public static void PlotToPixels(Vector2* output, double x, double y)
		{
			PlotToPixelsNative(output, x, y, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static Vector2 PlotToPixels(double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, x, y, xAxis, yAxis);
			return ret;
		}

		public static void PlotToPixels(Vector2* output, double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			PlotToPixelsNative(output, x, y, xAxis, yAxis);
		}

		public static void PlotToPixels(ref Vector2 output, double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, x, y, xAxis, yAxis);
			}
		}

		public static void PlotToPixels(ref Vector2 output, double x, double y, ImAxis xAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, x, y, xAxis, (ImAxis)(-1));
			}
		}

		public static void PlotToPixels(ref Vector2 output, double x, double y)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, x, y, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotPos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotPosNative(Vector2* output);

		public static Vector2 GetPlotPos()
		{
			Vector2 ret;
			GetPlotPosNative(&ret);
			return ret;
		}

		public static void GetPlotPos(Vector2* output)
		{
			GetPlotPosNative(output);
		}

		public static void GetPlotPos(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetPlotPosNative((Vector2*)poutput);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotSizeNative(Vector2* output);

		public static Vector2 GetPlotSize()
		{
			Vector2 ret;
			GetPlotSizeNative(&ret);
			return ret;
		}

		public static void GetPlotSize(Vector2* output)
		{
			GetPlotSizeNative(output);
		}

		public static void GetPlotSize(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetPlotSizeNative((Vector2*)poutput);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotMousePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotMousePosNative(ImPlotPoint* output, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotPoint GetPlotMousePos()
		{
			ImPlotPoint ret;
			GetPlotMousePosNative(&ret, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotPoint GetPlotMousePos(ImAxis xAxis)
		{
			ImPlotPoint ret;
			GetPlotMousePosNative(&ret, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void GetPlotMousePos(ImPlotPointPtr output, ImAxis yAxis)
		{
			GetPlotMousePosNative(output, (ImAxis)(-1), yAxis);
		}

		public static void GetPlotMousePos(ImPlotPointPtr output)
		{
			GetPlotMousePosNative(output, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotPoint GetPlotMousePos(ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotPoint ret;
			GetPlotMousePosNative(&ret, xAxis, yAxis);
			return ret;
		}

		public static void GetPlotMousePos(ImPlotPointPtr output, ImAxis xAxis, ImAxis yAxis)
		{
			GetPlotMousePosNative(output, xAxis, yAxis);
		}

		public static void GetPlotMousePos(ref ImPlotPoint output, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				GetPlotMousePosNative((ImPlotPoint*)poutput, xAxis, yAxis);
			}
		}

		public static void GetPlotMousePos(ref ImPlotPoint output, ImAxis xAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				GetPlotMousePosNative((ImPlotPoint*)poutput, xAxis, (ImAxis)(-1));
			}
		}

		public static void GetPlotMousePos(ref ImPlotPoint output)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				GetPlotMousePosNative((ImPlotPoint*)poutput, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotLimits")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotLimitsNative(ImPlotRect* output, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotRect GetPlotLimits()
		{
			ImPlotRect ret;
			GetPlotLimitsNative(&ret, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotRect GetPlotLimits(ImAxis xAxis)
		{
			ImPlotRect ret;
			GetPlotLimitsNative(&ret, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void GetPlotLimits(ImPlotRectPtr output, ImAxis yAxis)
		{
			GetPlotLimitsNative(output, (ImAxis)(-1), yAxis);
		}

		public static void GetPlotLimits(ImPlotRectPtr output)
		{
			GetPlotLimitsNative(output, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotRect GetPlotLimits(ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotRect ret;
			GetPlotLimitsNative(&ret, xAxis, yAxis);
			return ret;
		}

		public static void GetPlotLimits(ImPlotRectPtr output, ImAxis xAxis, ImAxis yAxis)
		{
			GetPlotLimitsNative(output, xAxis, yAxis);
		}

		public static void GetPlotLimits(ref ImPlotRect output, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotLimitsNative((ImPlotRect*)poutput, xAxis, yAxis);
			}
		}

		public static void GetPlotLimits(ref ImPlotRect output, ImAxis xAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotLimitsNative((ImPlotRect*)poutput, xAxis, (ImAxis)(-1));
			}
		}

		public static void GetPlotLimits(ref ImPlotRect output)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotLimitsNative((ImPlotRect*)poutput, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_IsPlotHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsPlotHoveredNative();

		public static bool IsPlotHovered()
		{
			byte ret = IsPlotHoveredNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_IsAxisHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsAxisHoveredNative(ImAxis axis);

		public static bool IsAxisHovered(ImAxis axis)
		{
			byte ret = IsAxisHoveredNative(axis);
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_IsSubplotsHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsSubplotsHoveredNative();

		public static bool IsSubplotsHovered()
		{
			byte ret = IsSubplotsHoveredNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_IsPlotSelected")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsPlotSelectedNative();

		public static bool IsPlotSelected()
		{
			byte ret = IsPlotSelectedNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotSelection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotSelectionNative(ImPlotRect* output, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotRect GetPlotSelection()
		{
			ImPlotRect ret;
			GetPlotSelectionNative(&ret, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotRect GetPlotSelection(ImAxis xAxis)
		{
			ImPlotRect ret;
			GetPlotSelectionNative(&ret, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void GetPlotSelection(ImPlotRectPtr output, ImAxis yAxis)
		{
			GetPlotSelectionNative(output, (ImAxis)(-1), yAxis);
		}

		public static void GetPlotSelection(ImPlotRectPtr output)
		{
			GetPlotSelectionNative(output, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotRect GetPlotSelection(ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotRect ret;
			GetPlotSelectionNative(&ret, xAxis, yAxis);
			return ret;
		}

		public static void GetPlotSelection(ImPlotRectPtr output, ImAxis xAxis, ImAxis yAxis)
		{
			GetPlotSelectionNative(output, xAxis, yAxis);
		}

		public static void GetPlotSelection(ref ImPlotRect output, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotSelectionNative((ImPlotRect*)poutput, xAxis, yAxis);
			}
		}

		public static void GetPlotSelection(ref ImPlotRect output, ImAxis xAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotSelectionNative((ImPlotRect*)poutput, xAxis, (ImAxis)(-1));
			}
		}

		public static void GetPlotSelection(ref ImPlotRect output)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotSelectionNative((ImPlotRect*)poutput, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_CancelPlotSelection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void CancelPlotSelectionNative();

		public static void CancelPlotSelection()
		{
			CancelPlotSelectionNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_HideNextItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void HideNextItemNative(byte hidden, ImPlotCond cond);

		public static void HideNextItem(bool hidden, ImPlotCond cond)
		{
			HideNextItemNative(hidden ? (byte)1 : (byte)0, cond);
		}

		public static void HideNextItem(bool hidden)
		{
			HideNextItemNative(hidden ? (byte)1 : (byte)0, (ImPlotCond)(ImPlotCond.Once));
		}

		public static void HideNextItem()
		{
			HideNextItemNative((byte)(1), (ImPlotCond)(ImPlotCond.Once));
		}

		public static void HideNextItem(ImPlotCond cond)
		{
			HideNextItemNative((byte)(1), cond);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_BeginAlignedPlots")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginAlignedPlotsNative(byte* groupId, byte vertical);

		public static bool BeginAlignedPlots(byte* groupId, bool vertical)
		{
			byte ret = BeginAlignedPlotsNative(groupId, vertical ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool BeginAlignedPlots(byte* groupId)
		{
			byte ret = BeginAlignedPlotsNative(groupId, (byte)(1));
			return ret != 0;
		}

		public static bool BeginAlignedPlots(ref byte groupId, bool vertical)
		{
			fixed (byte* pgroupId = &groupId)
			{
				byte ret = BeginAlignedPlotsNative((byte*)pgroupId, vertical ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		public static bool BeginAlignedPlots(ref byte groupId)
		{
			fixed (byte* pgroupId = &groupId)
			{
				byte ret = BeginAlignedPlotsNative((byte*)pgroupId, (byte)(1));
				return ret != 0;
			}
		}

		public static bool BeginAlignedPlots(string groupId, bool vertical)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (groupId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(groupId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(groupId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginAlignedPlotsNative(pStr0, vertical ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginAlignedPlots(string groupId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (groupId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(groupId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(groupId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginAlignedPlotsNative(pStr0, (byte)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_EndAlignedPlots")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndAlignedPlotsNative();

		public static void EndAlignedPlots()
		{
			EndAlignedPlotsNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_BeginLegendPopup")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginLegendPopupNative(byte* labelId, ImGuiMouseButton mouseButton);

		public static bool BeginLegendPopup(byte* labelId, ImGuiMouseButton mouseButton)
		{
			byte ret = BeginLegendPopupNative(labelId, mouseButton);
			return ret != 0;
		}

		public static bool BeginLegendPopup(byte* labelId)
		{
			byte ret = BeginLegendPopupNative(labelId, (ImGuiMouseButton)(1));
			return ret != 0;
		}

		public static bool BeginLegendPopup(ref byte labelId, ImGuiMouseButton mouseButton)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = BeginLegendPopupNative((byte*)plabelId, mouseButton);
				return ret != 0;
			}
		}

		public static bool BeginLegendPopup(ref byte labelId)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = BeginLegendPopupNative((byte*)plabelId, (ImGuiMouseButton)(1));
				return ret != 0;
			}
		}

		public static bool BeginLegendPopup(string labelId, ImGuiMouseButton mouseButton)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginLegendPopupNative(pStr0, mouseButton);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginLegendPopup(string labelId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginLegendPopupNative(pStr0, (ImGuiMouseButton)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_EndLegendPopup")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndLegendPopupNative();

		public static void EndLegendPopup()
		{
			EndLegendPopupNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_IsLegendEntryHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsLegendEntryHoveredNative(byte* labelId);

		public static bool IsLegendEntryHovered(byte* labelId)
		{
			byte ret = IsLegendEntryHoveredNative(labelId);
			return ret != 0;
		}

		public static bool IsLegendEntryHovered(ref byte labelId)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = IsLegendEntryHoveredNative((byte*)plabelId);
				return ret != 0;
			}
		}

		public static bool IsLegendEntryHovered(string labelId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = IsLegendEntryHoveredNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_BeginDragDropTargetPlot")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginDragDropTargetPlotNative();

		public static bool BeginDragDropTargetPlot()
		{
			byte ret = BeginDragDropTargetPlotNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_BeginDragDropTargetAxis")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginDragDropTargetAxisNative(ImAxis axis);

		public static bool BeginDragDropTargetAxis(ImAxis axis)
		{
			byte ret = BeginDragDropTargetAxisNative(axis);
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_BeginDragDropTargetLegend")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginDragDropTargetLegendNative();

		public static bool BeginDragDropTargetLegend()
		{
			byte ret = BeginDragDropTargetLegendNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_EndDragDropTarget")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndDragDropTargetNative();

		public static void EndDragDropTarget()
		{
			EndDragDropTargetNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_BeginDragDropSourcePlot")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginDragDropSourcePlotNative(ImGuiDragDropFlags flags);

		public static bool BeginDragDropSourcePlot(ImGuiDragDropFlags flags)
		{
			byte ret = BeginDragDropSourcePlotNative(flags);
			return ret != 0;
		}

		public static bool BeginDragDropSourcePlot()
		{
			byte ret = BeginDragDropSourcePlotNative((ImGuiDragDropFlags)(0));
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_BeginDragDropSourceAxis")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginDragDropSourceAxisNative(ImAxis axis, ImGuiDragDropFlags flags);

		public static bool BeginDragDropSourceAxis(ImAxis axis, ImGuiDragDropFlags flags)
		{
			byte ret = BeginDragDropSourceAxisNative(axis, flags);
			return ret != 0;
		}

		public static bool BeginDragDropSourceAxis(ImAxis axis)
		{
			byte ret = BeginDragDropSourceAxisNative(axis, (ImGuiDragDropFlags)(0));
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_BeginDragDropSourceItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginDragDropSourceItemNative(byte* labelId, ImGuiDragDropFlags flags);

		public static bool BeginDragDropSourceItem(byte* labelId, ImGuiDragDropFlags flags)
		{
			byte ret = BeginDragDropSourceItemNative(labelId, flags);
			return ret != 0;
		}

		public static bool BeginDragDropSourceItem(byte* labelId)
		{
			byte ret = BeginDragDropSourceItemNative(labelId, (ImGuiDragDropFlags)(0));
			return ret != 0;
		}

		public static bool BeginDragDropSourceItem(ref byte labelId, ImGuiDragDropFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = BeginDragDropSourceItemNative((byte*)plabelId, flags);
				return ret != 0;
			}
		}

		public static bool BeginDragDropSourceItem(ref byte labelId)
		{
			fixed (byte* plabelId = &labelId)
			{
				byte ret = BeginDragDropSourceItemNative((byte*)plabelId, (ImGuiDragDropFlags)(0));
				return ret != 0;
			}
		}

		public static bool BeginDragDropSourceItem(string labelId, ImGuiDragDropFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginDragDropSourceItemNative(pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginDragDropSourceItem(string labelId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginDragDropSourceItemNative(pStr0, (ImGuiDragDropFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_EndDragDropSource")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndDragDropSourceNative();

		public static void EndDragDropSource()
		{
			EndDragDropSourceNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetStyle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImPlotStyle* GetStyleNative();

		public static ImPlotStylePtr GetStyle()
		{
			ImPlotStylePtr ret = GetStyleNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_StyleColorsAuto")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void StyleColorsAutoNative(ImPlotStyle* dst);

		public static void StyleColorsAuto(ImPlotStylePtr dst)
		{
			StyleColorsAutoNative(dst);
		}

		public static void StyleColorsAuto()
		{
			StyleColorsAutoNative((ImPlotStyle*)(default));
		}

		public static void StyleColorsAuto(ref ImPlotStyle dst)
		{
			fixed (ImPlotStyle* pdst = &dst)
			{
				StyleColorsAutoNative((ImPlotStyle*)pdst);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_StyleColorsClassic")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void StyleColorsClassicNative(ImPlotStyle* dst);

		public static void StyleColorsClassic(ImPlotStylePtr dst)
		{
			StyleColorsClassicNative(dst);
		}

		public static void StyleColorsClassic()
		{
			StyleColorsClassicNative((ImPlotStyle*)(default));
		}

		public static void StyleColorsClassic(ref ImPlotStyle dst)
		{
			fixed (ImPlotStyle* pdst = &dst)
			{
				StyleColorsClassicNative((ImPlotStyle*)pdst);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_StyleColorsDark")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void StyleColorsDarkNative(ImPlotStyle* dst);

		public static void StyleColorsDark(ImPlotStylePtr dst)
		{
			StyleColorsDarkNative(dst);
		}

		public static void StyleColorsDark()
		{
			StyleColorsDarkNative((ImPlotStyle*)(default));
		}

		public static void StyleColorsDark(ref ImPlotStyle dst)
		{
			fixed (ImPlotStyle* pdst = &dst)
			{
				StyleColorsDarkNative((ImPlotStyle*)pdst);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_StyleColorsLight")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void StyleColorsLightNative(ImPlotStyle* dst);

		public static void StyleColorsLight(ImPlotStylePtr dst)
		{
			StyleColorsLightNative(dst);
		}

		public static void StyleColorsLight()
		{
			StyleColorsLightNative((ImPlotStyle*)(default));
		}

		public static void StyleColorsLight(ref ImPlotStyle dst)
		{
			fixed (ImPlotStyle* pdst = &dst)
			{
				StyleColorsLightNative((ImPlotStyle*)pdst);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PushStyleColor_U32")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushStyleColorNative(ImPlotCol idx, uint col);

		public static void PushStyleColor(ImPlotCol idx, uint col)
		{
			PushStyleColorNative(idx, col);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PushStyleColor_Vec4")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushStyleColorNative(ImPlotCol idx, Vector4 col);

		public static void PushStyleColor(ImPlotCol idx, Vector4 col)
		{
			PushStyleColorNative(idx, col);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PopStyleColor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PopStyleColorNative(int count);

		public static void PopStyleColor(int count)
		{
			PopStyleColorNative(count);
		}

		public static void PopStyleColor()
		{
			PopStyleColorNative((int)(1));
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PushStyleVar_Float")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushStyleVarNative(ImPlotStyleVar idx, float val);

		public static void PushStyleVar(ImPlotStyleVar idx, float val)
		{
			PushStyleVarNative(idx, val);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PushStyleVar_Int")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushStyleVarNative(ImPlotStyleVar idx, int val);

		public static void PushStyleVar(ImPlotStyleVar idx, int val)
		{
			PushStyleVarNative(idx, val);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PushStyleVar_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushStyleVarNative(ImPlotStyleVar idx, Vector2 val);

		public static void PushStyleVar(ImPlotStyleVar idx, Vector2 val)
		{
			PushStyleVarNative(idx, val);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PopStyleVar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PopStyleVarNative(int count);

		public static void PopStyleVar(int count)
		{
			PopStyleVarNative(count);
		}

		public static void PopStyleVar()
		{
			PopStyleVarNative((int)(1));
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_SetNextLineStyle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNextLineStyleNative(Vector4 col, float weight);

		public static void SetNextLineStyle(Vector4 col, float weight)
		{
			SetNextLineStyleNative(col, weight);
		}

		public static void SetNextLineStyle(Vector4 col)
		{
			SetNextLineStyleNative(col, (float)(-1));
		}

		public static void SetNextLineStyle()
		{
			SetNextLineStyleNative((Vector4)(new Vector4(0,0,0,-1)), (float)(-1));
		}

		public static void SetNextLineStyle(float weight)
		{
			SetNextLineStyleNative((Vector4)(new Vector4(0,0,0,-1)), weight);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_SetNextFillStyle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNextFillStyleNative(Vector4 col, float alphaMod);

		public static void SetNextFillStyle(Vector4 col, float alphaMod)
		{
			SetNextFillStyleNative(col, alphaMod);
		}

		public static void SetNextFillStyle(Vector4 col)
		{
			SetNextFillStyleNative(col, (float)(-1));
		}

		public static void SetNextFillStyle()
		{
			SetNextFillStyleNative((Vector4)(new Vector4(0,0,0,-1)), (float)(-1));
		}

		public static void SetNextFillStyle(float alphaMod)
		{
			SetNextFillStyleNative((Vector4)(new Vector4(0,0,0,-1)), alphaMod);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_SetNextMarkerStyle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNextMarkerStyleNative(ImPlotMarker marker, float size, Vector4 fill, float weight, Vector4 outline);

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, Vector4 fill, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, size, fill, weight, outline);
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, Vector4 fill, float weight)
		{
			SetNextMarkerStyleNative(marker, size, fill, weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, Vector4 fill)
		{
			SetNextMarkerStyleNative(marker, size, fill, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size)
		{
			SetNextMarkerStyleNative(marker, size, (Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle()
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(float size)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, (Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, Vector4 fill)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), fill, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(Vector4 fill)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), fill, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(float size, Vector4 fill)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, fill, (float)(-1), (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, float weight)
		{
			SetNextMarkerStyleNative(marker, size, (Vector4)(new Vector4(0,0,0,-1)), weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(float size, float weight)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, (Vector4)(new Vector4(0,0,0,-1)), weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, Vector4 fill, float weight)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), fill, weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(Vector4 fill, float weight)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), fill, weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(float size, Vector4 fill, float weight)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, fill, weight, (Vector4)(new Vector4(0,0,0,-1)));
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, Vector4 fill, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, size, fill, (float)(-1), outline);
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, Vector4 fill, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), fill, (float)(-1), outline);
		}

		public static void SetNextMarkerStyle(Vector4 fill, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), fill, (float)(-1), outline);
		}

		public static void SetNextMarkerStyle(float size, Vector4 fill, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, fill, (float)(-1), outline);
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, float size, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, size, (Vector4)(new Vector4(0,0,0,-1)), weight, outline);
		}

		public static void SetNextMarkerStyle(float size, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, (Vector4)(new Vector4(0,0,0,-1)), weight, outline);
		}

		public static void SetNextMarkerStyle(ImPlotMarker marker, Vector4 fill, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative(marker, (float)(-1), fill, weight, outline);
		}

		public static void SetNextMarkerStyle(Vector4 fill, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), (float)(-1), fill, weight, outline);
		}

		public static void SetNextMarkerStyle(float size, Vector4 fill, float weight, Vector4 outline)
		{
			SetNextMarkerStyleNative((ImPlotMarker)(-1), size, fill, weight, outline);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_SetNextErrorBarStyle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNextErrorBarStyleNative(Vector4 col, float size, float weight);

		public static void SetNextErrorBarStyle(Vector4 col, float size, float weight)
		{
			SetNextErrorBarStyleNative(col, size, weight);
		}

		public static void SetNextErrorBarStyle(Vector4 col, float size)
		{
			SetNextErrorBarStyleNative(col, size, (float)(-1));
		}

		public static void SetNextErrorBarStyle(Vector4 col)
		{
			SetNextErrorBarStyleNative(col, (float)(-1), (float)(-1));
		}

		public static void SetNextErrorBarStyle()
		{
			SetNextErrorBarStyleNative((Vector4)(new Vector4(0,0,0,-1)), (float)(-1), (float)(-1));
		}

		public static void SetNextErrorBarStyle(float size)
		{
			SetNextErrorBarStyleNative((Vector4)(new Vector4(0,0,0,-1)), size, (float)(-1));
		}

		public static void SetNextErrorBarStyle(float size, float weight)
		{
			SetNextErrorBarStyleNative((Vector4)(new Vector4(0,0,0,-1)), size, weight);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetLastItemColor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetLastItemColorNative(Vector4* output);

		public static Vector4 GetLastItemColor()
		{
			Vector4 ret;
			GetLastItemColorNative(&ret);
			return ret;
		}

		public static void GetLastItemColor(Vector4* output)
		{
			GetLastItemColorNative(output);
		}

		public static void GetLastItemColor(ref Vector4 output)
		{
			fixed (Vector4* poutput = &output)
			{
				GetLastItemColorNative((Vector4*)poutput);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetStyleColorName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* GetStyleColorNameNative(ImPlotCol idx);

		public static byte* GetStyleColorName(ImPlotCol idx)
		{
			byte* ret = GetStyleColorNameNative(idx);
			return ret;
		}

		public static string GetStyleColorNameS(ImPlotCol idx)
		{
			string ret = Utils.DecodeStringUTF8(GetStyleColorNameNative(idx));
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetMarkerName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* GetMarkerNameNative(ImPlotMarker idx);

		public static byte* GetMarkerName(ImPlotMarker idx)
		{
			byte* ret = GetMarkerNameNative(idx);
			return ret;
		}

		public static string GetMarkerNameS(ImPlotMarker idx)
		{
			string ret = Utils.DecodeStringUTF8(GetMarkerNameNative(idx));
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_AddColormap_Vec4Ptr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImPlotColormap AddColormapNative(byte* name, Vector4* cols, int size, byte qual);

		public static ImPlotColormap AddColormap(byte* name, Vector4* cols, int size, bool qual)
		{
			ImPlotColormap ret = AddColormapNative(name, cols, size, qual ? (byte)1 : (byte)0);
			return ret;
		}

		public static ImPlotColormap AddColormap(byte* name, Vector4* cols, int size)
		{
			ImPlotColormap ret = AddColormapNative(name, cols, size, (byte)(1));
			return ret;
		}

		public static ImPlotColormap AddColormap(ref byte name, Vector4* cols, int size, bool qual)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, Vector4* cols, int size)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(string name, Vector4* cols, int size, bool qual)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = AddColormapNative(pStr0, cols, size, qual ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImPlotColormap AddColormap(string name, Vector4* cols, int size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = AddColormapNative(pStr0, cols, size, (byte)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImPlotColormap AddColormap(byte* name, ref Vector4 cols, int size, bool qual)
		{
			fixed (Vector4* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(name, (Vector4*)pcols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(byte* name, ref Vector4 cols, int size)
		{
			fixed (Vector4* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(name, (Vector4*)pcols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, ref Vector4 cols, int size, bool qual)
		{
			fixed (byte* pname = &name)
			{
				fixed (Vector4* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (Vector4*)pcols, size, qual ? (byte)1 : (byte)0);
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, ref Vector4 cols, int size)
		{
			fixed (byte* pname = &name)
			{
				fixed (Vector4* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (Vector4*)pcols, size, (byte)(1));
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(string name, ref Vector4 cols, int size, bool qual)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(pStr0, (Vector4*)pcols, size, qual ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(string name, ref Vector4 cols, int size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(pStr0, (Vector4*)pcols, size, (byte)(1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_AddColormap_U32Ptr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImPlotColormap AddColormapNative(byte* name, uint* cols, int size, byte qual);

		public static ImPlotColormap AddColormap(byte* name, uint* cols, int size, bool qual)
		{
			ImPlotColormap ret = AddColormapNative(name, cols, size, qual ? (byte)1 : (byte)0);
			return ret;
		}

		public static ImPlotColormap AddColormap(byte* name, uint* cols, int size)
		{
			ImPlotColormap ret = AddColormapNative(name, cols, size, (byte)(1));
			return ret;
		}

		public static ImPlotColormap AddColormap(ref byte name, uint* cols, int size, bool qual)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, uint* cols, int size)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = AddColormapNative((byte*)pname, cols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(string name, uint* cols, int size, bool qual)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = AddColormapNative(pStr0, cols, size, qual ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImPlotColormap AddColormap(string name, uint* cols, int size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = AddColormapNative(pStr0, cols, size, (byte)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImPlotColormap AddColormap(byte* name, ref uint cols, int size, bool qual)
		{
			fixed (uint* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(name, (uint*)pcols, size, qual ? (byte)1 : (byte)0);
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(byte* name, ref uint cols, int size)
		{
			fixed (uint* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(name, (uint*)pcols, size, (byte)(1));
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, ref uint cols, int size, bool qual)
		{
			fixed (byte* pname = &name)
			{
				fixed (uint* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (uint*)pcols, size, qual ? (byte)1 : (byte)0);
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(ref byte name, ref uint cols, int size)
		{
			fixed (byte* pname = &name)
			{
				fixed (uint* pcols = &cols)
				{
					ImPlotColormap ret = AddColormapNative((byte*)pname, (uint*)pcols, size, (byte)(1));
					return ret;
				}
			}
		}

		public static ImPlotColormap AddColormap(string name, ref uint cols, int size, bool qual)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(pStr0, (uint*)pcols, size, qual ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImPlotColormap AddColormap(string name, ref uint cols, int size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* pcols = &cols)
			{
				ImPlotColormap ret = AddColormapNative(pStr0, (uint*)pcols, size, (byte)(1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetColormapCount")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int GetColormapCountNative();

		public static int GetColormapCount()
		{
			int ret = GetColormapCountNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetColormapName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* GetColormapNameNative(ImPlotColormap cmap);

		public static byte* GetColormapName(ImPlotColormap cmap)
		{
			byte* ret = GetColormapNameNative(cmap);
			return ret;
		}

		public static string GetColormapNameS(ImPlotColormap cmap)
		{
			string ret = Utils.DecodeStringUTF8(GetColormapNameNative(cmap));
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetColormapIndex")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImPlotColormap GetColormapIndexNative(byte* name);

		public static ImPlotColormap GetColormapIndex(byte* name)
		{
			ImPlotColormap ret = GetColormapIndexNative(name);
			return ret;
		}

		public static ImPlotColormap GetColormapIndex(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImPlotColormap ret = GetColormapIndexNative((byte*)pname);
				return ret;
			}
		}

		public static ImPlotColormap GetColormapIndex(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImPlotColormap ret = GetColormapIndexNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PushColormap_PlotColormap")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushColormapNative(ImPlotColormap cmap);

		public static void PushColormap(ImPlotColormap cmap)
		{
			PushColormapNative(cmap);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PushColormap_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushColormapNative(byte* name);

		public static void PushColormap(byte* name)
		{
			PushColormapNative(name);
		}

		public static void PushColormap(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				PushColormapNative((byte*)pname);
			}
		}

		public static void PushColormap(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushColormapNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PopColormap")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PopColormapNative(int count);

		public static void PopColormap(int count)
		{
			PopColormapNative(count);
		}

		public static void PopColormap()
		{
			PopColormapNative((int)(1));
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_NextColormapColor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NextColormapColorNative(Vector4* output);

		public static Vector4 NextColormapColor()
		{
			Vector4 ret;
			NextColormapColorNative(&ret);
			return ret;
		}

		public static void NextColormapColor(Vector4* output)
		{
			NextColormapColorNative(output);
		}

		public static void NextColormapColor(ref Vector4 output)
		{
			fixed (Vector4* poutput = &output)
			{
				NextColormapColorNative((Vector4*)poutput);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetColormapSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int GetColormapSizeNative(ImPlotColormap cmap);

		public static int GetColormapSize(ImPlotColormap cmap)
		{
			int ret = GetColormapSizeNative(cmap);
			return ret;
		}

		public static int GetColormapSize()
		{
			int ret = GetColormapSizeNative((ImPlotColormap)(-1));
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetColormapColor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetColormapColorNative(Vector4* output, int idx, ImPlotColormap cmap);

		public static Vector4 GetColormapColor(int idx)
		{
			Vector4 ret;
			GetColormapColorNative(&ret, idx, (ImPlotColormap)(-1));
			return ret;
		}

		public static Vector4 GetColormapColor(int idx, ImPlotColormap cmap)
		{
			Vector4 ret;
			GetColormapColorNative(&ret, idx, cmap);
			return ret;
		}

		public static void GetColormapColor(Vector4* output, int idx, ImPlotColormap cmap)
		{
			GetColormapColorNative(output, idx, cmap);
		}

		public static void GetColormapColor(Vector4* output, int idx)
		{
			GetColormapColorNative(output, idx, (ImPlotColormap)(-1));
		}

		public static void GetColormapColor(ref Vector4 output, int idx, ImPlotColormap cmap)
		{
			fixed (Vector4* poutput = &output)
			{
				GetColormapColorNative((Vector4*)poutput, idx, cmap);
			}
		}

		public static void GetColormapColor(ref Vector4 output, int idx)
		{
			fixed (Vector4* poutput = &output)
			{
				GetColormapColorNative((Vector4*)poutput, idx, (ImPlotColormap)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_SampleColormap")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SampleColormapNative(Vector4* output, float t, ImPlotColormap cmap);

		public static Vector4 SampleColormap(float t)
		{
			Vector4 ret;
			SampleColormapNative(&ret, t, (ImPlotColormap)(-1));
			return ret;
		}

		public static Vector4 SampleColormap(float t, ImPlotColormap cmap)
		{
			Vector4 ret;
			SampleColormapNative(&ret, t, cmap);
			return ret;
		}

		public static void SampleColormap(Vector4* output, float t, ImPlotColormap cmap)
		{
			SampleColormapNative(output, t, cmap);
		}

		public static void SampleColormap(Vector4* output, float t)
		{
			SampleColormapNative(output, t, (ImPlotColormap)(-1));
		}

		public static void SampleColormap(ref Vector4 output, float t, ImPlotColormap cmap)
		{
			fixed (Vector4* poutput = &output)
			{
				SampleColormapNative((Vector4*)poutput, t, cmap);
			}
		}

		public static void SampleColormap(ref Vector4 output, float t)
		{
			fixed (Vector4* poutput = &output)
			{
				SampleColormapNative((Vector4*)poutput, t, (ImPlotColormap)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_ColormapScale")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ColormapScaleNative(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap);

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, size, format, flags, cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, size, format, flags, (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size)
		{
			ColormapScale(label, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax)
		{
			ColormapScale(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, byte* format)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags)
		{
			ColormapScale(label, scaleMin, scaleMax, size, (string)"%g", flags, (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags)
		{
			ColormapScale(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, (ImPlotColormap)(-1));
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormap cmap)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormap cmap)
		{
			ColormapScale(label, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ImPlotColormap cmap)
		{
			ColormapScale(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, byte* format, ImPlotColormap cmap)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			ColormapScale(label, scaleMin, scaleMax, size, (string)"%g", flags, cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			ColormapScale(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, cmap);
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, cmap);
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, flags, cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, size, (string)"%g", flags, cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScale((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, cmap);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, cmap);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, format, flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, format, flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, size, (string)"%g", flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, format, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, size, (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, size, (string)"%g", flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScale(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (string)"%g", flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, byte* format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), format, flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, flags, cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ref byte format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, (ImPlotColormap)(-1));
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormap cmap)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ref byte format, ImPlotColormap cmap)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, ref byte format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* pformat = &format)
			{
				ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, cmap);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, size, pStr0, flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, size, pStr0, flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, size, pStr0, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr0, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, string format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr0, flags, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, size, pStr0, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, string format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr0, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(byte* label, double scaleMin, double scaleMax, string format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColormapScaleNative(label, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr0, flags, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, flags, cmap);
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, flags, (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ref byte format, ImPlotColormapScaleFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, (ImPlotColormap)(-1));
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, Vector2 size, ref byte format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, size, (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ref byte format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, (ImPlotColormapScaleFlags)(0), cmap);
				}
			}
		}

		public static void ColormapScale(ref byte label, double scaleMin, double scaleMax, ref byte format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					ColormapScaleNative((byte*)plabel, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), (byte*)pformat, flags, cmap);
				}
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, pStr1, flags, cmap);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, pStr1, flags, (ImPlotColormap)(-1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, pStr1, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr1, (ImPlotColormapScaleFlags)(0), (ImPlotColormap)(-1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, string format, ImPlotColormapScaleFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr1, flags, (ImPlotColormap)(-1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, Vector2 size, string format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, size, pStr1, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, string format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr1, (ImPlotColormapScaleFlags)(0), cmap);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ColormapScale(string label, double scaleMin, double scaleMax, string format, ImPlotColormapScaleFlags flags, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ColormapScaleNative(pStr0, scaleMin, scaleMax, (Vector2)(new Vector2(0,0)), pStr1, flags, cmap);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_ColormapSlider")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ColormapSliderNative(byte* label, float* t, Vector4* output, byte* format, ImPlotColormap cmap);

		public static bool ColormapSlider(byte* label, float* t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			byte ret = ColormapSliderNative(label, t, output, format, cmap);
			return ret != 0;
		}

		public static bool ColormapSlider(byte* label, float* t, Vector4* output, byte* format)
		{
			byte ret = ColormapSliderNative(label, t, output, format, (ImPlotColormap)(-1));
			return ret != 0;
		}

		public static bool ColormapSlider(byte* label, float* t, Vector4* output)
		{
			bool ret = ColormapSlider(label, t, output, (string)"", (ImPlotColormap)(-1));
			return ret;
		}

		public static bool ColormapSlider(byte* label, float* t)
		{
			bool ret = ColormapSlider(label, t, (Vector4*)(default), (string)"", (ImPlotColormap)(-1));
			return ret;
		}

		public static bool ColormapSlider(byte* label, float* t, byte* format)
		{
			byte ret = ColormapSliderNative(label, t, (Vector4*)(default), format, (ImPlotColormap)(-1));
			return ret != 0;
		}

		public static bool ColormapSlider(byte* label, float* t, Vector4* output, ImPlotColormap cmap)
		{
			bool ret = ColormapSlider(label, t, output, (string)"", cmap);
			return ret;
		}

		public static bool ColormapSlider(byte* label, float* t, ImPlotColormap cmap)
		{
			bool ret = ColormapSlider(label, t, (Vector4*)(default), (string)"", cmap);
			return ret;
		}

		public static bool ColormapSlider(byte* label, float* t, byte* format, ImPlotColormap cmap)
		{
			byte ret = ColormapSliderNative(label, t, (Vector4*)(default), format, cmap);
			return ret != 0;
		}

		public static bool ColormapSlider(ref byte label, float* t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColormapSliderNative((byte*)plabel, t, output, format, cmap);
				return ret != 0;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, Vector4* output, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColormapSliderNative((byte*)plabel, t, output, format, (ImPlotColormap)(-1));
				return ret != 0;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, Vector4* output)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = ColormapSlider((byte*)plabel, t, output, (string)"", (ImPlotColormap)(-1));
				return ret;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = ColormapSlider((byte*)plabel, t, (Vector4*)(default), (string)"", (ImPlotColormap)(-1));
				return ret;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColormapSliderNative((byte*)plabel, t, (Vector4*)(default), format, (ImPlotColormap)(-1));
				return ret != 0;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, Vector4* output, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = ColormapSlider((byte*)plabel, t, output, (string)"", cmap);
				return ret;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = ColormapSlider((byte*)plabel, t, (Vector4*)(default), (string)"", cmap);
				return ret;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColormapSliderNative((byte*)plabel, t, (Vector4*)(default), format, cmap);
				return ret != 0;
			}
		}

		public static bool ColormapSlider(string label, float* t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColormapSliderNative(pStr0, t, output, format, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool ColormapSlider(string label, float* t, Vector4* output, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColormapSliderNative(pStr0, t, output, format, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool ColormapSlider(string label, float* t, Vector4* output)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = ColormapSlider(pStr0, t, output, (string)"", (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static bool ColormapSlider(string label, float* t)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = ColormapSlider(pStr0, t, (Vector4*)(default), (string)"", (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static bool ColormapSlider(string label, float* t, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColormapSliderNative(pStr0, t, (Vector4*)(default), format, (ImPlotColormap)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool ColormapSlider(string label, float* t, Vector4* output, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = ColormapSlider(pStr0, t, output, (string)"", cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static bool ColormapSlider(string label, float* t, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = ColormapSlider(pStr0, t, (Vector4*)(default), (string)"", cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static bool ColormapSlider(string label, float* t, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColormapSliderNative(pStr0, t, (Vector4*)(default), format, cmap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool ColormapSlider(byte* label, ref float t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			fixed (float* pt = &t)
			{
				byte ret = ColormapSliderNative(label, (float*)pt, output, format, cmap);
				return ret != 0;
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, Vector4* output, byte* format)
		{
			fixed (float* pt = &t)
			{
				byte ret = ColormapSliderNative(label, (float*)pt, output, format, (ImPlotColormap)(-1));
				return ret != 0;
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, Vector4* output)
		{
			fixed (float* pt = &t)
			{
				bool ret = ColormapSlider(label, (float*)pt, output, (string)"", (ImPlotColormap)(-1));
				return ret;
			}
		}

		public static bool ColormapSlider(byte* label, ref float t)
		{
			fixed (float* pt = &t)
			{
				bool ret = ColormapSlider(label, (float*)pt, (Vector4*)(default), (string)"", (ImPlotColormap)(-1));
				return ret;
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, byte* format)
		{
			fixed (float* pt = &t)
			{
				byte ret = ColormapSliderNative(label, (float*)pt, (Vector4*)(default), format, (ImPlotColormap)(-1));
				return ret != 0;
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, Vector4* output, ImPlotColormap cmap)
		{
			fixed (float* pt = &t)
			{
				bool ret = ColormapSlider(label, (float*)pt, output, (string)"", cmap);
				return ret;
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, ImPlotColormap cmap)
		{
			fixed (float* pt = &t)
			{
				bool ret = ColormapSlider(label, (float*)pt, (Vector4*)(default), (string)"", cmap);
				return ret;
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, byte* format, ImPlotColormap cmap)
		{
			fixed (float* pt = &t)
			{
				byte ret = ColormapSliderNative(label, (float*)pt, (Vector4*)(default), format, cmap);
				return ret != 0;
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					byte ret = ColormapSliderNative((byte*)plabel, (float*)pt, output, format, cmap);
					return ret != 0;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, Vector4* output, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					byte ret = ColormapSliderNative((byte*)plabel, (float*)pt, output, format, (ImPlotColormap)(-1));
					return ret != 0;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, Vector4* output)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					bool ret = ColormapSlider((byte*)plabel, (float*)pt, output, (string)"", (ImPlotColormap)(-1));
					return ret;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					bool ret = ColormapSlider((byte*)plabel, (float*)pt, (Vector4*)(default), (string)"", (ImPlotColormap)(-1));
					return ret;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					byte ret = ColormapSliderNative((byte*)plabel, (float*)pt, (Vector4*)(default), format, (ImPlotColormap)(-1));
					return ret != 0;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, Vector4* output, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					bool ret = ColormapSlider((byte*)plabel, (float*)pt, output, (string)"", cmap);
					return ret;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					bool ret = ColormapSlider((byte*)plabel, (float*)pt, (Vector4*)(default), (string)"", cmap);
					return ret;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					byte ret = ColormapSliderNative((byte*)plabel, (float*)pt, (Vector4*)(default), format, cmap);
					return ret != 0;
				}
			}
		}

		public static bool ColormapSlider(string label, ref float t, Vector4* output, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pt = &t)
			{
				byte ret = ColormapSliderNative(pStr0, (float*)pt, output, format, cmap);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool ColormapSlider(string label, ref float t, Vector4* output, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pt = &t)
			{
				byte ret = ColormapSliderNative(pStr0, (float*)pt, output, format, (ImPlotColormap)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool ColormapSlider(string label, ref float t, Vector4* output)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pt = &t)
			{
				bool ret = ColormapSlider(pStr0, (float*)pt, output, (string)"", (ImPlotColormap)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static bool ColormapSlider(string label, ref float t)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pt = &t)
			{
				bool ret = ColormapSlider(pStr0, (float*)pt, (Vector4*)(default), (string)"", (ImPlotColormap)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static bool ColormapSlider(string label, ref float t, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pt = &t)
			{
				byte ret = ColormapSliderNative(pStr0, (float*)pt, (Vector4*)(default), format, (ImPlotColormap)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool ColormapSlider(string label, ref float t, Vector4* output, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pt = &t)
			{
				bool ret = ColormapSlider(pStr0, (float*)pt, output, (string)"", cmap);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static bool ColormapSlider(string label, ref float t, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pt = &t)
			{
				bool ret = ColormapSlider(pStr0, (float*)pt, (Vector4*)(default), (string)"", cmap);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static bool ColormapSlider(string label, ref float t, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pt = &t)
			{
				byte ret = ColormapSliderNative(pStr0, (float*)pt, (Vector4*)(default), format, cmap);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool ColormapSlider(byte* label, float* t, ref Vector4 output, byte* format, ImPlotColormap cmap)
		{
			fixed (Vector4* poutput = &output)
			{
				byte ret = ColormapSliderNative(label, t, (Vector4*)poutput, format, cmap);
				return ret != 0;
			}
		}

		public static bool ColormapSlider(byte* label, float* t, ref Vector4 output, byte* format)
		{
			fixed (Vector4* poutput = &output)
			{
				byte ret = ColormapSliderNative(label, t, (Vector4*)poutput, format, (ImPlotColormap)(-1));
				return ret != 0;
			}
		}

		public static bool ColormapSlider(byte* label, float* t, ref Vector4 output)
		{
			fixed (Vector4* poutput = &output)
			{
				bool ret = ColormapSlider(label, t, (Vector4*)poutput, (string)"", (ImPlotColormap)(-1));
				return ret;
			}
		}

		public static bool ColormapSlider(byte* label, float* t, ref Vector4 output, ImPlotColormap cmap)
		{
			fixed (Vector4* poutput = &output)
			{
				bool ret = ColormapSlider(label, t, (Vector4*)poutput, (string)"", cmap);
				return ret;
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, ref Vector4 output, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (Vector4* poutput = &output)
				{
					byte ret = ColormapSliderNative((byte*)plabel, t, (Vector4*)poutput, format, cmap);
					return ret != 0;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, ref Vector4 output, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (Vector4* poutput = &output)
				{
					byte ret = ColormapSliderNative((byte*)plabel, t, (Vector4*)poutput, format, (ImPlotColormap)(-1));
					return ret != 0;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, ref Vector4 output)
		{
			fixed (byte* plabel = &label)
			{
				fixed (Vector4* poutput = &output)
				{
					bool ret = ColormapSlider((byte*)plabel, t, (Vector4*)poutput, (string)"", (ImPlotColormap)(-1));
					return ret;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, float* t, ref Vector4 output, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (Vector4* poutput = &output)
				{
					bool ret = ColormapSlider((byte*)plabel, t, (Vector4*)poutput, (string)"", cmap);
					return ret;
				}
			}
		}

		public static bool ColormapSlider(string label, float* t, ref Vector4 output, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* poutput = &output)
			{
				byte ret = ColormapSliderNative(pStr0, t, (Vector4*)poutput, format, cmap);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool ColormapSlider(string label, float* t, ref Vector4 output, byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* poutput = &output)
			{
				byte ret = ColormapSliderNative(pStr0, t, (Vector4*)poutput, format, (ImPlotColormap)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool ColormapSlider(string label, float* t, ref Vector4 output)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* poutput = &output)
			{
				bool ret = ColormapSlider(pStr0, t, (Vector4*)poutput, (string)"", (ImPlotColormap)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static bool ColormapSlider(string label, float* t, ref Vector4 output, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* poutput = &output)
			{
				bool ret = ColormapSlider(pStr0, t, (Vector4*)poutput, (string)"", cmap);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, ref Vector4 output, byte* format, ImPlotColormap cmap)
		{
			fixed (float* pt = &t)
			{
				fixed (Vector4* poutput = &output)
				{
					byte ret = ColormapSliderNative(label, (float*)pt, (Vector4*)poutput, format, cmap);
					return ret != 0;
				}
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, ref Vector4 output, byte* format)
		{
			fixed (float* pt = &t)
			{
				fixed (Vector4* poutput = &output)
				{
					byte ret = ColormapSliderNative(label, (float*)pt, (Vector4*)poutput, format, (ImPlotColormap)(-1));
					return ret != 0;
				}
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, ref Vector4 output)
		{
			fixed (float* pt = &t)
			{
				fixed (Vector4* poutput = &output)
				{
					bool ret = ColormapSlider(label, (float*)pt, (Vector4*)poutput, (string)"", (ImPlotColormap)(-1));
					return ret;
				}
			}
		}

		public static bool ColormapSlider(byte* label, ref float t, ref Vector4 output, ImPlotColormap cmap)
		{
			fixed (float* pt = &t)
			{
				fixed (Vector4* poutput = &output)
				{
					bool ret = ColormapSlider(label, (float*)pt, (Vector4*)poutput, (string)"", cmap);
					return ret;
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, ref Vector4 output, byte* format, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					fixed (Vector4* poutput = &output)
					{
						byte ret = ColormapSliderNative((byte*)plabel, (float*)pt, (Vector4*)poutput, format, cmap);
						return ret != 0;
					}
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, ref Vector4 output, byte* format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					fixed (Vector4* poutput = &output)
					{
						byte ret = ColormapSliderNative((byte*)plabel, (float*)pt, (Vector4*)poutput, format, (ImPlotColormap)(-1));
						return ret != 0;
					}
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, ref Vector4 output)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					fixed (Vector4* poutput = &output)
					{
						bool ret = ColormapSlider((byte*)plabel, (float*)pt, (Vector4*)poutput, (string)"", (ImPlotColormap)(-1));
						return ret;
					}
				}
			}
		}

		public static bool ColormapSlider(ref byte label, ref float t, ref Vector4 output, ImPlotColormap cmap)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pt = &t)
				{
					fixed (Vector4* poutput = &output)
					{
						bool ret = ColormapSlider((byte*)plabel, (float*)pt, (Vector4*)poutput, (string)"", cmap);
						return ret;
					}
				}
			}
		}

		public static bool ColormapSlider(string label, ref float t, ref Vector4 output, byte* format, ImPlotColormap cmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pt = &t)
			{
				fixed (Vector4* poutput = &output)
				{
					byte ret = ColormapSliderNative(pStr0, (float*)pt, (Vector4*)poutput, format, cmap);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}
	}
}
