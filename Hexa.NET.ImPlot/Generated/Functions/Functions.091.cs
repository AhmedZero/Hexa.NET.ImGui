// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot
{
	public unsafe partial class ImPlot
	{

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, flags, outClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragRectNative(id, x1, y1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragRectNative(id, x1, y1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragRectNative(id, x1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					byte ret = DragRectNative(id, x1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, held);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)(default));
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, bool* held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, held);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* pheld = &held)
			{
				byte ret = DragRectNative(id, x1, y1, x2, y2, col, flags, outClicked, outHovered, (bool*)pheld);
				return ret != 0;
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* pheld = &held)
			{
				byte ret = DragRectNative(id, x1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
				return ret != 0;
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, flags, outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, flags, outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, flags, outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, flags, outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, flags, outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, flags, outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, flags, outClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, flags, outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, flags, outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, flags, outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, flags, outClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, flags, outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, flags, outClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, outClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, outClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, y1, x2, y2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, outHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, bool* outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, outHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, y1, x2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				fixed (bool* pheld = &held)
				{
					byte ret = DragRectNative(id, x1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
					return ret != 0;
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, outClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, bool* outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), outClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (bool* poutClicked = &outClicked)
			{
				fixed (bool* poutHovered = &outHovered)
				{
					fixed (bool* pheld = &held)
					{
						byte ret = DragRectNative(id, x1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
						return ret != 0;
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, (double*)px1, y1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, double* y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, y2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py2 = &y2)
			{
				fixed (bool* poutClicked = &outClicked)
				{
					fixed (bool* poutHovered = &outHovered)
					{
						fixed (bool* pheld = &held)
						{
							byte ret = DragRectNative(id, x1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, (double*)px1, y1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, double* x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, (double*)py1, x2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px2 = &x2)
			{
				fixed (double* py2 = &y2)
				{
					fixed (bool* poutClicked = &outClicked)
					{
						fixed (bool* poutHovered = &outHovered)
						{
							fixed (bool* pheld = &held)
							{
								byte ret = DragRectNative(id, x1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, double* y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, (double*)px1, y1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, double* x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* py1 = &y1)
			{
				fixed (double* px2 = &x2)
				{
					fixed (double* py2 = &y2)
					{
						fixed (bool* poutClicked = &outClicked)
						{
							fixed (bool* poutHovered = &outHovered)
							{
								fixed (bool* pheld = &held)
								{
									byte ret = DragRectNative(id, x1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
									return ret != 0;
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ImPlotDragToolFlags flags, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									fixed (bool* pheld = &held)
									{
										byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, flags, (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
										return ret != 0;
									}
								}
							}
						}
					}
				}
			}
		}

		public static bool DragRect(int id, ref double x1, ref double y1, ref double x2, ref double y2, Vector4 col, ref bool outClicked, ref bool outHovered, ref bool held)
		{
			fixed (double* px1 = &x1)
			{
				fixed (double* py1 = &y1)
				{
					fixed (double* px2 = &x2)
					{
						fixed (double* py2 = &y2)
						{
							fixed (bool* poutClicked = &outClicked)
							{
								fixed (bool* poutHovered = &outHovered)
								{
									fixed (bool* pheld = &held)
									{
										byte ret = DragRectNative(id, (double*)px1, (double*)py1, (double*)px2, (double*)py2, col, (ImPlotDragToolFlags)(0), (bool*)poutClicked, (bool*)poutHovered, (bool*)pheld);
										return ret != 0;
									}
								}
							}
						}
					}
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_Annotation_Bool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AnnotationNative(double x, double y, Vector4 col, Vector2 pixOffset, byte clamp, byte round);

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, bool round)
		{
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, round ? (byte)1 : (byte)0);
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp)
		{
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte)(0));
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_Annotation_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AnnotationNative(double x, double y, Vector4 col, Vector2 pixOffset, byte clamp, byte* fmt);

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, byte* fmt)
		{
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, fmt);
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte*)pfmt);
			}
		}

		public static void Annotation(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AnnotationNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_AnnotationV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AnnotationVNative(double x, double y, Vector4 col, Vector2 pixOffset, byte clamp, byte* fmt, nuint args);

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, byte* fmt, nuint args)
		{
			AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, fmt, args);
		}

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, (byte*)pfmt, args);
			}
		}

		public static void AnnotationV(double x, double y, Vector4 col, Vector2 pixOffset, bool clamp, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AnnotationVNative(x, y, col, pixOffset, clamp ? (byte)1 : (byte)0, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagX_Bool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagXNative(double x, Vector4 col, byte round);

		public static void TagX(double x, Vector4 col, bool round)
		{
			TagXNative(x, col, round ? (byte)1 : (byte)0);
		}

		public static void TagX(double x, Vector4 col)
		{
			TagXNative(x, col, (byte)(0));
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagX_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagXNative(double x, Vector4 col, byte* fmt);

		public static void TagX(double x, Vector4 col, byte* fmt)
		{
			TagXNative(x, col, fmt);
		}

		public static void TagX(double x, Vector4 col, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagXNative(x, col, (byte*)pfmt);
			}
		}

		public static void TagX(double x, Vector4 col, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagXNative(x, col, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagXV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagXVNative(double x, Vector4 col, byte* fmt, nuint args);

		public static void TagXV(double x, Vector4 col, byte* fmt, nuint args)
		{
			TagXVNative(x, col, fmt, args);
		}

		public static void TagXV(double x, Vector4 col, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagXVNative(x, col, (byte*)pfmt, args);
			}
		}

		public static void TagXV(double x, Vector4 col, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagXVNative(x, col, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagY_Bool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagYNative(double y, Vector4 col, byte round);

		public static void TagY(double y, Vector4 col, bool round)
		{
			TagYNative(y, col, round ? (byte)1 : (byte)0);
		}

		public static void TagY(double y, Vector4 col)
		{
			TagYNative(y, col, (byte)(0));
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagY_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagYNative(double y, Vector4 col, byte* fmt);

		public static void TagY(double y, Vector4 col, byte* fmt)
		{
			TagYNative(y, col, fmt);
		}

		public static void TagY(double y, Vector4 col, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagYNative(y, col, (byte*)pfmt);
			}
		}

		public static void TagY(double y, Vector4 col, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagYNative(y, col, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_TagYV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TagYVNative(double y, Vector4 col, byte* fmt, nuint args);

		public static void TagYV(double y, Vector4 col, byte* fmt, nuint args)
		{
			TagYVNative(y, col, fmt, args);
		}

		public static void TagYV(double y, Vector4 col, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TagYVNative(y, col, (byte*)pfmt, args);
			}
		}

		public static void TagYV(double y, Vector4 col, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TagYVNative(y, col, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_SetAxis")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetAxisNative(ImAxis axis);

		public static void SetAxis(ImAxis axis)
		{
			SetAxisNative(axis);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_SetAxes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetAxesNative(ImAxis xAxis, ImAxis yAxis);

		public static void SetAxes(ImAxis xAxis, ImAxis yAxis)
		{
			SetAxesNative(xAxis, yAxis);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PixelsToPlot_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PixelsToPlotNative(ImPlotPoint* output, Vector2 pix, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotPoint PixelsToPlot(Vector2 pix)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, pix, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotPoint PixelsToPlot(Vector2 pix, ImAxis xAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, pix, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, Vector2 pix, ImAxis yAxis)
		{
			PixelsToPlotNative(output, pix, (ImAxis)(-1), yAxis);
		}

		public static void PixelsToPlot(ImPlotPointPtr output, Vector2 pix)
		{
			PixelsToPlotNative(output, pix, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotPoint PixelsToPlot(Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, pix, xAxis, yAxis);
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			PixelsToPlotNative(output, pix, xAxis, yAxis);
		}

		public static void PixelsToPlot(ref ImPlotPoint output, Vector2 pix, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, pix, xAxis, yAxis);
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, Vector2 pix, ImAxis xAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, pix, xAxis, (ImAxis)(-1));
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, Vector2 pix)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, pix, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PixelsToPlot_Float")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PixelsToPlotNative(ImPlotPoint* output, float x, float y, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotPoint PixelsToPlot(float x, float y)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, x, y, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotPoint PixelsToPlot(float x, float y, ImAxis xAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, x, y, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, float x, float y, ImAxis yAxis)
		{
			PixelsToPlotNative(output, x, y, (ImAxis)(-1), yAxis);
		}

		public static void PixelsToPlot(ImPlotPointPtr output, float x, float y)
		{
			PixelsToPlotNative(output, x, y, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotPoint PixelsToPlot(float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotPoint ret;
			PixelsToPlotNative(&ret, x, y, xAxis, yAxis);
			return ret;
		}

		public static void PixelsToPlot(ImPlotPointPtr output, float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			PixelsToPlotNative(output, x, y, xAxis, yAxis);
		}

		public static void PixelsToPlot(ref ImPlotPoint output, float x, float y, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, x, y, xAxis, yAxis);
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, float x, float y, ImAxis xAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, x, y, xAxis, (ImAxis)(-1));
			}
		}

		public static void PixelsToPlot(ref ImPlotPoint output, float x, float y)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				PixelsToPlotNative((ImPlotPoint*)poutput, x, y, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PlotToPixels_PlotPoInt")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PlotToPixelsNative(Vector2* output, ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis);

		public static Vector2 PlotToPixels(ImPlotPoint plt)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, plt, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static Vector2 PlotToPixels(ImPlotPoint plt, ImAxis xAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, plt, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PlotToPixels(Vector2* output, ImPlotPoint plt, ImAxis yAxis)
		{
			PlotToPixelsNative(output, plt, (ImAxis)(-1), yAxis);
		}

		public static void PlotToPixels(Vector2* output, ImPlotPoint plt)
		{
			PlotToPixelsNative(output, plt, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static Vector2 PlotToPixels(ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, plt, xAxis, yAxis);
			return ret;
		}

		public static void PlotToPixels(Vector2* output, ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			PlotToPixelsNative(output, plt, xAxis, yAxis);
		}

		public static void PlotToPixels(ref Vector2 output, ImPlotPoint plt, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, plt, xAxis, yAxis);
			}
		}

		public static void PlotToPixels(ref Vector2 output, ImPlotPoint plt, ImAxis xAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, plt, xAxis, (ImAxis)(-1));
			}
		}

		public static void PlotToPixels(ref Vector2 output, ImPlotPoint plt)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, plt, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_PlotToPixels_double")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PlotToPixelsNative(Vector2* output, double x, double y, ImAxis xAxis, ImAxis yAxis);

		public static Vector2 PlotToPixels(double x, double y)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, x, y, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static Vector2 PlotToPixels(double x, double y, ImAxis xAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, x, y, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void PlotToPixels(Vector2* output, double x, double y, ImAxis yAxis)
		{
			PlotToPixelsNative(output, x, y, (ImAxis)(-1), yAxis);
		}

		public static void PlotToPixels(Vector2* output, double x, double y)
		{
			PlotToPixelsNative(output, x, y, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static Vector2 PlotToPixels(double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			Vector2 ret;
			PlotToPixelsNative(&ret, x, y, xAxis, yAxis);
			return ret;
		}

		public static void PlotToPixels(Vector2* output, double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			PlotToPixelsNative(output, x, y, xAxis, yAxis);
		}

		public static void PlotToPixels(ref Vector2 output, double x, double y, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, x, y, xAxis, yAxis);
			}
		}

		public static void PlotToPixels(ref Vector2 output, double x, double y, ImAxis xAxis)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, x, y, xAxis, (ImAxis)(-1));
			}
		}

		public static void PlotToPixels(ref Vector2 output, double x, double y)
		{
			fixed (Vector2* poutput = &output)
			{
				PlotToPixelsNative((Vector2*)poutput, x, y, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotPos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotPosNative(Vector2* output);

		public static Vector2 GetPlotPos()
		{
			Vector2 ret;
			GetPlotPosNative(&ret);
			return ret;
		}

		public static void GetPlotPos(Vector2* output)
		{
			GetPlotPosNative(output);
		}

		public static void GetPlotPos(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetPlotPosNative((Vector2*)poutput);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotSizeNative(Vector2* output);

		public static Vector2 GetPlotSize()
		{
			Vector2 ret;
			GetPlotSizeNative(&ret);
			return ret;
		}

		public static void GetPlotSize(Vector2* output)
		{
			GetPlotSizeNative(output);
		}

		public static void GetPlotSize(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetPlotSizeNative((Vector2*)poutput);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotMousePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotMousePosNative(ImPlotPoint* output, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotPoint GetPlotMousePos()
		{
			ImPlotPoint ret;
			GetPlotMousePosNative(&ret, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotPoint GetPlotMousePos(ImAxis xAxis)
		{
			ImPlotPoint ret;
			GetPlotMousePosNative(&ret, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void GetPlotMousePos(ImPlotPointPtr output, ImAxis yAxis)
		{
			GetPlotMousePosNative(output, (ImAxis)(-1), yAxis);
		}

		public static void GetPlotMousePos(ImPlotPointPtr output)
		{
			GetPlotMousePosNative(output, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotPoint GetPlotMousePos(ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotPoint ret;
			GetPlotMousePosNative(&ret, xAxis, yAxis);
			return ret;
		}

		public static void GetPlotMousePos(ImPlotPointPtr output, ImAxis xAxis, ImAxis yAxis)
		{
			GetPlotMousePosNative(output, xAxis, yAxis);
		}

		public static void GetPlotMousePos(ref ImPlotPoint output, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				GetPlotMousePosNative((ImPlotPoint*)poutput, xAxis, yAxis);
			}
		}

		public static void GetPlotMousePos(ref ImPlotPoint output, ImAxis xAxis)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				GetPlotMousePosNative((ImPlotPoint*)poutput, xAxis, (ImAxis)(-1));
			}
		}

		public static void GetPlotMousePos(ref ImPlotPoint output)
		{
			fixed (ImPlotPoint* poutput = &output)
			{
				GetPlotMousePosNative((ImPlotPoint*)poutput, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotLimits")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotLimitsNative(ImPlotRect* output, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotRect GetPlotLimits()
		{
			ImPlotRect ret;
			GetPlotLimitsNative(&ret, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotRect GetPlotLimits(ImAxis xAxis)
		{
			ImPlotRect ret;
			GetPlotLimitsNative(&ret, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void GetPlotLimits(ImPlotRectPtr output, ImAxis yAxis)
		{
			GetPlotLimitsNative(output, (ImAxis)(-1), yAxis);
		}

		public static void GetPlotLimits(ImPlotRectPtr output)
		{
			GetPlotLimitsNative(output, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotRect GetPlotLimits(ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotRect ret;
			GetPlotLimitsNative(&ret, xAxis, yAxis);
			return ret;
		}

		public static void GetPlotLimits(ImPlotRectPtr output, ImAxis xAxis, ImAxis yAxis)
		{
			GetPlotLimitsNative(output, xAxis, yAxis);
		}

		public static void GetPlotLimits(ref ImPlotRect output, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotLimitsNative((ImPlotRect*)poutput, xAxis, yAxis);
			}
		}

		public static void GetPlotLimits(ref ImPlotRect output, ImAxis xAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotLimitsNative((ImPlotRect*)poutput, xAxis, (ImAxis)(-1));
			}
		}

		public static void GetPlotLimits(ref ImPlotRect output)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotLimitsNative((ImPlotRect*)poutput, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_IsPlotHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsPlotHoveredNative();

		public static bool IsPlotHovered()
		{
			byte ret = IsPlotHoveredNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_IsAxisHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsAxisHoveredNative(ImAxis axis);

		public static bool IsAxisHovered(ImAxis axis)
		{
			byte ret = IsAxisHoveredNative(axis);
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_IsSubplotsHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsSubplotsHoveredNative();

		public static bool IsSubplotsHovered()
		{
			byte ret = IsSubplotsHoveredNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_IsPlotSelected")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsPlotSelectedNative();

		public static bool IsPlotSelected()
		{
			byte ret = IsPlotSelectedNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_GetPlotSelection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPlotSelectionNative(ImPlotRect* output, ImAxis xAxis, ImAxis yAxis);

		public static ImPlotRect GetPlotSelection()
		{
			ImPlotRect ret;
			GetPlotSelectionNative(&ret, (ImAxis)(-1), (ImAxis)(-1));
			return ret;
		}

		public static ImPlotRect GetPlotSelection(ImAxis xAxis)
		{
			ImPlotRect ret;
			GetPlotSelectionNative(&ret, xAxis, (ImAxis)(-1));
			return ret;
		}

		public static void GetPlotSelection(ImPlotRectPtr output, ImAxis yAxis)
		{
			GetPlotSelectionNative(output, (ImAxis)(-1), yAxis);
		}

		public static void GetPlotSelection(ImPlotRectPtr output)
		{
			GetPlotSelectionNative(output, (ImAxis)(-1), (ImAxis)(-1));
		}

		public static ImPlotRect GetPlotSelection(ImAxis xAxis, ImAxis yAxis)
		{
			ImPlotRect ret;
			GetPlotSelectionNative(&ret, xAxis, yAxis);
			return ret;
		}

		public static void GetPlotSelection(ImPlotRectPtr output, ImAxis xAxis, ImAxis yAxis)
		{
			GetPlotSelectionNative(output, xAxis, yAxis);
		}

		public static void GetPlotSelection(ref ImPlotRect output, ImAxis xAxis, ImAxis yAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotSelectionNative((ImPlotRect*)poutput, xAxis, yAxis);
			}
		}

		public static void GetPlotSelection(ref ImPlotRect output, ImAxis xAxis)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotSelectionNative((ImPlotRect*)poutput, xAxis, (ImAxis)(-1));
			}
		}

		public static void GetPlotSelection(ref ImPlotRect output)
		{
			fixed (ImPlotRect* poutput = &output)
			{
				GetPlotSelectionNative((ImPlotRect*)poutput, (ImAxis)(-1), (ImAxis)(-1));
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_CancelPlotSelection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void CancelPlotSelectionNative();

		public static void CancelPlotSelection()
		{
			CancelPlotSelectionNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_HideNextItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void HideNextItemNative(byte hidden, ImPlotCond cond);

		public static void HideNextItem(bool hidden, ImPlotCond cond)
		{
			HideNextItemNative(hidden ? (byte)1 : (byte)0, cond);
		}

		public static void HideNextItem(bool hidden)
		{
			HideNextItemNative(hidden ? (byte)1 : (byte)0, (ImPlotCond)(ImPlotCond.Once));
		}

		public static void HideNextItem()
		{
			HideNextItemNative((byte)(1), (ImPlotCond)(ImPlotCond.Once));
		}

		public static void HideNextItem(ImPlotCond cond)
		{
			HideNextItemNative((byte)(1), cond);
		}

		[LibraryImport(LibName, EntryPoint = "ImPlot_BeginAlignedPlots")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginAlignedPlotsNative(byte* groupId, byte vertical);

		public static bool BeginAlignedPlots(byte* groupId, bool vertical)
		{
			byte ret = BeginAlignedPlotsNative(groupId, vertical ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool BeginAlignedPlots(byte* groupId)
		{
			byte ret = BeginAlignedPlotsNative(groupId, (byte)(1));
			return ret != 0;
		}
	}
}
