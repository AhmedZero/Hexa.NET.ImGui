// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImNodes
{
	public unsafe partial class ImNodes
	{
		internal const string LibName = "cimnodes";

		[LibraryImport(LibName, EntryPoint = "EmulateThreeButtonMouse_EmulateThreeButtonMouse")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial EmulateThreeButtonMouse* EmulateThreeButtonMouseNative();

		public static EmulateThreeButtonMousePtr EmulateThreeButtonMouse()
		{
			EmulateThreeButtonMousePtr ret = EmulateThreeButtonMouseNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "EmulateThreeButtonMouse_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(EmulateThreeButtonMouse* self);

		public static void Destroy(EmulateThreeButtonMousePtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref EmulateThreeButtonMouse self)
		{
			fixed (EmulateThreeButtonMouse* pself = &self)
			{
				DestroyNative((EmulateThreeButtonMouse*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "LinkDetachWithModifierClick_LinkDetachWithModifierClick")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial LinkDetachWithModifierClick* LinkDetachWithModifierClickNative();

		public static LinkDetachWithModifierClickPtr LinkDetachWithModifierClick()
		{
			LinkDetachWithModifierClickPtr ret = LinkDetachWithModifierClickNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "LinkDetachWithModifierClick_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(LinkDetachWithModifierClick* self);

		public static void Destroy(LinkDetachWithModifierClickPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref LinkDetachWithModifierClick self)
		{
			fixed (LinkDetachWithModifierClick* pself = &self)
			{
				DestroyNative((LinkDetachWithModifierClick*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "MultipleSelectModifier_MultipleSelectModifier")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial MultipleSelectModifier* MultipleSelectModifierNative();

		public static MultipleSelectModifierPtr MultipleSelectModifier()
		{
			MultipleSelectModifierPtr ret = MultipleSelectModifierNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "MultipleSelectModifier_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(MultipleSelectModifier* self);

		public static void Destroy(MultipleSelectModifierPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref MultipleSelectModifier self)
		{
			fixed (MultipleSelectModifier* pself = &self)
			{
				DestroyNative((MultipleSelectModifier*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodesIO_ImNodesIO")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImNodesIO* ImNodesIONative();

		public static ImNodesIOPtr ImNodesIO()
		{
			ImNodesIOPtr ret = ImNodesIONative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodesIO_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(ImNodesIO* self);

		public static void Destroy(ImNodesIOPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImNodesIO self)
		{
			fixed (ImNodesIO* pself = &self)
			{
				DestroyNative((ImNodesIO*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodesStyle_ImNodesStyle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImNodesStyle* ImNodesStyleNative();

		public static ImNodesStylePtr ImNodesStyle()
		{
			ImNodesStylePtr ret = ImNodesStyleNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodesStyle_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyNative(ImNodesStyle* self);

		public static void Destroy(ImNodesStylePtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImNodesStyle self)
		{
			fixed (ImNodesStyle* pself = &self)
			{
				DestroyNative((ImNodesStyle*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SetImGuiContext")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetImGuiContextNative(ImGuiContext* ctx);

		public static void SetImGuiContext(ImGuiContextPtr ctx)
		{
			SetImGuiContextNative(ctx);
		}

		public static void SetImGuiContext(ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				SetImGuiContextNative((ImGuiContext*)pctx);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_CreateContext")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImNodesContext* CreateContextNative();

		public static ImNodesContextPtr CreateContext()
		{
			ImNodesContextPtr ret = CreateContextNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_DestroyContext")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyContextNative(ImNodesContext* ctx);

		public static void DestroyContext(ImNodesContextPtr ctx)
		{
			DestroyContextNative(ctx);
		}

		public static void DestroyContext()
		{
			DestroyContextNative((ImNodesContext*)(default));
		}

		public static void DestroyContext(ref ImNodesContext ctx)
		{
			fixed (ImNodesContext* pctx = &ctx)
			{
				DestroyContextNative((ImNodesContext*)pctx);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_GetCurrentContext")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImNodesContext* GetCurrentContextNative();

		public static ImNodesContextPtr GetCurrentContext()
		{
			ImNodesContextPtr ret = GetCurrentContextNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SetCurrentContext")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetCurrentContextNative(ImNodesContext* ctx);

		public static void SetCurrentContext(ImNodesContextPtr ctx)
		{
			SetCurrentContextNative(ctx);
		}

		public static void SetCurrentContext(ref ImNodesContext ctx)
		{
			fixed (ImNodesContext* pctx = &ctx)
			{
				SetCurrentContextNative((ImNodesContext*)pctx);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EditorContextCreate")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImNodesEditorContext* EditorContextCreateNative();

		public static ImNodesEditorContextPtr EditorContextCreate()
		{
			ImNodesEditorContextPtr ret = EditorContextCreateNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EditorContextFree")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EditorContextFreeNative(ImNodesEditorContext* noname1);

		public static void EditorContextFree(ImNodesEditorContextPtr noname1)
		{
			EditorContextFreeNative(noname1);
		}

		public static void EditorContextFree(ref ImNodesEditorContext noname1)
		{
			fixed (ImNodesEditorContext* pnoname1 = &noname1)
			{
				EditorContextFreeNative((ImNodesEditorContext*)pnoname1);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EditorContextSet")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EditorContextSetNative(ImNodesEditorContext* noname1);

		public static void EditorContextSet(ImNodesEditorContextPtr noname1)
		{
			EditorContextSetNative(noname1);
		}

		public static void EditorContextSet(ref ImNodesEditorContext noname1)
		{
			fixed (ImNodesEditorContext* pnoname1 = &noname1)
			{
				EditorContextSetNative((ImNodesEditorContext*)pnoname1);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EditorContextGetPanning")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EditorContextGetPanningNative(Vector2* output);

		public static Vector2 EditorContextGetPanning()
		{
			Vector2 ret;
			EditorContextGetPanningNative(&ret);
			return ret;
		}

		public static void EditorContextGetPanning(Vector2* output)
		{
			EditorContextGetPanningNative(output);
		}

		public static void EditorContextGetPanning(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				EditorContextGetPanningNative((Vector2*)poutput);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EditorContextResetPanning")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EditorContextResetPanningNative(Vector2 pos);

		public static void EditorContextResetPanning(Vector2 pos)
		{
			EditorContextResetPanningNative(pos);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EditorContextMoveToNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EditorContextMoveToNodeNative(int nodeId);

		public static void EditorContextMoveToNode(int nodeId)
		{
			EditorContextMoveToNodeNative(nodeId);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_GetIO")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImNodesIO* GetIONative();

		public static ImNodesIOPtr GetIO()
		{
			ImNodesIOPtr ret = GetIONative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_GetStyle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImNodesStyle* GetStyleNative();

		public static ImNodesStylePtr GetStyle()
		{
			ImNodesStylePtr ret = GetStyleNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_StyleColorsDark")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void StyleColorsDarkNative(ImNodesStyle* dest);

		public static void StyleColorsDark(ImNodesStylePtr dest)
		{
			StyleColorsDarkNative(dest);
		}

		public static void StyleColorsDark()
		{
			StyleColorsDarkNative((ImNodesStyle*)(default));
		}

		public static void StyleColorsDark(ref ImNodesStyle dest)
		{
			fixed (ImNodesStyle* pdest = &dest)
			{
				StyleColorsDarkNative((ImNodesStyle*)pdest);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_StyleColorsClassic")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void StyleColorsClassicNative(ImNodesStyle* dest);

		public static void StyleColorsClassic(ImNodesStylePtr dest)
		{
			StyleColorsClassicNative(dest);
		}

		public static void StyleColorsClassic()
		{
			StyleColorsClassicNative((ImNodesStyle*)(default));
		}

		public static void StyleColorsClassic(ref ImNodesStyle dest)
		{
			fixed (ImNodesStyle* pdest = &dest)
			{
				StyleColorsClassicNative((ImNodesStyle*)pdest);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_StyleColorsLight")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void StyleColorsLightNative(ImNodesStyle* dest);

		public static void StyleColorsLight(ImNodesStylePtr dest)
		{
			StyleColorsLightNative(dest);
		}

		public static void StyleColorsLight()
		{
			StyleColorsLightNative((ImNodesStyle*)(default));
		}

		public static void StyleColorsLight(ref ImNodesStyle dest)
		{
			fixed (ImNodesStyle* pdest = &dest)
			{
				StyleColorsLightNative((ImNodesStyle*)pdest);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_BeginNodeEditor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginNodeEditorNative();

		public static void BeginNodeEditor()
		{
			BeginNodeEditorNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EndNodeEditor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndNodeEditorNative();

		public static void EndNodeEditor()
		{
			EndNodeEditorNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_MiniMap")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void MiniMapNative(float minimapSizeFraction, ImNodesMiniMapLocation location, ImNodesMiniMapNodeHoveringCallback nodeHoveringCallback, ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData);

		public static void MiniMap(float minimapSizeFraction, ImNodesMiniMapLocation location, ImNodesMiniMapNodeHoveringCallback nodeHoveringCallback, ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData)
		{
			MiniMapNative(minimapSizeFraction, location, nodeHoveringCallback, nodeHoveringCallbackData);
		}

		public static void MiniMap(float minimapSizeFraction, ImNodesMiniMapLocation location, ImNodesMiniMapNodeHoveringCallback nodeHoveringCallback)
		{
			MiniMapNative(minimapSizeFraction, location, nodeHoveringCallback, (ImNodesMiniMapNodeHoveringCallbackUserData)(default));
		}

		public static void MiniMap(float minimapSizeFraction, ImNodesMiniMapLocation location)
		{
			MiniMapNative(minimapSizeFraction, location, (ImNodesMiniMapNodeHoveringCallback)(default), (ImNodesMiniMapNodeHoveringCallbackUserData)(default));
		}

		public static void MiniMap(float minimapSizeFraction)
		{
			MiniMapNative(minimapSizeFraction, (ImNodesMiniMapLocation)(ImNodesMiniMapLocation.TopLeft), (ImNodesMiniMapNodeHoveringCallback)(default), (ImNodesMiniMapNodeHoveringCallbackUserData)(default));
		}

		public static void MiniMap()
		{
			MiniMapNative((float)(0.2f), (ImNodesMiniMapLocation)(ImNodesMiniMapLocation.TopLeft), (ImNodesMiniMapNodeHoveringCallback)(default), (ImNodesMiniMapNodeHoveringCallbackUserData)(default));
		}

		public static void MiniMap(ImNodesMiniMapLocation location)
		{
			MiniMapNative((float)(0.2f), location, (ImNodesMiniMapNodeHoveringCallback)(default), (ImNodesMiniMapNodeHoveringCallbackUserData)(default));
		}

		public static void MiniMap(float minimapSizeFraction, ImNodesMiniMapNodeHoveringCallback nodeHoveringCallback)
		{
			MiniMapNative(minimapSizeFraction, (ImNodesMiniMapLocation)(ImNodesMiniMapLocation.TopLeft), nodeHoveringCallback, (ImNodesMiniMapNodeHoveringCallbackUserData)(default));
		}

		public static void MiniMap(ImNodesMiniMapNodeHoveringCallback nodeHoveringCallback)
		{
			MiniMapNative((float)(0.2f), (ImNodesMiniMapLocation)(ImNodesMiniMapLocation.TopLeft), nodeHoveringCallback, (ImNodesMiniMapNodeHoveringCallbackUserData)(default));
		}

		public static void MiniMap(ImNodesMiniMapLocation location, ImNodesMiniMapNodeHoveringCallback nodeHoveringCallback)
		{
			MiniMapNative((float)(0.2f), location, nodeHoveringCallback, (ImNodesMiniMapNodeHoveringCallbackUserData)(default));
		}

		public static void MiniMap(float minimapSizeFraction, ImNodesMiniMapLocation location, ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData)
		{
			MiniMapNative(minimapSizeFraction, location, (ImNodesMiniMapNodeHoveringCallback)(default), nodeHoveringCallbackData);
		}

		public static void MiniMap(float minimapSizeFraction, ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData)
		{
			MiniMapNative(minimapSizeFraction, (ImNodesMiniMapLocation)(ImNodesMiniMapLocation.TopLeft), (ImNodesMiniMapNodeHoveringCallback)(default), nodeHoveringCallbackData);
		}

		public static void MiniMap(ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData)
		{
			MiniMapNative((float)(0.2f), (ImNodesMiniMapLocation)(ImNodesMiniMapLocation.TopLeft), (ImNodesMiniMapNodeHoveringCallback)(default), nodeHoveringCallbackData);
		}

		public static void MiniMap(ImNodesMiniMapLocation location, ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData)
		{
			MiniMapNative((float)(0.2f), location, (ImNodesMiniMapNodeHoveringCallback)(default), nodeHoveringCallbackData);
		}

		public static void MiniMap(float minimapSizeFraction, ImNodesMiniMapNodeHoveringCallback nodeHoveringCallback, ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData)
		{
			MiniMapNative(minimapSizeFraction, (ImNodesMiniMapLocation)(ImNodesMiniMapLocation.TopLeft), nodeHoveringCallback, nodeHoveringCallbackData);
		}

		public static void MiniMap(ImNodesMiniMapNodeHoveringCallback nodeHoveringCallback, ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData)
		{
			MiniMapNative((float)(0.2f), (ImNodesMiniMapLocation)(ImNodesMiniMapLocation.TopLeft), nodeHoveringCallback, nodeHoveringCallbackData);
		}

		public static void MiniMap(ImNodesMiniMapLocation location, ImNodesMiniMapNodeHoveringCallback nodeHoveringCallback, ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData)
		{
			MiniMapNative((float)(0.2f), location, nodeHoveringCallback, nodeHoveringCallbackData);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_PushColorStyle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushColorStyleNative(ImNodesCol item, uint color);

		public static void PushColorStyle(ImNodesCol item, uint color)
		{
			PushColorStyleNative(item, color);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_PopColorStyle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PopColorStyleNative();

		public static void PopColorStyle()
		{
			PopColorStyleNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_PushStyleVar_Float")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushStyleVarNative(ImNodesStyleVar styleItem, float value);

		public static void PushStyleVar(ImNodesStyleVar styleItem, float value)
		{
			PushStyleVarNative(styleItem, value);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_PushStyleVar_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushStyleVarNative(ImNodesStyleVar styleItem, Vector2 value);

		public static void PushStyleVar(ImNodesStyleVar styleItem, Vector2 value)
		{
			PushStyleVarNative(styleItem, value);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_PopStyleVar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PopStyleVarNative(int count);

		public static void PopStyleVar(int count)
		{
			PopStyleVarNative(count);
		}

		public static void PopStyleVar()
		{
			PopStyleVarNative((int)(1));
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_BeginNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginNodeNative(int id);

		public static void BeginNode(int id)
		{
			BeginNodeNative(id);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EndNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndNodeNative();

		public static void EndNode()
		{
			EndNodeNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_GetNodeDimensions")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetNodeDimensionsNative(Vector2* output, int id);

		public static Vector2 GetNodeDimensions(int id)
		{
			Vector2 ret;
			GetNodeDimensionsNative(&ret, id);
			return ret;
		}

		public static void GetNodeDimensions(Vector2* output, int id)
		{
			GetNodeDimensionsNative(output, id);
		}

		public static void GetNodeDimensions(ref Vector2 output, int id)
		{
			fixed (Vector2* poutput = &output)
			{
				GetNodeDimensionsNative((Vector2*)poutput, id);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_BeginNodeTitleBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginNodeTitleBarNative();

		public static void BeginNodeTitleBar()
		{
			BeginNodeTitleBarNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EndNodeTitleBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndNodeTitleBarNative();

		public static void EndNodeTitleBar()
		{
			EndNodeTitleBarNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_BeginInputAttribute")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginInputAttributeNative(int id, ImNodesPinShape shape);

		public static void BeginInputAttribute(int id, ImNodesPinShape shape)
		{
			BeginInputAttributeNative(id, shape);
		}

		public static void BeginInputAttribute(int id)
		{
			BeginInputAttributeNative(id, (ImNodesPinShape)(ImNodesPinShape.CircleFilled));
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EndInputAttribute")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndInputAttributeNative();

		public static void EndInputAttribute()
		{
			EndInputAttributeNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_BeginOutputAttribute")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginOutputAttributeNative(int id, ImNodesPinShape shape);

		public static void BeginOutputAttribute(int id, ImNodesPinShape shape)
		{
			BeginOutputAttributeNative(id, shape);
		}

		public static void BeginOutputAttribute(int id)
		{
			BeginOutputAttributeNative(id, (ImNodesPinShape)(ImNodesPinShape.CircleFilled));
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EndOutputAttribute")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndOutputAttributeNative();

		public static void EndOutputAttribute()
		{
			EndOutputAttributeNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_BeginStaticAttribute")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginStaticAttributeNative(int id);

		public static void BeginStaticAttribute(int id)
		{
			BeginStaticAttributeNative(id);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_EndStaticAttribute")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndStaticAttributeNative();

		public static void EndStaticAttribute()
		{
			EndStaticAttributeNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_PushAttributeFlag")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushAttributeFlagNative(ImNodesAttributeFlags flag);

		public static void PushAttributeFlag(ImNodesAttributeFlags flag)
		{
			PushAttributeFlagNative(flag);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_PopAttributeFlag")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PopAttributeFlagNative();

		public static void PopAttributeFlag()
		{
			PopAttributeFlagNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_Link")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LinkNative(int id, int startAttributeId, int endAttributeId);

		public static void Link(int id, int startAttributeId, int endAttributeId)
		{
			LinkNative(id, startAttributeId, endAttributeId);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SetNodeDraggable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNodeDraggableNative(int nodeId, byte draggable);

		public static void SetNodeDraggable(int nodeId, bool draggable)
		{
			SetNodeDraggableNative(nodeId, draggable ? (byte)1 : (byte)0);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SetNodeScreenSpacePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNodeScreenSpacePosNative(int nodeId, Vector2 screenSpacePos);

		public static void SetNodeScreenSpacePos(int nodeId, Vector2 screenSpacePos)
		{
			SetNodeScreenSpacePosNative(nodeId, screenSpacePos);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SetNodeEditorSpacePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNodeEditorSpacePosNative(int nodeId, Vector2 editorSpacePos);

		public static void SetNodeEditorSpacePos(int nodeId, Vector2 editorSpacePos)
		{
			SetNodeEditorSpacePosNative(nodeId, editorSpacePos);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SetNodeGridSpacePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNodeGridSpacePosNative(int nodeId, Vector2 gridPos);

		public static void SetNodeGridSpacePos(int nodeId, Vector2 gridPos)
		{
			SetNodeGridSpacePosNative(nodeId, gridPos);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_GetNodeScreenSpacePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetNodeScreenSpacePosNative(Vector2* output, int nodeId);

		public static Vector2 GetNodeScreenSpacePos(int nodeId)
		{
			Vector2 ret;
			GetNodeScreenSpacePosNative(&ret, nodeId);
			return ret;
		}

		public static void GetNodeScreenSpacePos(Vector2* output, int nodeId)
		{
			GetNodeScreenSpacePosNative(output, nodeId);
		}

		public static void GetNodeScreenSpacePos(ref Vector2 output, int nodeId)
		{
			fixed (Vector2* poutput = &output)
			{
				GetNodeScreenSpacePosNative((Vector2*)poutput, nodeId);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_GetNodeEditorSpacePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetNodeEditorSpacePosNative(Vector2* output, int nodeId);

		public static Vector2 GetNodeEditorSpacePos(int nodeId)
		{
			Vector2 ret;
			GetNodeEditorSpacePosNative(&ret, nodeId);
			return ret;
		}

		public static void GetNodeEditorSpacePos(Vector2* output, int nodeId)
		{
			GetNodeEditorSpacePosNative(output, nodeId);
		}

		public static void GetNodeEditorSpacePos(ref Vector2 output, int nodeId)
		{
			fixed (Vector2* poutput = &output)
			{
				GetNodeEditorSpacePosNative((Vector2*)poutput, nodeId);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_GetNodeGridSpacePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetNodeGridSpacePosNative(Vector2* output, int nodeId);

		public static Vector2 GetNodeGridSpacePos(int nodeId)
		{
			Vector2 ret;
			GetNodeGridSpacePosNative(&ret, nodeId);
			return ret;
		}

		public static void GetNodeGridSpacePos(Vector2* output, int nodeId)
		{
			GetNodeGridSpacePosNative(output, nodeId);
		}

		public static void GetNodeGridSpacePos(ref Vector2 output, int nodeId)
		{
			fixed (Vector2* poutput = &output)
			{
				GetNodeGridSpacePosNative((Vector2*)poutput, nodeId);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SnapNodeToGrid")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SnapNodeToGridNative(int nodeId);

		public static void SnapNodeToGrid(int nodeId)
		{
			SnapNodeToGridNative(nodeId);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsEditorHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsEditorHoveredNative();

		public static bool IsEditorHovered()
		{
			byte ret = IsEditorHoveredNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsNodeHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsNodeHoveredNative(int* nodeId);

		public static bool IsNodeHovered(int* nodeId)
		{
			byte ret = IsNodeHoveredNative(nodeId);
			return ret != 0;
		}

		public static bool IsNodeHovered(ref int nodeId)
		{
			fixed (int* pnodeId = &nodeId)
			{
				byte ret = IsNodeHoveredNative((int*)pnodeId);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsLinkHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsLinkHoveredNative(int* linkId);

		public static bool IsLinkHovered(int* linkId)
		{
			byte ret = IsLinkHoveredNative(linkId);
			return ret != 0;
		}

		public static bool IsLinkHovered(ref int linkId)
		{
			fixed (int* plinkId = &linkId)
			{
				byte ret = IsLinkHoveredNative((int*)plinkId);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsPinHovered")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsPinHoveredNative(int* attributeId);

		public static bool IsPinHovered(int* attributeId)
		{
			byte ret = IsPinHoveredNative(attributeId);
			return ret != 0;
		}

		public static bool IsPinHovered(ref int attributeId)
		{
			fixed (int* pattributeId = &attributeId)
			{
				byte ret = IsPinHoveredNative((int*)pattributeId);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_NumSelectedNodes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int NumSelectedNodesNative();

		public static int NumSelectedNodes()
		{
			int ret = NumSelectedNodesNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_NumSelectedLinks")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int NumSelectedLinksNative();

		public static int NumSelectedLinks()
		{
			int ret = NumSelectedLinksNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_GetSelectedNodes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetSelectedNodesNative(int* nodeIds);

		public static void GetSelectedNodes(int* nodeIds)
		{
			GetSelectedNodesNative(nodeIds);
		}

		public static void GetSelectedNodes(ref int nodeIds)
		{
			fixed (int* pnodeIds = &nodeIds)
			{
				GetSelectedNodesNative((int*)pnodeIds);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_GetSelectedLinks")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetSelectedLinksNative(int* linkIds);

		public static void GetSelectedLinks(int* linkIds)
		{
			GetSelectedLinksNative(linkIds);
		}

		public static void GetSelectedLinks(ref int linkIds)
		{
			fixed (int* plinkIds = &linkIds)
			{
				GetSelectedLinksNative((int*)plinkIds);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_ClearNodeSelection_Nil")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearNodeSelectionNative();

		public static void ClearNodeSelection()
		{
			ClearNodeSelectionNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_ClearLinkSelection_Nil")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearLinkSelectionNative();

		public static void ClearLinkSelection()
		{
			ClearLinkSelectionNative();
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SelectNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SelectNodeNative(int nodeId);

		public static void SelectNode(int nodeId)
		{
			SelectNodeNative(nodeId);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_ClearNodeSelection_Int")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearNodeSelectionNative(int nodeId);

		public static void ClearNodeSelection(int nodeId)
		{
			ClearNodeSelectionNative(nodeId);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsNodeSelected")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsNodeSelectedNative(int nodeId);

		public static bool IsNodeSelected(int nodeId)
		{
			byte ret = IsNodeSelectedNative(nodeId);
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SelectLink")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SelectLinkNative(int linkId);

		public static void SelectLink(int linkId)
		{
			SelectLinkNative(linkId);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_ClearLinkSelection_Int")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearLinkSelectionNative(int linkId);

		public static void ClearLinkSelection(int linkId)
		{
			ClearLinkSelectionNative(linkId);
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsLinkSelected")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsLinkSelectedNative(int linkId);

		public static bool IsLinkSelected(int linkId)
		{
			byte ret = IsLinkSelectedNative(linkId);
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsAttributeActive")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsAttributeActiveNative();

		public static bool IsAttributeActive()
		{
			byte ret = IsAttributeActiveNative();
			return ret != 0;
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsAnyAttributeActive")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsAnyAttributeActiveNative(int* attributeId);

		public static bool IsAnyAttributeActive(int* attributeId)
		{
			byte ret = IsAnyAttributeActiveNative(attributeId);
			return ret != 0;
		}

		public static bool IsAnyAttributeActive()
		{
			byte ret = IsAnyAttributeActiveNative((int*)(default));
			return ret != 0;
		}

		public static bool IsAnyAttributeActive(ref int attributeId)
		{
			fixed (int* pattributeId = &attributeId)
			{
				byte ret = IsAnyAttributeActiveNative((int*)pattributeId);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsLinkStarted")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsLinkStartedNative(int* startedAtAttributeId);

		public static bool IsLinkStarted(int* startedAtAttributeId)
		{
			byte ret = IsLinkStartedNative(startedAtAttributeId);
			return ret != 0;
		}

		public static bool IsLinkStarted(ref int startedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				byte ret = IsLinkStartedNative((int*)pstartedAtAttributeId);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsLinkDropped")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsLinkDroppedNative(int* startedAtAttributeId, byte includingDetachedLinks);

		public static bool IsLinkDropped(int* startedAtAttributeId, bool includingDetachedLinks)
		{
			byte ret = IsLinkDroppedNative(startedAtAttributeId, includingDetachedLinks ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool IsLinkDropped(int* startedAtAttributeId)
		{
			byte ret = IsLinkDroppedNative(startedAtAttributeId, (byte)(1));
			return ret != 0;
		}

		public static bool IsLinkDropped()
		{
			byte ret = IsLinkDroppedNative((int*)(default), (byte)(1));
			return ret != 0;
		}

		public static bool IsLinkDropped(bool includingDetachedLinks)
		{
			byte ret = IsLinkDroppedNative((int*)(default), includingDetachedLinks ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool IsLinkDropped(ref int startedAtAttributeId, bool includingDetachedLinks)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				byte ret = IsLinkDroppedNative((int*)pstartedAtAttributeId, includingDetachedLinks ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		public static bool IsLinkDropped(ref int startedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				byte ret = IsLinkDroppedNative((int*)pstartedAtAttributeId, (byte)(1));
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsLinkCreated_BoolPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsLinkCreatedNative(int* startedAtAttributeId, int* endedAtAttributeId, bool* createdFromSnap);

		public static bool IsLinkCreated(int* startedAtAttributeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			byte ret = IsLinkCreatedNative(startedAtAttributeId, endedAtAttributeId, createdFromSnap);
			return ret != 0;
		}

		public static bool IsLinkCreated(int* startedAtAttributeId, int* endedAtAttributeId)
		{
			byte ret = IsLinkCreatedNative(startedAtAttributeId, endedAtAttributeId, (bool*)(default));
			return ret != 0;
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				byte ret = IsLinkCreatedNative((int*)pstartedAtAttributeId, endedAtAttributeId, createdFromSnap);
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				byte ret = IsLinkCreatedNative((int*)pstartedAtAttributeId, endedAtAttributeId, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(int* startedAtAttributeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				byte ret = IsLinkCreatedNative(startedAtAttributeId, (int*)pendedAtAttributeId, createdFromSnap);
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(int* startedAtAttributeId, ref int endedAtAttributeId)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				byte ret = IsLinkCreatedNative(startedAtAttributeId, (int*)pendedAtAttributeId, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtAttributeId, (int*)pendedAtAttributeId, createdFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtAttributeId, (int*)pendedAtAttributeId, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtAttributeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (bool* pcreatedFromSnap = &createdFromSnap)
			{
				byte ret = IsLinkCreatedNative(startedAtAttributeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtAttributeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtAttributeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					byte ret = IsLinkCreatedNative(startedAtAttributeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtAttributeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret != 0;
					}
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsLinkCreated_IntPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsLinkCreatedNative(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap);

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, createdFromSnap);
			return ret != 0;
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId)
		{
			byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)(default));
			return ret != 0;
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, createdFromSnap);
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, createdFromSnap);
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, createdFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, createdFromSnap);
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, createdFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, createdFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, createdFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)(default));
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)(default));
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)(default));
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						fixed (int* pendedAtAttributeId = &endedAtAttributeId)
						{
							byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						fixed (int* pendedAtAttributeId = &endedAtAttributeId)
						{
							byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)(default));
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (bool* pcreatedFromSnap = &createdFromSnap)
			{
				byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
				return ret != 0;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						fixed (bool* pcreatedFromSnap = &createdFromSnap)
						{
							byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret != 0;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						fixed (bool* pcreatedFromSnap = &createdFromSnap)
						{
							byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						byte ret = IsLinkCreatedNative(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret != 0;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						fixed (bool* pcreatedFromSnap = &createdFromSnap)
						{
							byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						fixed (bool* pcreatedFromSnap = &createdFromSnap)
						{
							byte ret = IsLinkCreatedNative(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
							return ret != 0;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						fixed (int* pendedAtAttributeId = &endedAtAttributeId)
						{
							fixed (bool* pcreatedFromSnap = &createdFromSnap)
							{
								byte ret = IsLinkCreatedNative((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_IsLinkDestroyed")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsLinkDestroyedNative(int* linkId);

		public static bool IsLinkDestroyed(int* linkId)
		{
			byte ret = IsLinkDestroyedNative(linkId);
			return ret != 0;
		}

		public static bool IsLinkDestroyed(ref int linkId)
		{
			fixed (int* plinkId = &linkId)
			{
				byte ret = IsLinkDestroyedNative((int*)plinkId);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SaveCurrentEditorStateToIniString")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SaveCurrentEditorStateToIniStringNative(nuint* dataSize);

		public static byte* SaveCurrentEditorStateToIniString(nuint* dataSize)
		{
			byte* ret = SaveCurrentEditorStateToIniStringNative(dataSize);
			return ret;
		}

		public static byte* SaveCurrentEditorStateToIniString()
		{
			byte* ret = SaveCurrentEditorStateToIniStringNative((nuint*)(default));
			return ret;
		}

		public static string SaveCurrentEditorStateToIniStringS()
		{
			string ret = Utils.DecodeStringUTF8(SaveCurrentEditorStateToIniStringNative((nuint*)(default)));
			return ret;
		}

		public static string SaveCurrentEditorStateToIniStringS(nuint* dataSize)
		{
			string ret = Utils.DecodeStringUTF8(SaveCurrentEditorStateToIniStringNative(dataSize));
			return ret;
		}

		public static byte* SaveCurrentEditorStateToIniString(ref nuint dataSize)
		{
			fixed (nuint* pdataSize = &dataSize)
			{
				byte* ret = SaveCurrentEditorStateToIniStringNative((nuint*)pdataSize);
				return ret;
			}
		}

		public static string SaveCurrentEditorStateToIniStringS(ref nuint dataSize)
		{
			fixed (nuint* pdataSize = &dataSize)
			{
				string ret = Utils.DecodeStringUTF8(SaveCurrentEditorStateToIniStringNative((nuint*)pdataSize));
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SaveEditorStateToIniString")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SaveEditorStateToIniStringNative(ImNodesEditorContext* editor, nuint* dataSize);

		public static byte* SaveEditorStateToIniString(ImNodesEditorContextPtr editor, nuint* dataSize)
		{
			byte* ret = SaveEditorStateToIniStringNative(editor, dataSize);
			return ret;
		}

		public static byte* SaveEditorStateToIniString(ImNodesEditorContextPtr editor)
		{
			byte* ret = SaveEditorStateToIniStringNative(editor, (nuint*)(default));
			return ret;
		}

		public static string SaveEditorStateToIniStringS(ImNodesEditorContextPtr editor)
		{
			string ret = Utils.DecodeStringUTF8(SaveEditorStateToIniStringNative(editor, (nuint*)(default)));
			return ret;
		}

		public static string SaveEditorStateToIniStringS(ImNodesEditorContextPtr editor, nuint* dataSize)
		{
			string ret = Utils.DecodeStringUTF8(SaveEditorStateToIniStringNative(editor, dataSize));
			return ret;
		}

		public static byte* SaveEditorStateToIniString(ref ImNodesEditorContext editor, nuint* dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* ret = SaveEditorStateToIniStringNative((ImNodesEditorContext*)peditor, dataSize);
				return ret;
			}
		}

		public static byte* SaveEditorStateToIniString(ref ImNodesEditorContext editor)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* ret = SaveEditorStateToIniStringNative((ImNodesEditorContext*)peditor, (nuint*)(default));
				return ret;
			}
		}

		public static string SaveEditorStateToIniStringS(ref ImNodesEditorContext editor)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				string ret = Utils.DecodeStringUTF8(SaveEditorStateToIniStringNative((ImNodesEditorContext*)peditor, (nuint*)(default)));
				return ret;
			}
		}

		public static string SaveEditorStateToIniStringS(ref ImNodesEditorContext editor, nuint* dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				string ret = Utils.DecodeStringUTF8(SaveEditorStateToIniStringNative((ImNodesEditorContext*)peditor, dataSize));
				return ret;
			}
		}

		public static byte* SaveEditorStateToIniString(ImNodesEditorContextPtr editor, ref nuint dataSize)
		{
			fixed (nuint* pdataSize = &dataSize)
			{
				byte* ret = SaveEditorStateToIniStringNative(editor, (nuint*)pdataSize);
				return ret;
			}
		}

		public static string SaveEditorStateToIniStringS(ImNodesEditorContextPtr editor, ref nuint dataSize)
		{
			fixed (nuint* pdataSize = &dataSize)
			{
				string ret = Utils.DecodeStringUTF8(SaveEditorStateToIniStringNative(editor, (nuint*)pdataSize));
				return ret;
			}
		}

		public static byte* SaveEditorStateToIniString(ref ImNodesEditorContext editor, ref nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (nuint* pdataSize = &dataSize)
				{
					byte* ret = SaveEditorStateToIniStringNative((ImNodesEditorContext*)peditor, (nuint*)pdataSize);
					return ret;
				}
			}
		}

		public static string SaveEditorStateToIniStringS(ref ImNodesEditorContext editor, ref nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (nuint* pdataSize = &dataSize)
				{
					string ret = Utils.DecodeStringUTF8(SaveEditorStateToIniStringNative((ImNodesEditorContext*)peditor, (nuint*)pdataSize));
					return ret;
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_LoadCurrentEditorStateFromIniString")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LoadCurrentEditorStateFromIniStringNative(byte* data, nuint dataSize);

		public static void LoadCurrentEditorStateFromIniString(byte* data, nuint dataSize)
		{
			LoadCurrentEditorStateFromIniStringNative(data, dataSize);
		}

		public static void LoadCurrentEditorStateFromIniString(ref byte data, nuint dataSize)
		{
			fixed (byte* pdata = &data)
			{
				LoadCurrentEditorStateFromIniStringNative((byte*)pdata, dataSize);
			}
		}

		public static void LoadCurrentEditorStateFromIniString(string data, nuint dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (data != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(data);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(data, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadCurrentEditorStateFromIniStringNative(pStr0, dataSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_LoadEditorStateFromIniString")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LoadEditorStateFromIniStringNative(ImNodesEditorContext* editor, byte* data, nuint dataSize);

		public static void LoadEditorStateFromIniString(ImNodesEditorContextPtr editor, byte* data, nuint dataSize)
		{
			LoadEditorStateFromIniStringNative(editor, data, dataSize);
		}

		public static void LoadEditorStateFromIniString(ref ImNodesEditorContext editor, byte* data, nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				LoadEditorStateFromIniStringNative((ImNodesEditorContext*)peditor, data, dataSize);
			}
		}

		public static void LoadEditorStateFromIniString(ImNodesEditorContextPtr editor, ref byte data, nuint dataSize)
		{
			fixed (byte* pdata = &data)
			{
				LoadEditorStateFromIniStringNative(editor, (byte*)pdata, dataSize);
			}
		}

		public static void LoadEditorStateFromIniString(ImNodesEditorContextPtr editor, string data, nuint dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (data != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(data);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(data, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadEditorStateFromIniStringNative(editor, pStr0, dataSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LoadEditorStateFromIniString(ref ImNodesEditorContext editor, ref byte data, nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (byte* pdata = &data)
				{
					LoadEditorStateFromIniStringNative((ImNodesEditorContext*)peditor, (byte*)pdata, dataSize);
				}
			}
		}

		public static void LoadEditorStateFromIniString(ref ImNodesEditorContext editor, string data, nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (data != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(data);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(data, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				LoadEditorStateFromIniStringNative((ImNodesEditorContext*)peditor, pStr0, dataSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SaveCurrentEditorStateToIniFile")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SaveCurrentEditorStateToIniFileNative(byte* fileName);

		public static void SaveCurrentEditorStateToIniFile(byte* fileName)
		{
			SaveCurrentEditorStateToIniFileNative(fileName);
		}

		public static void SaveCurrentEditorStateToIniFile(ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				SaveCurrentEditorStateToIniFileNative((byte*)pfileName);
			}
		}

		public static void SaveCurrentEditorStateToIniFile(string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SaveCurrentEditorStateToIniFileNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_SaveEditorStateToIniFile")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SaveEditorStateToIniFileNative(ImNodesEditorContext* editor, byte* fileName);

		public static void SaveEditorStateToIniFile(ImNodesEditorContextPtr editor, byte* fileName)
		{
			SaveEditorStateToIniFileNative(editor, fileName);
		}

		public static void SaveEditorStateToIniFile(ref ImNodesEditorContext editor, byte* fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				SaveEditorStateToIniFileNative((ImNodesEditorContext*)peditor, fileName);
			}
		}

		public static void SaveEditorStateToIniFile(ImNodesEditorContextPtr editor, ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				SaveEditorStateToIniFileNative(editor, (byte*)pfileName);
			}
		}

		public static void SaveEditorStateToIniFile(ImNodesEditorContextPtr editor, string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SaveEditorStateToIniFileNative(editor, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void SaveEditorStateToIniFile(ref ImNodesEditorContext editor, ref byte fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (byte* pfileName = &fileName)
				{
					SaveEditorStateToIniFileNative((ImNodesEditorContext*)peditor, (byte*)pfileName);
				}
			}
		}

		public static void SaveEditorStateToIniFile(ref ImNodesEditorContext editor, string fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fileName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fileName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SaveEditorStateToIniFileNative((ImNodesEditorContext*)peditor, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_LoadCurrentEditorStateFromIniFile")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LoadCurrentEditorStateFromIniFileNative(byte* fileName);

		public static void LoadCurrentEditorStateFromIniFile(byte* fileName)
		{
			LoadCurrentEditorStateFromIniFileNative(fileName);
		}

		public static void LoadCurrentEditorStateFromIniFile(ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				LoadCurrentEditorStateFromIniFileNative((byte*)pfileName);
			}
		}

		public static void LoadCurrentEditorStateFromIniFile(string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadCurrentEditorStateFromIniFileNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImNodes_LoadEditorStateFromIniFile")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LoadEditorStateFromIniFileNative(ImNodesEditorContext* editor, byte* fileName);

		public static void LoadEditorStateFromIniFile(ImNodesEditorContextPtr editor, byte* fileName)
		{
			LoadEditorStateFromIniFileNative(editor, fileName);
		}

		public static void LoadEditorStateFromIniFile(ref ImNodesEditorContext editor, byte* fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				LoadEditorStateFromIniFileNative((ImNodesEditorContext*)peditor, fileName);
			}
		}

		public static void LoadEditorStateFromIniFile(ImNodesEditorContextPtr editor, ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				LoadEditorStateFromIniFileNative(editor, (byte*)pfileName);
			}
		}

		public static void LoadEditorStateFromIniFile(ImNodesEditorContextPtr editor, string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadEditorStateFromIniFileNative(editor, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LoadEditorStateFromIniFile(ref ImNodesEditorContext editor, ref byte fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (byte* pfileName = &fileName)
				{
					LoadEditorStateFromIniFileNative((ImNodesEditorContext*)peditor, (byte*)pfileName);
				}
			}
		}

		public static void LoadEditorStateFromIniFile(ref ImNodesEditorContext editor, string fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fileName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fileName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				LoadEditorStateFromIniFileNative((ImNodesEditorContext*)peditor, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// needed for io.link_detach_with_modifier_click.modifier = 
		/// &ImGui
		/// ::GetIO().KeyCtrl
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "getIOKeyCtrlPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial bool* GetIOKeyCtrlPtrNative();

		/// <summary>
/// needed for io.link_detach_with_modifier_click.modifier = 
/// &ImGui
/// ::GetIO().KeyCtrl
/// </summary>
public static bool* GetIOKeyCtrlPtr()
		{
			bool* ret = GetIOKeyCtrlPtrNative();
			return ret;
		}

	}
}
