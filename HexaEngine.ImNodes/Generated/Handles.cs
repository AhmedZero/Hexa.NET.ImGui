// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Numerics;
using HexaEngine.ImGuiNET;

namespace HexaEngine.ImNodesNET
{
	public unsafe delegate void ImNodesMiniMapNodeHoveringCallback(int intValue, void* voidValue);

	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct ImNodesMiniMapNodeHoveringCallbackUserData : IEquatable<ImNodesMiniMapNodeHoveringCallbackUserData>
	{
		public ImNodesMiniMapNodeHoveringCallbackUserData(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static ImNodesMiniMapNodeHoveringCallbackUserData Null => new ImNodesMiniMapNodeHoveringCallbackUserData(0);
		public static implicit operator ImNodesMiniMapNodeHoveringCallbackUserData(nint handle) => new ImNodesMiniMapNodeHoveringCallbackUserData(handle);
		public static bool operator ==(ImNodesMiniMapNodeHoveringCallbackUserData left, ImNodesMiniMapNodeHoveringCallbackUserData right) => left.Handle == right.Handle;
		public static bool operator !=(ImNodesMiniMapNodeHoveringCallbackUserData left, ImNodesMiniMapNodeHoveringCallbackUserData right) => left.Handle != right.Handle;
		public static bool operator ==(ImNodesMiniMapNodeHoveringCallbackUserData left, nint right) => left.Handle == right;
		public static bool operator !=(ImNodesMiniMapNodeHoveringCallbackUserData left, nint right) => left.Handle != right;
		public bool Equals(ImNodesMiniMapNodeHoveringCallbackUserData other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImNodesMiniMapNodeHoveringCallbackUserData handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("ImNodesMiniMapNodeHoveringCallbackUserData [0x{0}]", Handle.ToString("X"));
	}

}
