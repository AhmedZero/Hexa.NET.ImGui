// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Numerics;
using HexaEngine.ImGuiNET;

namespace HexaEngine.ImNodesNET
{
	public unsafe partial class ImNodes
	{
		internal const string LibName = "cimnodes";

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "EmulateThreeButtonMouse_EmulateThreeButtonMouse")]
		public static extern EmulateThreeButtonMouse* EmulateThreeButtonMouse();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "EmulateThreeButtonMouse_destroy")]
		public static extern void Destroy(EmulateThreeButtonMouse* self);

		public static void Destroy(ref EmulateThreeButtonMouse self)
		{
			fixed (EmulateThreeButtonMouse* pself = &self)
			{
				Destroy((EmulateThreeButtonMouse*)pself);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LinkDetachWithModifierClick_LinkDetachWithModifierClick")]
		public static extern LinkDetachWithModifierClick* LinkDetachWithModifierClick();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "LinkDetachWithModifierClick_destroy")]
		public static extern void Destroy(LinkDetachWithModifierClick* self);

		public static void Destroy(ref LinkDetachWithModifierClick self)
		{
			fixed (LinkDetachWithModifierClick* pself = &self)
			{
				Destroy((LinkDetachWithModifierClick*)pself);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MultipleSelectModifier_MultipleSelectModifier")]
		public static extern MultipleSelectModifier* MultipleSelectModifier();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MultipleSelectModifier_destroy")]
		public static extern void Destroy(MultipleSelectModifier* self);

		public static void Destroy(ref MultipleSelectModifier self)
		{
			fixed (MultipleSelectModifier* pself = &self)
			{
				Destroy((MultipleSelectModifier*)pself);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImNodesIO_ImNodesIO")]
		public static extern ImNodesIO* ImNodesIO();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImNodesIO_destroy")]
		public static extern void Destroy(ImNodesIO* self);

		public static void Destroy(ref ImNodesIO self)
		{
			fixed (ImNodesIO* pself = &self)
			{
				Destroy((ImNodesIO*)pself);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImNodesStyle_ImNodesStyle")]
		public static extern ImNodesStyle* ImNodesStyle();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImNodesStyle_destroy")]
		public static extern void Destroy(ImNodesStyle* self);

		public static void Destroy(ref ImNodesStyle self)
		{
			fixed (ImNodesStyle* pself = &self)
			{
				Destroy((ImNodesStyle*)pself);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_CreateContext")]
		public static extern ImNodesContext* CreateContext();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_DestroyContext")]
		public static extern void DestroyContext(ImNodesContext* ctx);

		public static void DestroyContext(ref ImNodesContext ctx)
		{
			fixed (ImNodesContext* pctx = &ctx)
			{
				DestroyContext((ImNodesContext*)pctx);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_GetCurrentContext")]
		public static extern ImNodesContext* GetCurrentContext();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SetCurrentContext")]
		public static extern void SetCurrentContext(ImNodesContext* ctx);

		public static void SetCurrentContext(ref ImNodesContext ctx)
		{
			fixed (ImNodesContext* pctx = &ctx)
			{
				SetCurrentContext((ImNodesContext*)pctx);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EditorContextCreate")]
		public static extern ImNodesEditorContext* EditorContextCreate();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EditorContextFree")]
		public static extern void EditorContextFree(ImNodesEditorContext* noname1);

		public static void EditorContextFree(ref ImNodesEditorContext noname1)
		{
			fixed (ImNodesEditorContext* pnoname1 = &noname1)
			{
				EditorContextFree((ImNodesEditorContext*)pnoname1);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EditorContextSet")]
		public static extern void EditorContextSet(ImNodesEditorContext* noname1);

		public static void EditorContextSet(ref ImNodesEditorContext noname1)
		{
			fixed (ImNodesEditorContext* pnoname1 = &noname1)
			{
				EditorContextSet((ImNodesEditorContext*)pnoname1);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EditorContextGetPanning")]
		public static extern void EditorContextGetPanning(Vector2* output);

		public static void EditorContextGetPanning(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				EditorContextGetPanning((Vector2*)poutput);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EditorContextResetPanning")]
		public static extern void EditorContextResetPanning(Vector2 pos);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EditorContextMoveToNode")]
		public static extern void EditorContextMoveToNode(int nodeId);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_GetIO")]
		public static extern ImNodesIO* GetIO();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_GetStyle")]
		public static extern ImNodesStyle* GetStyle();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_StyleColorsDark")]
		public static extern void StyleColorsDark(ImNodesStyle* dest);

		public static void StyleColorsDark(ref ImNodesStyle dest)
		{
			fixed (ImNodesStyle* pdest = &dest)
			{
				StyleColorsDark((ImNodesStyle*)pdest);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_StyleColorsClassic")]
		public static extern void StyleColorsClassic(ImNodesStyle* dest);

		public static void StyleColorsClassic(ref ImNodesStyle dest)
		{
			fixed (ImNodesStyle* pdest = &dest)
			{
				StyleColorsClassic((ImNodesStyle*)pdest);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_StyleColorsLight")]
		public static extern void StyleColorsLight(ImNodesStyle* dest);

		public static void StyleColorsLight(ref ImNodesStyle dest)
		{
			fixed (ImNodesStyle* pdest = &dest)
			{
				StyleColorsLight((ImNodesStyle*)pdest);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_BeginNodeEditor")]
		public static extern void BeginNodeEditor();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EndNodeEditor")]
		public static extern void EndNodeEditor();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_MiniMap")]
		public static extern void MiniMap(float minimapSizeFraction, ImNodesMiniMapLocation location, delegate*<int, void*> nodeHoveringCallback, ImNodesMiniMapNodeHoveringCallbackUserData nodeHoveringCallbackData);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_PushColorStyle")]
		public static extern void PushColorStyle(ImNodesCol item, uint color);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_PopColorStyle")]
		public static extern void PopColorStyle();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_PushStyleVar_Float")]
		public static extern void PushStyleVar(ImNodesStyleVar styleItem, float value);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_PushStyleVar_Vec2")]
		public static extern void PushStyleVar(ImNodesStyleVar styleItem, Vector2 value);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_BeginNode")]
		public static extern void BeginNode(int id);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EndNode")]
		public static extern void EndNode();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_GetNodeDimensions")]
		public static extern void GetNodeDimensions(Vector2* output, int id);

		public static void GetNodeDimensions(ref Vector2 output, int id)
		{
			fixed (Vector2* poutput = &output)
			{
				GetNodeDimensions((Vector2*)poutput, id);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_BeginNodeTitleBar")]
		public static extern void BeginNodeTitleBar();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EndNodeTitleBar")]
		public static extern void EndNodeTitleBar();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_BeginInputAttribute")]
		public static extern void BeginInputAttribute(int id, ImNodesPinShape shape);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EndInputAttribute")]
		public static extern void EndInputAttribute();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_BeginOutputAttribute")]
		public static extern void BeginOutputAttribute(int id, ImNodesPinShape shape);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EndOutputAttribute")]
		public static extern void EndOutputAttribute();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_BeginStaticAttribute")]
		public static extern void BeginStaticAttribute(int id);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_EndStaticAttribute")]
		public static extern void EndStaticAttribute();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_PushAttributeFlag")]
		public static extern void PushAttributeFlag(ImNodesAttributeFlags flag);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_PopAttributeFlag")]
		public static extern void PopAttributeFlag();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_Link")]
		public static extern void Link(int id, int startAttributeId, int endAttributeId);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SetNodeDraggable")]
		public static extern void SetNodeDraggable(int nodeId, bool draggable);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SetNodeScreenSpacePos")]
		public static extern void SetNodeScreenSpacePos(int nodeId, Vector2 screenSpacePos);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SetNodeEditorSpacePos")]
		public static extern void SetNodeEditorSpacePos(int nodeId, Vector2 editorSpacePos);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SetNodeGridSpacePos")]
		public static extern void SetNodeGridSpacePos(int nodeId, Vector2 gridPos);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_GetNodeScreenSpacePos")]
		public static extern void GetNodeScreenSpacePos(Vector2* output, int nodeId);

		public static void GetNodeScreenSpacePos(ref Vector2 output, int nodeId)
		{
			fixed (Vector2* poutput = &output)
			{
				GetNodeScreenSpacePos((Vector2*)poutput, nodeId);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_GetNodeEditorSpacePos")]
		public static extern void GetNodeEditorSpacePos(Vector2* output, int nodeId);

		public static void GetNodeEditorSpacePos(ref Vector2 output, int nodeId)
		{
			fixed (Vector2* poutput = &output)
			{
				GetNodeEditorSpacePos((Vector2*)poutput, nodeId);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_GetNodeGridSpacePos")]
		public static extern void GetNodeGridSpacePos(Vector2* output, int nodeId);

		public static void GetNodeGridSpacePos(ref Vector2 output, int nodeId)
		{
			fixed (Vector2* poutput = &output)
			{
				GetNodeGridSpacePos((Vector2*)poutput, nodeId);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SnapNodeToGrid")]
		public static extern void SnapNodeToGrid(int nodeId);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsEditorHovered")]
		public static extern bool IsEditorHovered();

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsNodeHovered")]
		public static extern bool IsNodeHovered(int* nodeId);

		public static bool IsNodeHovered(ref int nodeId)
		{
			fixed (int* pnodeId = &nodeId)
			{
				bool ret = IsNodeHovered((int*)pnodeId);
				return ret;
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsLinkHovered")]
		public static extern bool IsLinkHovered(int* linkId);

		public static bool IsLinkHovered(ref int linkId)
		{
			fixed (int* plinkId = &linkId)
			{
				bool ret = IsLinkHovered((int*)plinkId);
				return ret;
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsPinHovered")]
		public static extern bool IsPinHovered(int* attributeId);

		public static bool IsPinHovered(ref int attributeId)
		{
			fixed (int* pattributeId = &attributeId)
			{
				bool ret = IsPinHovered((int*)pattributeId);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_NumSelectedNodes")]
		public static extern int NumSelectedNodes();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_NumSelectedLinks")]
		public static extern int NumSelectedLinks();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_GetSelectedNodes")]
		public static extern void GetSelectedNodes(int* nodeIds);

		public static void GetSelectedNodes(ref int nodeIds)
		{
			fixed (int* pnodeIds = &nodeIds)
			{
				GetSelectedNodes((int*)pnodeIds);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_GetSelectedLinks")]
		public static extern void GetSelectedLinks(int* linkIds);

		public static void GetSelectedLinks(ref int linkIds)
		{
			fixed (int* plinkIds = &linkIds)
			{
				GetSelectedLinks((int*)plinkIds);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_ClearNodeSelection_Nil")]
		public static extern void ClearNodeSelection();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_ClearLinkSelection_Nil")]
		public static extern void ClearLinkSelection();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SelectNode")]
		public static extern void SelectNode(int nodeId);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_ClearNodeSelection_Int")]
		public static extern void ClearNodeSelection(int nodeId);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsNodeSelected")]
		public static extern bool IsNodeSelected(int nodeId);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SelectLink")]
		public static extern void SelectLink(int linkId);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_ClearLinkSelection_Int")]
		public static extern void ClearLinkSelection(int linkId);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsLinkSelected")]
		public static extern bool IsLinkSelected(int linkId);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsAttributeActive")]
		public static extern bool IsAttributeActive();

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsAnyAttributeActive")]
		public static extern bool IsAnyAttributeActive(int* attributeId);

		public static bool IsAnyAttributeActive(ref int attributeId)
		{
			fixed (int* pattributeId = &attributeId)
			{
				bool ret = IsAnyAttributeActive((int*)pattributeId);
				return ret;
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsLinkStarted")]
		public static extern bool IsLinkStarted(int* startedAtAttributeId);

		public static bool IsLinkStarted(ref int startedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				bool ret = IsLinkStarted((int*)pstartedAtAttributeId);
				return ret;
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsLinkDropped")]
		public static extern bool IsLinkDropped(int* startedAtAttributeId, bool includingDetachedLinks);

		public static bool IsLinkDropped(ref int startedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				bool ret = IsLinkDropped((int*)pstartedAtAttributeId, true);
				return ret;
			}
		}

		public static bool IsLinkDropped(ref int startedAtAttributeId, bool includingDetachedLinks)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				bool ret = IsLinkDropped((int*)pstartedAtAttributeId, includingDetachedLinks);
				return ret;
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsLinkCreated_BoolPtr")]
		public static extern bool IsLinkCreated(int* startedAtAttributeId, int* endedAtAttributeId, bool* createdFromSnap);

		public static bool IsLinkCreated(ref int startedAtAttributeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				bool ret = IsLinkCreated((int*)pstartedAtAttributeId, endedAtAttributeId, (bool*)(null));
				return ret;
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				bool ret = IsLinkCreated((int*)pstartedAtAttributeId, endedAtAttributeId, createdFromSnap);
				return ret;
			}
		}

		public static bool IsLinkCreated(int* startedAtAttributeId, ref int endedAtAttributeId)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				bool ret = IsLinkCreated(startedAtAttributeId, (int*)pendedAtAttributeId, (bool*)(null));
				return ret;
			}
		}

		public static bool IsLinkCreated(int* startedAtAttributeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				bool ret = IsLinkCreated(startedAtAttributeId, (int*)pendedAtAttributeId, createdFromSnap);
				return ret;
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					bool ret = IsLinkCreated((int*)pstartedAtAttributeId, (int*)pendedAtAttributeId, (bool*)(null));
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					bool ret = IsLinkCreated((int*)pstartedAtAttributeId, (int*)pendedAtAttributeId, createdFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtAttributeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (bool* pcreatedFromSnap = &createdFromSnap)
			{
				bool ret = IsLinkCreated(startedAtAttributeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
				return ret;
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					bool ret = IsLinkCreated((int*)pstartedAtAttributeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtAttributeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					bool ret = IsLinkCreated(startedAtAttributeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtAttributeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						bool ret = IsLinkCreated((int*)pstartedAtAttributeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret;
					}
				}
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsLinkCreated_IntPtr")]
		public static extern bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap);

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)(null));
				return ret;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, createdFromSnap);
				return ret;
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)(null));
				return ret;
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, createdFromSnap);
				return ret;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)(null));
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, createdFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)(null));
				return ret;
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, createdFromSnap);
				return ret;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)(null));
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, createdFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)(null));
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, createdFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)(null));
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, createdFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)(null));
				return ret;
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
				return ret;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)(null));
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)(null));
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)(null));
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)(null));
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)(null));
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)(null));
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						fixed (int* pendedAtAttributeId = &endedAtAttributeId)
						{
							bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, bool* createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						fixed (int* pendedAtAttributeId = &endedAtAttributeId)
						{
							bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, createdFromSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (bool* pcreatedFromSnap = &createdFromSnap)
			{
				bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
				return ret;
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, int* endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						fixed (bool* pcreatedFromSnap = &createdFromSnap)
						{
							bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, endedAtAttributeId, (bool*)pcreatedFromSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pendedAtAttributeId = &endedAtAttributeId)
			{
				fixed (bool* pcreatedFromSnap = &createdFromSnap)
				{
					bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
					return ret;
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, int* endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						fixed (bool* pcreatedFromSnap = &createdFromSnap)
						{
							bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, endedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pendedAtNodeId = &endedAtNodeId)
			{
				fixed (int* pendedAtAttributeId = &endedAtAttributeId)
				{
					fixed (bool* pcreatedFromSnap = &createdFromSnap)
					{
						bool ret = IsLinkCreated(startedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
						return ret;
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, int* startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						fixed (bool* pcreatedFromSnap = &createdFromSnap)
						{
							bool ret = IsLinkCreated((int*)pstartedAtNodeId, startedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(int* startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
			{
				fixed (int* pendedAtNodeId = &endedAtNodeId)
				{
					fixed (int* pendedAtAttributeId = &endedAtAttributeId)
					{
						fixed (bool* pcreatedFromSnap = &createdFromSnap)
						{
							bool ret = IsLinkCreated(startedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool IsLinkCreated(ref int startedAtNodeId, ref int startedAtAttributeId, ref int endedAtNodeId, ref int endedAtAttributeId, ref bool createdFromSnap)
		{
			fixed (int* pstartedAtNodeId = &startedAtNodeId)
			{
				fixed (int* pstartedAtAttributeId = &startedAtAttributeId)
				{
					fixed (int* pendedAtNodeId = &endedAtNodeId)
					{
						fixed (int* pendedAtAttributeId = &endedAtAttributeId)
						{
							fixed (bool* pcreatedFromSnap = &createdFromSnap)
							{
								bool ret = IsLinkCreated((int*)pstartedAtNodeId, (int*)pstartedAtAttributeId, (int*)pendedAtNodeId, (int*)pendedAtAttributeId, (bool*)pcreatedFromSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_IsLinkDestroyed")]
		public static extern bool IsLinkDestroyed(int* linkId);

		public static bool IsLinkDestroyed(ref int linkId)
		{
			fixed (int* plinkId = &linkId)
			{
				bool ret = IsLinkDestroyed((int*)plinkId);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SaveCurrentEditorStateToIniString")]
		public static extern byte* SaveCurrentEditorStateToIniString(nuint* dataSize);

		public static string SaveCurrentEditorStateToIniStringS()
		{
			string ret = Marshal.PtrToStringAnsi((nint)SaveCurrentEditorStateToIniString((nuint*)(null)));
			return ret;
		}

		public static string SaveCurrentEditorStateToIniStringS(nuint* dataSize)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SaveCurrentEditorStateToIniString(dataSize));
			return ret;
		}

		public static string SaveCurrentEditorStateToIniStringS(ref nuint dataSize)
		{
			fixed (nuint* pdataSize = &dataSize)
			{
				string ret = Marshal.PtrToStringAnsi((nint)SaveCurrentEditorStateToIniString((nuint*)pdataSize));
				return ret;
			}
		}

		public static byte* SaveCurrentEditorStateToIniString(ref nuint dataSize)
		{
			fixed (nuint* pdataSize = &dataSize)
			{
				byte* ret = SaveCurrentEditorStateToIniString((nuint*)pdataSize);
				return ret;
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SaveEditorStateToIniString")]
		public static extern byte* SaveEditorStateToIniString(ImNodesEditorContext* editor, nuint* dataSize);

		public static string SaveEditorStateToIniStringS(ImNodesEditorContext* editor)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SaveEditorStateToIniString(editor, (nuint*)(null)));
			return ret;
		}

		public static string SaveEditorStateToIniStringS(ImNodesEditorContext* editor, nuint* dataSize)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SaveEditorStateToIniString(editor, dataSize));
			return ret;
		}

		public static string SaveEditorStateToIniStringS(ref ImNodesEditorContext editor)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				string ret = Marshal.PtrToStringAnsi((nint)SaveEditorStateToIniString((ImNodesEditorContext*)peditor, (nuint*)(null)));
				return ret;
			}
		}

		public static string SaveEditorStateToIniStringS(ref ImNodesEditorContext editor, nuint* dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				string ret = Marshal.PtrToStringAnsi((nint)SaveEditorStateToIniString((ImNodesEditorContext*)peditor, dataSize));
				return ret;
			}
		}

		public static byte* SaveEditorStateToIniString(ref ImNodesEditorContext editor)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* ret = SaveEditorStateToIniString((ImNodesEditorContext*)peditor, (nuint*)(null));
				return ret;
			}
		}

		public static byte* SaveEditorStateToIniString(ref ImNodesEditorContext editor, nuint* dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* ret = SaveEditorStateToIniString((ImNodesEditorContext*)peditor, dataSize);
				return ret;
			}
		}

		public static string SaveEditorStateToIniStringS(ImNodesEditorContext* editor, ref nuint dataSize)
		{
			fixed (nuint* pdataSize = &dataSize)
			{
				string ret = Marshal.PtrToStringAnsi((nint)SaveEditorStateToIniString(editor, (nuint*)pdataSize));
				return ret;
			}
		}

		public static byte* SaveEditorStateToIniString(ImNodesEditorContext* editor, ref nuint dataSize)
		{
			fixed (nuint* pdataSize = &dataSize)
			{
				byte* ret = SaveEditorStateToIniString(editor, (nuint*)pdataSize);
				return ret;
			}
		}

		public static string SaveEditorStateToIniStringS(ref ImNodesEditorContext editor, ref nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (nuint* pdataSize = &dataSize)
				{
					string ret = Marshal.PtrToStringAnsi((nint)SaveEditorStateToIniString((ImNodesEditorContext*)peditor, (nuint*)pdataSize));
					return ret;
				}
			}
		}

		public static byte* SaveEditorStateToIniString(ref ImNodesEditorContext editor, ref nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (nuint* pdataSize = &dataSize)
				{
					byte* ret = SaveEditorStateToIniString((ImNodesEditorContext*)peditor, (nuint*)pdataSize);
					return ret;
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_LoadCurrentEditorStateFromIniString")]
		public static extern void LoadCurrentEditorStateFromIniString(byte* data, nuint dataSize);

		public static void LoadCurrentEditorStateFromIniString(ref byte data, nuint dataSize)
		{
			fixed (byte* pdata = &data)
			{
				LoadCurrentEditorStateFromIniString((byte*)pdata, dataSize);
			}
		}

		public static void LoadCurrentEditorStateFromIniString(string data, nuint dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (data != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(data);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(data, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadCurrentEditorStateFromIniString(pStr0, dataSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_LoadEditorStateFromIniString")]
		public static extern void LoadEditorStateFromIniString(ImNodesEditorContext* editor, byte* data, nuint dataSize);

		public static void LoadEditorStateFromIniString(ref ImNodesEditorContext editor, byte* data, nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				LoadEditorStateFromIniString((ImNodesEditorContext*)peditor, data, dataSize);
			}
		}

		public static void LoadEditorStateFromIniString(ImNodesEditorContext* editor, ref byte data, nuint dataSize)
		{
			fixed (byte* pdata = &data)
			{
				LoadEditorStateFromIniString(editor, (byte*)pdata, dataSize);
			}
		}

		public static void LoadEditorStateFromIniString(ImNodesEditorContext* editor, string data, nuint dataSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (data != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(data);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(data, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadEditorStateFromIniString(editor, pStr0, dataSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LoadEditorStateFromIniString(ref ImNodesEditorContext editor, ref byte data, nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (byte* pdata = &data)
				{
					LoadEditorStateFromIniString((ImNodesEditorContext*)peditor, (byte*)pdata, dataSize);
				}
			}
		}

		public static void LoadEditorStateFromIniString(ref ImNodesEditorContext editor, string data, nuint dataSize)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (data != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(data);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(data, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				LoadEditorStateFromIniString((ImNodesEditorContext*)peditor, pStr0, dataSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SaveCurrentEditorStateToIniFile")]
		public static extern void SaveCurrentEditorStateToIniFile(byte* fileName);

		public static void SaveCurrentEditorStateToIniFile(ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				SaveCurrentEditorStateToIniFile((byte*)pfileName);
			}
		}

		public static void SaveCurrentEditorStateToIniFile(string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SaveCurrentEditorStateToIniFile(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_SaveEditorStateToIniFile")]
		public static extern void SaveEditorStateToIniFile(ImNodesEditorContext* editor, byte* fileName);

		public static void SaveEditorStateToIniFile(ref ImNodesEditorContext editor, byte* fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				SaveEditorStateToIniFile((ImNodesEditorContext*)peditor, fileName);
			}
		}

		public static void SaveEditorStateToIniFile(ImNodesEditorContext* editor, ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				SaveEditorStateToIniFile(editor, (byte*)pfileName);
			}
		}

		public static void SaveEditorStateToIniFile(ImNodesEditorContext* editor, string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SaveEditorStateToIniFile(editor, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void SaveEditorStateToIniFile(ref ImNodesEditorContext editor, ref byte fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (byte* pfileName = &fileName)
				{
					SaveEditorStateToIniFile((ImNodesEditorContext*)peditor, (byte*)pfileName);
				}
			}
		}

		public static void SaveEditorStateToIniFile(ref ImNodesEditorContext editor, string fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fileName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fileName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SaveEditorStateToIniFile((ImNodesEditorContext*)peditor, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_LoadCurrentEditorStateFromIniFile")]
		public static extern void LoadCurrentEditorStateFromIniFile(byte* fileName);

		public static void LoadCurrentEditorStateFromIniFile(ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				LoadCurrentEditorStateFromIniFile((byte*)pfileName);
			}
		}

		public static void LoadCurrentEditorStateFromIniFile(string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadCurrentEditorStateFromIniFile(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "imnodes_LoadEditorStateFromIniFile")]
		public static extern void LoadEditorStateFromIniFile(ImNodesEditorContext* editor, byte* fileName);

		public static void LoadEditorStateFromIniFile(ref ImNodesEditorContext editor, byte* fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				LoadEditorStateFromIniFile((ImNodesEditorContext*)peditor, fileName);
			}
		}

		public static void LoadEditorStateFromIniFile(ImNodesEditorContext* editor, ref byte fileName)
		{
			fixed (byte* pfileName = &fileName)
			{
				LoadEditorStateFromIniFile(editor, (byte*)pfileName);
			}
		}

		public static void LoadEditorStateFromIniFile(ImNodesEditorContext* editor, string fileName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fileName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fileName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadEditorStateFromIniFile(editor, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LoadEditorStateFromIniFile(ref ImNodesEditorContext editor, ref byte fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				fixed (byte* pfileName = &fileName)
				{
					LoadEditorStateFromIniFile((ImNodesEditorContext*)peditor, (byte*)pfileName);
				}
			}
		}

		public static void LoadEditorStateFromIniFile(ref ImNodesEditorContext editor, string fileName)
		{
			fixed (ImNodesEditorContext* peditor = &editor)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fileName != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fileName);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fileName, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				LoadEditorStateFromIniFile((ImNodesEditorContext*)peditor, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// needed for io.link_detach_with_modifier_click.modifier = 
		/// &ImGui
		/// ::GetIO().KeyCtrl
		/// </summary>
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "getIOKeyCtrlPtr")]
		public static extern bool* GetIOKeyCtrlPtr();

	}
}
