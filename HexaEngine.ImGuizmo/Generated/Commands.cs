// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Numerics;
using HexaEngine.ImGui;

namespace HexaEngine.ImGuizmo
{
	public unsafe partial class ImGuizmo
	{
		internal const string LibName = "cimguizmo";

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_SetDrawlist")]
		public static extern void SetDrawlist(ImDrawList* drawlist);

		public static void SetDrawlist(ref ImDrawList drawlist)
		{
			fixed (ImDrawList* pdrawlist = &drawlist)
			{
				SetDrawlist((ImDrawList*)pdrawlist);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_BeginFrame")]
		public static extern void BeginFrame();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_SetImGuiContext")]
		public static extern void SetImGuiContext(ImGuiContext* ctx);

		public static void SetImGuiContext(ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				SetImGuiContext((ImGuiContext*)pctx);
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_IsOver_Nil")]
		public static extern bool IsOver();

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_IsUsing")]
		public static extern bool IsUsing();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_Enable")]
		public static extern void Enable(bool enable);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_DecomposeMatrixToComponents")]
		public static extern void DecomposeMatrixToComponents(float* matrix, float* translation, float* rotation, float* scale);

		public static void DecomposeMatrixToComponents(ref float matrix, float* translation, float* rotation, float* scale)
		{
			fixed (float* pmatrix = &matrix)
			{
				DecomposeMatrixToComponents((float*)pmatrix, translation, rotation, scale);
			}
		}

		public static void DecomposeMatrixToComponents(float* matrix, ref float translation, float* rotation, float* scale)
		{
			fixed (float* ptranslation = &translation)
			{
				DecomposeMatrixToComponents(matrix, (float*)ptranslation, rotation, scale);
			}
		}

		public static void DecomposeMatrixToComponents(ref float matrix, ref float translation, float* rotation, float* scale)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* ptranslation = &translation)
				{
					DecomposeMatrixToComponents((float*)pmatrix, (float*)ptranslation, rotation, scale);
				}
			}
		}

		public static void DecomposeMatrixToComponents(float* matrix, float* translation, ref float rotation, float* scale)
		{
			fixed (float* protation = &rotation)
			{
				DecomposeMatrixToComponents(matrix, translation, (float*)protation, scale);
			}
		}

		public static void DecomposeMatrixToComponents(ref float matrix, float* translation, ref float rotation, float* scale)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* protation = &rotation)
				{
					DecomposeMatrixToComponents((float*)pmatrix, translation, (float*)protation, scale);
				}
			}
		}

		public static void DecomposeMatrixToComponents(float* matrix, ref float translation, ref float rotation, float* scale)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* protation = &rotation)
				{
					DecomposeMatrixToComponents(matrix, (float*)ptranslation, (float*)protation, scale);
				}
			}
		}

		public static void DecomposeMatrixToComponents(ref float matrix, ref float translation, ref float rotation, float* scale)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* ptranslation = &translation)
				{
					fixed (float* protation = &rotation)
					{
						DecomposeMatrixToComponents((float*)pmatrix, (float*)ptranslation, (float*)protation, scale);
					}
				}
			}
		}

		public static void DecomposeMatrixToComponents(float* matrix, float* translation, float* rotation, ref float scale)
		{
			fixed (float* pscale = &scale)
			{
				DecomposeMatrixToComponents(matrix, translation, rotation, (float*)pscale);
			}
		}

		public static void DecomposeMatrixToComponents(ref float matrix, float* translation, float* rotation, ref float scale)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pscale = &scale)
				{
					DecomposeMatrixToComponents((float*)pmatrix, translation, rotation, (float*)pscale);
				}
			}
		}

		public static void DecomposeMatrixToComponents(float* matrix, ref float translation, float* rotation, ref float scale)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* pscale = &scale)
				{
					DecomposeMatrixToComponents(matrix, (float*)ptranslation, rotation, (float*)pscale);
				}
			}
		}

		public static void DecomposeMatrixToComponents(ref float matrix, ref float translation, float* rotation, ref float scale)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* ptranslation = &translation)
				{
					fixed (float* pscale = &scale)
					{
						DecomposeMatrixToComponents((float*)pmatrix, (float*)ptranslation, rotation, (float*)pscale);
					}
				}
			}
		}

		public static void DecomposeMatrixToComponents(float* matrix, float* translation, ref float rotation, ref float scale)
		{
			fixed (float* protation = &rotation)
			{
				fixed (float* pscale = &scale)
				{
					DecomposeMatrixToComponents(matrix, translation, (float*)protation, (float*)pscale);
				}
			}
		}

		public static void DecomposeMatrixToComponents(ref float matrix, float* translation, ref float rotation, ref float scale)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* protation = &rotation)
				{
					fixed (float* pscale = &scale)
					{
						DecomposeMatrixToComponents((float*)pmatrix, translation, (float*)protation, (float*)pscale);
					}
				}
			}
		}

		public static void DecomposeMatrixToComponents(float* matrix, ref float translation, ref float rotation, ref float scale)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* protation = &rotation)
				{
					fixed (float* pscale = &scale)
					{
						DecomposeMatrixToComponents(matrix, (float*)ptranslation, (float*)protation, (float*)pscale);
					}
				}
			}
		}

		public static void DecomposeMatrixToComponents(ref float matrix, ref float translation, ref float rotation, ref float scale)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* ptranslation = &translation)
				{
					fixed (float* protation = &rotation)
					{
						fixed (float* pscale = &scale)
						{
							DecomposeMatrixToComponents((float*)pmatrix, (float*)ptranslation, (float*)protation, (float*)pscale);
						}
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_RecomposeMatrixFromComponents")]
		public static extern void RecomposeMatrixFromComponents(float* translation, float* rotation, float* scale, float* matrix);

		public static void RecomposeMatrixFromComponents(ref float translation, float* rotation, float* scale, float* matrix)
		{
			fixed (float* ptranslation = &translation)
			{
				RecomposeMatrixFromComponents((float*)ptranslation, rotation, scale, matrix);
			}
		}

		public static void RecomposeMatrixFromComponents(float* translation, ref float rotation, float* scale, float* matrix)
		{
			fixed (float* protation = &rotation)
			{
				RecomposeMatrixFromComponents(translation, (float*)protation, scale, matrix);
			}
		}

		public static void RecomposeMatrixFromComponents(ref float translation, ref float rotation, float* scale, float* matrix)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* protation = &rotation)
				{
					RecomposeMatrixFromComponents((float*)ptranslation, (float*)protation, scale, matrix);
				}
			}
		}

		public static void RecomposeMatrixFromComponents(float* translation, float* rotation, ref float scale, float* matrix)
		{
			fixed (float* pscale = &scale)
			{
				RecomposeMatrixFromComponents(translation, rotation, (float*)pscale, matrix);
			}
		}

		public static void RecomposeMatrixFromComponents(ref float translation, float* rotation, ref float scale, float* matrix)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* pscale = &scale)
				{
					RecomposeMatrixFromComponents((float*)ptranslation, rotation, (float*)pscale, matrix);
				}
			}
		}

		public static void RecomposeMatrixFromComponents(float* translation, ref float rotation, ref float scale, float* matrix)
		{
			fixed (float* protation = &rotation)
			{
				fixed (float* pscale = &scale)
				{
					RecomposeMatrixFromComponents(translation, (float*)protation, (float*)pscale, matrix);
				}
			}
		}

		public static void RecomposeMatrixFromComponents(ref float translation, ref float rotation, ref float scale, float* matrix)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* protation = &rotation)
				{
					fixed (float* pscale = &scale)
					{
						RecomposeMatrixFromComponents((float*)ptranslation, (float*)protation, (float*)pscale, matrix);
					}
				}
			}
		}

		public static void RecomposeMatrixFromComponents(float* translation, float* rotation, float* scale, ref float matrix)
		{
			fixed (float* pmatrix = &matrix)
			{
				RecomposeMatrixFromComponents(translation, rotation, scale, (float*)pmatrix);
			}
		}

		public static void RecomposeMatrixFromComponents(ref float translation, float* rotation, float* scale, ref float matrix)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* pmatrix = &matrix)
				{
					RecomposeMatrixFromComponents((float*)ptranslation, rotation, scale, (float*)pmatrix);
				}
			}
		}

		public static void RecomposeMatrixFromComponents(float* translation, ref float rotation, float* scale, ref float matrix)
		{
			fixed (float* protation = &rotation)
			{
				fixed (float* pmatrix = &matrix)
				{
					RecomposeMatrixFromComponents(translation, (float*)protation, scale, (float*)pmatrix);
				}
			}
		}

		public static void RecomposeMatrixFromComponents(ref float translation, ref float rotation, float* scale, ref float matrix)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* protation = &rotation)
				{
					fixed (float* pmatrix = &matrix)
					{
						RecomposeMatrixFromComponents((float*)ptranslation, (float*)protation, scale, (float*)pmatrix);
					}
				}
			}
		}

		public static void RecomposeMatrixFromComponents(float* translation, float* rotation, ref float scale, ref float matrix)
		{
			fixed (float* pscale = &scale)
			{
				fixed (float* pmatrix = &matrix)
				{
					RecomposeMatrixFromComponents(translation, rotation, (float*)pscale, (float*)pmatrix);
				}
			}
		}

		public static void RecomposeMatrixFromComponents(ref float translation, float* rotation, ref float scale, ref float matrix)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* pscale = &scale)
				{
					fixed (float* pmatrix = &matrix)
					{
						RecomposeMatrixFromComponents((float*)ptranslation, rotation, (float*)pscale, (float*)pmatrix);
					}
				}
			}
		}

		public static void RecomposeMatrixFromComponents(float* translation, ref float rotation, ref float scale, ref float matrix)
		{
			fixed (float* protation = &rotation)
			{
				fixed (float* pscale = &scale)
				{
					fixed (float* pmatrix = &matrix)
					{
						RecomposeMatrixFromComponents(translation, (float*)protation, (float*)pscale, (float*)pmatrix);
					}
				}
			}
		}

		public static void RecomposeMatrixFromComponents(ref float translation, ref float rotation, ref float scale, ref float matrix)
		{
			fixed (float* ptranslation = &translation)
			{
				fixed (float* protation = &rotation)
				{
					fixed (float* pscale = &scale)
					{
						fixed (float* pmatrix = &matrix)
						{
							RecomposeMatrixFromComponents((float*)ptranslation, (float*)protation, (float*)pscale, (float*)pmatrix);
						}
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_SetRect")]
		public static extern void SetRect(float x, float y, float width, float height);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_SetOrthographic")]
		public static extern void SetOrthographic(bool isOrthographic);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_DrawCubes")]
		public static extern void DrawCubes(float* view, float* projection, float* matrices, int matrixCount);

		public static void DrawCubes(ref float view, float* projection, float* matrices, int matrixCount)
		{
			fixed (float* pview = &view)
			{
				DrawCubes((float*)pview, projection, matrices, matrixCount);
			}
		}

		public static void DrawCubes(float* view, ref float projection, float* matrices, int matrixCount)
		{
			fixed (float* pprojection = &projection)
			{
				DrawCubes(view, (float*)pprojection, matrices, matrixCount);
			}
		}

		public static void DrawCubes(ref float view, ref float projection, float* matrices, int matrixCount)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					DrawCubes((float*)pview, (float*)pprojection, matrices, matrixCount);
				}
			}
		}

		public static void DrawCubes(float* view, float* projection, ref float matrices, int matrixCount)
		{
			fixed (float* pmatrices = &matrices)
			{
				DrawCubes(view, projection, (float*)pmatrices, matrixCount);
			}
		}

		public static void DrawCubes(ref float view, float* projection, ref float matrices, int matrixCount)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrices = &matrices)
				{
					DrawCubes((float*)pview, projection, (float*)pmatrices, matrixCount);
				}
			}
		}

		public static void DrawCubes(float* view, ref float projection, ref float matrices, int matrixCount)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrices = &matrices)
				{
					DrawCubes(view, (float*)pprojection, (float*)pmatrices, matrixCount);
				}
			}
		}

		public static void DrawCubes(ref float view, ref float projection, ref float matrices, int matrixCount)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrices = &matrices)
					{
						DrawCubes((float*)pview, (float*)pprojection, (float*)pmatrices, matrixCount);
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_DrawGrid")]
		public static extern void DrawGrid(float* view, float* projection, float* matrix, float gridSize);

		public static void DrawGrid(ref float view, float* projection, float* matrix, float gridSize)
		{
			fixed (float* pview = &view)
			{
				DrawGrid((float*)pview, projection, matrix, gridSize);
			}
		}

		public static void DrawGrid(float* view, ref float projection, float* matrix, float gridSize)
		{
			fixed (float* pprojection = &projection)
			{
				DrawGrid(view, (float*)pprojection, matrix, gridSize);
			}
		}

		public static void DrawGrid(ref float view, ref float projection, float* matrix, float gridSize)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					DrawGrid((float*)pview, (float*)pprojection, matrix, gridSize);
				}
			}
		}

		public static void DrawGrid(float* view, float* projection, ref float matrix, float gridSize)
		{
			fixed (float* pmatrix = &matrix)
			{
				DrawGrid(view, projection, (float*)pmatrix, gridSize);
			}
		}

		public static void DrawGrid(ref float view, float* projection, ref float matrix, float gridSize)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					DrawGrid((float*)pview, projection, (float*)pmatrix, gridSize);
				}
			}
		}

		public static void DrawGrid(float* view, ref float projection, ref float matrix, float gridSize)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					DrawGrid(view, (float*)pprojection, (float*)pmatrix, gridSize);
				}
			}
		}

		public static void DrawGrid(ref float view, ref float projection, ref float matrix, float gridSize)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						DrawGrid((float*)pview, (float*)pprojection, (float*)pmatrix, gridSize);
					}
				}
			}
		}

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_Manipulate")]
		public static extern bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds, float* boundsSnap);

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix)
		{
			fixed (float* pview = &view)
			{
				bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)(null), (float*)(null), (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix)
		{
			fixed (float* pview = &view)
			{
				bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, (float*)(null), (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap)
		{
			fixed (float* pview = &view)
			{
				bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, snap, (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, snap, localBounds, (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, snap, localBounds, boundsSnap);
				return ret;
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix)
		{
			fixed (float* pprojection = &projection)
			{
				bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)(null), (float*)(null), (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix)
		{
			fixed (float* pprojection = &projection)
			{
				bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)(null), (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap)
		{
			fixed (float* pprojection = &projection)
			{
				bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, localBounds, (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, localBounds, boundsSnap);
				return ret;
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)(null), (float*)(null), (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)(null), (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix)
		{
			fixed (float* pmatrix = &matrix)
			{
				bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)(null), (float*)(null), (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix)
		{
			fixed (float* pmatrix = &matrix)
			{
				bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)(null), (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap)
		{
			fixed (float* pmatrix = &matrix)
			{
				bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pmatrix = &matrix)
			{
				bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, boundsSnap);
				return ret;
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)(null), (float*)(null), (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)(null), (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)(null), (float*)(null), (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)(null), (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)(null), (float*)(null), (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)(null), (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)(null), (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, boundsSnap);
				return ret;
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)(null), (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)(null), (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)(null), (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)(null), (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)(null), (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)(null), (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)(null), (float*)(null), (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)(null), (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap)
		{
			fixed (float* psnap = &snap)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* psnap = &snap)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* psnap = &snap)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, boundsSnap);
				return ret;
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* psnap = &snap)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* psnap = &snap)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)(null), (float*)(null));
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* psnap = &snap)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)(null));
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* psnap = &snap)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, boundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* plocalBounds = &localBounds)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, (float*)(null));
				return ret;
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* plocalBounds = &localBounds)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, boundsSnap);
				return ret;
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)(null));
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, boundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* psnap = &snap)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* psnap = &snap)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* psnap = &snap)
							{
								fixed (float* plocalBounds = &localBounds)
								{
									bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)(null));
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds, float* boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* psnap = &snap)
							{
								fixed (float* plocalBounds = &localBounds)
								{
									bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, boundsSnap);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pboundsSnap = &boundsSnap)
			{
				bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, snap, localBounds, (float*)pboundsSnap);
				return ret;
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pboundsSnap = &boundsSnap)
				{
					bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, snap, localBounds, (float*)pboundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pboundsSnap = &boundsSnap)
				{
					bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, localBounds, (float*)pboundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pboundsSnap = &boundsSnap)
				{
					bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, (float*)pboundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* pboundsSnap = &boundsSnap)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, (float*)pboundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, localBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* psnap = &snap)
			{
				fixed (float* pboundsSnap = &boundsSnap)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, float* localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* psnap = &snap)
							{
								fixed (float* pboundsSnap = &boundsSnap)
								{
									bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, localBounds, (float*)pboundsSnap);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* plocalBounds = &localBounds)
			{
				fixed (float* pboundsSnap = &boundsSnap)
				{
					bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
					return ret;
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, float* snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								fixed (float* pboundsSnap = &boundsSnap)
								{
									bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, snap, (float*)plocalBounds, (float*)pboundsSnap);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* psnap = &snap)
			{
				fixed (float* plocalBounds = &localBounds)
				{
					fixed (float* pboundsSnap = &boundsSnap)
					{
						bool ret = Manipulate(view, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
						return ret;
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float* deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float* deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								fixed (float* pboundsSnap = &boundsSnap)
								{
									bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, deltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pdeltaMatrix = &deltaMatrix)
			{
				fixed (float* psnap = &snap)
				{
					fixed (float* plocalBounds = &localBounds)
					{
						fixed (float* pboundsSnap = &boundsSnap)
						{
							bool ret = Manipulate(view, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
							return ret;
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate((float*)pview, projection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate(view, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, ref float deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								fixed (float* pboundsSnap = &boundsSnap)
								{
									bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, matrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pmatrix = &matrix)
			{
				fixed (float* pdeltaMatrix = &deltaMatrix)
				{
					fixed (float* psnap = &snap)
					{
						fixed (float* plocalBounds = &localBounds)
						{
							fixed (float* pboundsSnap = &boundsSnap)
							{
								bool ret = Manipulate(view, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
								return ret;
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								fixed (float* pboundsSnap = &boundsSnap)
								{
									bool ret = Manipulate((float*)pview, projection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					fixed (float* pdeltaMatrix = &deltaMatrix)
					{
						fixed (float* psnap = &snap)
						{
							fixed (float* plocalBounds = &localBounds)
							{
								fixed (float* pboundsSnap = &boundsSnap)
								{
									bool ret = Manipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		public static bool Manipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, ref float deltaMatrix, ref float snap, ref float localBounds, ref float boundsSnap)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						fixed (float* pdeltaMatrix = &deltaMatrix)
						{
							fixed (float* psnap = &snap)
							{
								fixed (float* plocalBounds = &localBounds)
								{
									fixed (float* pboundsSnap = &boundsSnap)
									{
										bool ret = Manipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, (float*)pdeltaMatrix, (float*)psnap, (float*)plocalBounds, (float*)pboundsSnap);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_ViewManipulate_Float")]
		public static extern void ViewManipulate(float* view, float length, Vector2 position, Vector2 size, uint backgroundColor);

		public static void ViewManipulate(ref float view, float length, Vector2 position, Vector2 size, uint backgroundColor)
		{
			fixed (float* pview = &view)
			{
				ViewManipulate((float*)pview, length, position, size, backgroundColor);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_ViewManipulate_FloatPtr")]
		public static extern void ViewManipulate(float* view, float* projection, Operation operation, Mode mode, float* matrix, float length, Vector2 position, Vector2 size, uint backgroundColor);

		public static void ViewManipulate(ref float view, float* projection, Operation operation, Mode mode, float* matrix, float length, Vector2 position, Vector2 size, uint backgroundColor)
		{
			fixed (float* pview = &view)
			{
				ViewManipulate((float*)pview, projection, operation, mode, matrix, length, position, size, backgroundColor);
			}
		}

		public static void ViewManipulate(float* view, ref float projection, Operation operation, Mode mode, float* matrix, float length, Vector2 position, Vector2 size, uint backgroundColor)
		{
			fixed (float* pprojection = &projection)
			{
				ViewManipulate(view, (float*)pprojection, operation, mode, matrix, length, position, size, backgroundColor);
			}
		}

		public static void ViewManipulate(ref float view, ref float projection, Operation operation, Mode mode, float* matrix, float length, Vector2 position, Vector2 size, uint backgroundColor)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					ViewManipulate((float*)pview, (float*)pprojection, operation, mode, matrix, length, position, size, backgroundColor);
				}
			}
		}

		public static void ViewManipulate(float* view, float* projection, Operation operation, Mode mode, ref float matrix, float length, Vector2 position, Vector2 size, uint backgroundColor)
		{
			fixed (float* pmatrix = &matrix)
			{
				ViewManipulate(view, projection, operation, mode, (float*)pmatrix, length, position, size, backgroundColor);
			}
		}

		public static void ViewManipulate(ref float view, float* projection, Operation operation, Mode mode, ref float matrix, float length, Vector2 position, Vector2 size, uint backgroundColor)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pmatrix = &matrix)
				{
					ViewManipulate((float*)pview, projection, operation, mode, (float*)pmatrix, length, position, size, backgroundColor);
				}
			}
		}

		public static void ViewManipulate(float* view, ref float projection, Operation operation, Mode mode, ref float matrix, float length, Vector2 position, Vector2 size, uint backgroundColor)
		{
			fixed (float* pprojection = &projection)
			{
				fixed (float* pmatrix = &matrix)
				{
					ViewManipulate(view, (float*)pprojection, operation, mode, (float*)pmatrix, length, position, size, backgroundColor);
				}
			}
		}

		public static void ViewManipulate(ref float view, ref float projection, Operation operation, Mode mode, ref float matrix, float length, Vector2 position, Vector2 size, uint backgroundColor)
		{
			fixed (float* pview = &view)
			{
				fixed (float* pprojection = &projection)
				{
					fixed (float* pmatrix = &matrix)
					{
						ViewManipulate((float*)pview, (float*)pprojection, operation, mode, (float*)pmatrix, length, position, size, backgroundColor);
					}
				}
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_SetID")]
		public static extern void SetID(int id);

		[return: MarshalAs(UnmanagedType.Bool)]
		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_IsOver_OPERATION")]
		public static extern bool IsOver(Operation op);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_SetGizmoSizeClipSpace")]
		public static extern void SetGizmoSizeClipSpace(float value);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_AllowAxisFlip")]
		public static extern void AllowAxisFlip(bool value);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_SetAxisLimit")]
		public static extern void SetAxisLimit(float value);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_SetPlaneLimit")]
		public static extern void SetPlaneLimit(float value);

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Style_Style")]
		public static extern Style* Style();

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "Style_destroy")]
		public static extern void Destroy(Style* self);

		public static void Destroy(ref Style self)
		{
			fixed (Style* pself = &self)
			{
				Destroy((Style*)pself);
			}
		}

		[DllImport(LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ImGuizmo_GetStyle")]
		public static extern Style* GetStyle();

	}
}
