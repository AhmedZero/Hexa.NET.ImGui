// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImGui.Backends
{
	public unsafe partial class ImGuiBackends
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplGlfwInitForOpenGLNative(GLFWwindow* window, byte installCallbacks)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLFWwindow*, byte, byte>)funcTable[0])(window, installCallbacks);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte, byte>)funcTable[0])((nint)window, installCallbacks);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplGlfwInitForOpenGL(GLFWwindowPtr window, bool installCallbacks)
		{
			byte ret = ImplGlfwInitForOpenGLNative(window, installCallbacks ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplGlfwInitForOpenGL(ref GLFWwindow window, bool installCallbacks)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				byte ret = ImplGlfwInitForOpenGLNative((GLFWwindow*)pwindow, installCallbacks ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplGlfwInitForVulkanNative(GLFWwindow* window, byte installCallbacks)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLFWwindow*, byte, byte>)funcTable[1])(window, installCallbacks);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte, byte>)funcTable[1])((nint)window, installCallbacks);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplGlfwInitForVulkan(GLFWwindowPtr window, bool installCallbacks)
		{
			byte ret = ImplGlfwInitForVulkanNative(window, installCallbacks ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplGlfwInitForVulkan(ref GLFWwindow window, bool installCallbacks)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				byte ret = ImplGlfwInitForVulkanNative((GLFWwindow*)pwindow, installCallbacks ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplGlfwInitForOtherNative(GLFWwindow* window, byte installCallbacks)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLFWwindow*, byte, byte>)funcTable[2])(window, installCallbacks);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte, byte>)funcTable[2])((nint)window, installCallbacks);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplGlfwInitForOther(GLFWwindowPtr window, bool installCallbacks)
		{
			byte ret = ImplGlfwInitForOtherNative(window, installCallbacks ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplGlfwInitForOther(ref GLFWwindow window, bool installCallbacks)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				byte ret = ImplGlfwInitForOtherNative((GLFWwindow*)pwindow, installCallbacks ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[3])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[3])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwShutdown()
		{
			ImplGlfwShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwNewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[4])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[4])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwNewFrame()
		{
			ImplGlfwNewFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwInstallCallbacksNative(GLFWwindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWwindow*, void>)funcTable[5])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[5])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwInstallCallbacks(GLFWwindowPtr window)
		{
			ImplGlfwInstallCallbacksNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwInstallCallbacks(ref GLFWwindow window)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				ImplGlfwInstallCallbacksNative((GLFWwindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwRestoreCallbacksNative(GLFWwindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWwindow*, void>)funcTable[6])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[6])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwRestoreCallbacks(GLFWwindowPtr window)
		{
			ImplGlfwRestoreCallbacksNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwRestoreCallbacks(ref GLFWwindow window)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				ImplGlfwRestoreCallbacksNative((GLFWwindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwSetCallbacksChainForAllWindowsNative(byte chainForAllWindows)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[7])(chainForAllWindows);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[7])(chainForAllWindows);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwSetCallbacksChainForAllWindows(bool chainForAllWindows)
		{
			ImplGlfwSetCallbacksChainForAllWindowsNative(chainForAllWindows ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwWindowFocusCallbackNative(GLFWwindow* window, int focused)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWwindow*, int, void>)funcTable[8])(window, focused);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[8])((nint)window, focused);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwWindowFocusCallback(GLFWwindowPtr window, int focused)
		{
			ImplGlfwWindowFocusCallbackNative(window, focused);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwWindowFocusCallback(ref GLFWwindow window, int focused)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				ImplGlfwWindowFocusCallbackNative((GLFWwindow*)pwindow, focused);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwCursorEnterCallbackNative(GLFWwindow* window, int entered)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWwindow*, int, void>)funcTable[9])(window, entered);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[9])((nint)window, entered);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwCursorEnterCallback(GLFWwindowPtr window, int entered)
		{
			ImplGlfwCursorEnterCallbackNative(window, entered);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwCursorEnterCallback(ref GLFWwindow window, int entered)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				ImplGlfwCursorEnterCallbackNative((GLFWwindow*)pwindow, entered);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwCursorPosCallbackNative(GLFWwindow* window, double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWwindow*, double, double, void>)funcTable[10])(window, x, y);
			#else
			((delegate* unmanaged[Cdecl]<nint, double, double, void>)funcTable[10])((nint)window, x, y);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwCursorPosCallback(GLFWwindowPtr window, double x, double y)
		{
			ImplGlfwCursorPosCallbackNative(window, x, y);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwCursorPosCallback(ref GLFWwindow window, double x, double y)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				ImplGlfwCursorPosCallbackNative((GLFWwindow*)pwindow, x, y);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwMouseButtonCallbackNative(GLFWwindow* window, int button, int action, int mods)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWwindow*, int, int, int, void>)funcTable[11])(window, button, action, mods);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, void>)funcTable[11])((nint)window, button, action, mods);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwMouseButtonCallback(GLFWwindowPtr window, int button, int action, int mods)
		{
			ImplGlfwMouseButtonCallbackNative(window, button, action, mods);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwMouseButtonCallback(ref GLFWwindow window, int button, int action, int mods)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				ImplGlfwMouseButtonCallbackNative((GLFWwindow*)pwindow, button, action, mods);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwScrollCallbackNative(GLFWwindow* window, double xoffset, double yoffset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWwindow*, double, double, void>)funcTable[12])(window, xoffset, yoffset);
			#else
			((delegate* unmanaged[Cdecl]<nint, double, double, void>)funcTable[12])((nint)window, xoffset, yoffset);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwScrollCallback(GLFWwindowPtr window, double xoffset, double yoffset)
		{
			ImplGlfwScrollCallbackNative(window, xoffset, yoffset);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwScrollCallback(ref GLFWwindow window, double xoffset, double yoffset)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				ImplGlfwScrollCallbackNative((GLFWwindow*)pwindow, xoffset, yoffset);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwKeyCallbackNative(GLFWwindow* window, int key, int scancode, int action, int mods)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWwindow*, int, int, int, int, void>)funcTable[13])(window, key, scancode, action, mods);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, void>)funcTable[13])((nint)window, key, scancode, action, mods);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwKeyCallback(GLFWwindowPtr window, int key, int scancode, int action, int mods)
		{
			ImplGlfwKeyCallbackNative(window, key, scancode, action, mods);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwKeyCallback(ref GLFWwindow window, int key, int scancode, int action, int mods)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				ImplGlfwKeyCallbackNative((GLFWwindow*)pwindow, key, scancode, action, mods);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwCharCallbackNative(GLFWwindow* window, uint c)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWwindow*, uint, void>)funcTable[14])(window, c);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)funcTable[14])((nint)window, c);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwCharCallback(GLFWwindowPtr window, uint c)
		{
			ImplGlfwCharCallbackNative(window, c);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwCharCallback(ref GLFWwindow window, uint c)
		{
			fixed (GLFWwindow* pwindow = &window)
			{
				ImplGlfwCharCallbackNative((GLFWwindow*)pwindow, c);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwMonitorCallbackNative(GLFWmonitor* monitor, int evnt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFWmonitor*, int, void>)funcTable[15])(monitor, evnt);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[15])((nint)monitor, evnt);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwMonitorCallback(GLFWmonitorPtr monitor, int evnt)
		{
			ImplGlfwMonitorCallbackNative(monitor, evnt);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwMonitorCallback(ref GLFWmonitor monitor, int evnt)
		{
			fixed (GLFWmonitor* pmonitor = &monitor)
			{
				ImplGlfwMonitorCallbackNative((GLFWmonitor*)pmonitor, evnt);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplGlfwSleepNative(int milliseconds)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[16])(milliseconds);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[16])(milliseconds);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplGlfwSleep(int milliseconds)
		{
			ImplGlfwSleepNative(milliseconds);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplOpenGL3InitNative(byte* glslVersion)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)funcTable[17])(glslVersion);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[17])((nint)glslVersion);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplOpenGL3Init(byte* glslVersion)
		{
			byte ret = ImplOpenGL3InitNative(glslVersion);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplOpenGL3Init(ref byte glslVersion)
		{
			fixed (byte* pglslVersion = &glslVersion)
			{
				byte ret = ImplOpenGL3InitNative((byte*)pglslVersion);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplOpenGL3Init(ReadOnlySpan<byte> glslVersion)
		{
			fixed (byte* pglslVersion = glslVersion)
			{
				byte ret = ImplOpenGL3InitNative((byte*)pglslVersion);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplOpenGL3Init(string glslVersion)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (glslVersion != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(glslVersion);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(glslVersion, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ImplOpenGL3InitNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL3ShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[18])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[18])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL3Shutdown()
		{
			ImplOpenGL3ShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL3NewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[19])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[19])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL3NewFrame()
		{
			ImplOpenGL3NewFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL3RenderDrawDataNative(ImDrawData* drawData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, void>)funcTable[20])(drawData);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[20])((nint)drawData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL3RenderDrawData(ImDrawData* drawData)
		{
			ImplOpenGL3RenderDrawDataNative(drawData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL3RenderDrawData(ref ImDrawData drawData)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				ImplOpenGL3RenderDrawDataNative((ImDrawData*)pdrawData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplOpenGL3CreateFontsTextureNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[21])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[21])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplOpenGL3CreateFontsTexture()
		{
			byte ret = ImplOpenGL3CreateFontsTextureNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL3DestroyFontsTextureNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[22])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[22])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL3DestroyFontsTexture()
		{
			ImplOpenGL3DestroyFontsTextureNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplOpenGL3CreateDeviceObjectsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[23])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[23])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplOpenGL3CreateDeviceObjects()
		{
			byte ret = ImplOpenGL3CreateDeviceObjectsNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL3DestroyDeviceObjectsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[24])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[24])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL3DestroyDeviceObjects()
		{
			ImplOpenGL3DestroyDeviceObjectsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplOpenGL2InitNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[25])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[25])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplOpenGL2Init()
		{
			byte ret = ImplOpenGL2InitNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL2ShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[26])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[26])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL2Shutdown()
		{
			ImplOpenGL2ShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL2NewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[27])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[27])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL2NewFrame()
		{
			ImplOpenGL2NewFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL2RenderDrawDataNative(ImDrawData* drawData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, void>)funcTable[28])(drawData);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[28])((nint)drawData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL2RenderDrawData(ImDrawData* drawData)
		{
			ImplOpenGL2RenderDrawDataNative(drawData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL2RenderDrawData(ref ImDrawData drawData)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				ImplOpenGL2RenderDrawDataNative((ImDrawData*)pdrawData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplOpenGL2CreateFontsTextureNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[29])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[29])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplOpenGL2CreateFontsTexture()
		{
			byte ret = ImplOpenGL2CreateFontsTextureNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL2DestroyFontsTextureNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[30])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[30])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL2DestroyFontsTexture()
		{
			ImplOpenGL2DestroyFontsTextureNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplOpenGL2CreateDeviceObjectsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[31])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[31])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplOpenGL2CreateDeviceObjects()
		{
			byte ret = ImplOpenGL2CreateDeviceObjectsNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplOpenGL2DestroyDeviceObjectsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[32])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[32])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplOpenGL2DestroyDeviceObjects()
		{
			ImplOpenGL2DestroyDeviceObjectsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplSDL2InitForOpenGLNative(SDLWindow* window, void* sdlGlContext)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, void*, byte>)funcTable[33])(window, sdlGlContext);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[33])((nint)window, (nint)sdlGlContext);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForOpenGL(SDLWindowPtr window, void* sdlGlContext)
		{
			byte ret = ImplSDL2InitForOpenGLNative(window, sdlGlContext);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForOpenGL(ref SDLWindow window, void* sdlGlContext)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte ret = ImplSDL2InitForOpenGLNative((SDLWindow*)pwindow, sdlGlContext);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplSDL2InitForVulkanNative(SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, byte>)funcTable[34])(window);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[34])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForVulkan(SDLWindowPtr window)
		{
			byte ret = ImplSDL2InitForVulkanNative(window);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForVulkan(ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte ret = ImplSDL2InitForVulkanNative((SDLWindow*)pwindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplSDL2InitForD3DNative(SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, byte>)funcTable[35])(window);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[35])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForD3D(SDLWindowPtr window)
		{
			byte ret = ImplSDL2InitForD3DNative(window);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForD3D(ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte ret = ImplSDL2InitForD3DNative((SDLWindow*)pwindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplSDL2InitForMetalNative(SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, byte>)funcTable[36])(window);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[36])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForMetal(SDLWindowPtr window)
		{
			byte ret = ImplSDL2InitForMetalNative(window);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForMetal(ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte ret = ImplSDL2InitForMetalNative((SDLWindow*)pwindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplSDL2InitForSDLRendererNative(SDLWindow* window, SDLRenderer* renderer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLRenderer*, byte>)funcTable[37])(window, renderer);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[37])((nint)window, (nint)renderer);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForSDLRenderer(SDLWindowPtr window, SDLRendererPtr renderer)
		{
			byte ret = ImplSDL2InitForSDLRendererNative(window, renderer);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForSDLRenderer(ref SDLWindow window, SDLRendererPtr renderer)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte ret = ImplSDL2InitForSDLRendererNative((SDLWindow*)pwindow, renderer);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForSDLRenderer(SDLWindowPtr window, ref SDLRenderer renderer)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				byte ret = ImplSDL2InitForSDLRendererNative(window, (SDLRenderer*)prenderer);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForSDLRenderer(ref SDLWindow window, ref SDLRenderer renderer)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (SDLRenderer* prenderer = &renderer)
				{
					byte ret = ImplSDL2InitForSDLRendererNative((SDLWindow*)pwindow, (SDLRenderer*)prenderer);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplSDL2InitForOtherNative(SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, byte>)funcTable[38])(window);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[38])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForOther(SDLWindowPtr window)
		{
			byte ret = ImplSDL2InitForOtherNative(window);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2InitForOther(ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte ret = ImplSDL2InitForOtherNative((SDLWindow*)pwindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplSDL2ShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[39])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[39])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplSDL2Shutdown()
		{
			ImplSDL2ShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplSDL2NewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[40])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[40])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplSDL2NewFrame()
		{
			ImplSDL2NewFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplSDL2ProcessEventNative(SDLEvent* evnt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEvent*, byte>)funcTable[41])(evnt);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[41])((nint)evnt);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2ProcessEvent(SDLEventPtr evnt)
		{
			byte ret = ImplSDL2ProcessEventNative(evnt);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplSDL2ProcessEvent(ref SDLEvent evnt)
		{
			fixed (SDLEvent* pevnt = &evnt)
			{
				byte ret = ImplSDL2ProcessEventNative((SDLEvent*)pevnt);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplSDL2SetGamepadModeNative(ImGuiImplSDL2GamepadMode mode, SDLGameController** manualGamepadsArray, int manualGamepadsCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiImplSDL2GamepadMode, SDLGameController**, int, void>)funcTable[42])(mode, manualGamepadsArray, manualGamepadsCount);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiImplSDL2GamepadMode, nint, int, void>)funcTable[42])(mode, (nint)manualGamepadsArray, manualGamepadsCount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplSDL2SetGamepadMode(ImGuiImplSDL2GamepadMode mode, SDLGameControllerPtrPtr manualGamepadsArray, int manualGamepadsCount)
		{
			ImplSDL2SetGamepadModeNative(mode, manualGamepadsArray, manualGamepadsCount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplSDL2SetGamepadMode(ImGuiImplSDL2GamepadMode mode, ref SDLGameController* manualGamepadsArray, int manualGamepadsCount)
		{
			fixed (SDLGameController** pmanualGamepadsArray = &manualGamepadsArray)
			{
				ImplSDL2SetGamepadModeNative(mode, (SDLGameController**)pmanualGamepadsArray, manualGamepadsCount);
			}
		}

		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplDX11InitNative(ID3D11Device* device, ID3D11DeviceContext* deviceContext)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ID3D11Device*, ID3D11DeviceContext*, byte>)funcTable[43])(device, deviceContext);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[43])((nint)device, (nint)deviceContext);
			#endif
		}

		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		public static bool ImplDX11Init(ID3D11DevicePtr device, ID3D11DeviceContextPtr deviceContext)
		{
			byte ret = ImplDX11InitNative(device, deviceContext);
			return ret != 0;
		}

		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		public static bool ImplDX11Init(ref ID3D11Device device, ID3D11DeviceContextPtr deviceContext)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				byte ret = ImplDX11InitNative((ID3D11Device*)pdevice, deviceContext);
				return ret != 0;
			}
		}

		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		public static bool ImplDX11Init(ID3D11DevicePtr device, ref ID3D11DeviceContext deviceContext)
		{
			fixed (ID3D11DeviceContext* pdeviceContext = &deviceContext)
			{
				byte ret = ImplDX11InitNative(device, (ID3D11DeviceContext*)pdeviceContext);
				return ret != 0;
			}
		}

		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		public static bool ImplDX11Init(ref ID3D11Device device, ref ID3D11DeviceContext deviceContext)
		{
			fixed (ID3D11Device* pdevice = &device)
			{
				fixed (ID3D11DeviceContext* pdeviceContext = &deviceContext)
				{
					byte ret = ImplDX11InitNative((ID3D11Device*)pdevice, (ID3D11DeviceContext*)pdeviceContext);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplDX11ShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[44])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[44])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplDX11Shutdown()
		{
			ImplDX11ShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplDX11NewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[45])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[45])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplDX11NewFrame()
		{
			ImplDX11NewFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplDX11RenderDrawDataNative(ImDrawData* drawData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, void>)funcTable[46])(drawData);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[46])((nint)drawData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplDX11RenderDrawData(ImDrawData* drawData)
		{
			ImplDX11RenderDrawDataNative(drawData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImplDX11RenderDrawData(ref ImDrawData drawData)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				ImplDX11RenderDrawDataNative((ImDrawData*)pdrawData);
			}
		}

		/// <summary>
		/// Use if you want to reset your rendering device without losing Dear ImGui state.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImplDX11InvalidateDeviceObjectsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[47])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[47])();
			#endif
		}

		/// <summary>
		/// Use if you want to reset your rendering device without losing Dear ImGui state.<br/>
		/// </summary>
		public static void ImplDX11InvalidateDeviceObjects()
		{
			ImplDX11InvalidateDeviceObjectsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ImplDX11CreateDeviceObjectsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[48])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[48])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ImplDX11CreateDeviceObjects()
		{
			byte ret = ImplDX11CreateDeviceObjectsNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCurrentContextNative(ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)funcTable[49])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[49])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetCurrentContext(ImGuiContext* ctx)
		{
			SetCurrentContextNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void SetCurrentContext(ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				SetCurrentContextNative((ImGuiContext*)pctx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImGuiContext* GetCurrentContextNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiContext*>)funcTable[50])();
			#else
			return (ImGuiContext*)((delegate* unmanaged[Cdecl]<nint>)funcTable[50])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImGuiContext* GetCurrentContext()
		{
			ImGuiContext* ret = GetCurrentContextNative();
			return ret;
		}

	}
}
