// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		public static void ImMul(Vector2* output, Vector2 lhs, Vector2 rhs)
		{
			ImMulNative(output, lhs, rhs);
		}

		public static void ImMul(ref Vector2 output, Vector2 lhs, Vector2 rhs)
		{
			fixed (Vector2* poutput = &output)
			{
				ImMulNative((Vector2*)poutput, lhs, rhs);
			}
		}

		internal static byte ImIsFloatAboveGuaranteedIntegerPrecisionNative(float f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, byte>)vt[752])(f);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<float, byte>)vt[752])(f);
			#endif
		}

		public static bool ImIsFloatAboveGuaranteedIntegerPrecision(float f)
		{
			byte ret = ImIsFloatAboveGuaranteedIntegerPrecisionNative(f);
			return ret != 0;
		}

		internal static float ImExponentialMovingAverageNative(float avg, float sample, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, int, float>)vt[753])(avg, sample, n);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, int, float>)vt[753])(avg, sample, n);
			#endif
		}

		public static float ImExponentialMovingAverage(float avg, float sample, int n)
		{
			float ret = ImExponentialMovingAverageNative(avg, sample, n);
			return ret;
		}

		internal static void ImBezierCubicCalcNative(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, float, void>)vt[754])(output, p1, p2, p3, p4, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, float, void>)vt[754])((nint)output, p1, p2, p3, p4, t);
			#endif
		}

		public static Vector2 ImBezierCubicCalc(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			Vector2 ret;
			ImBezierCubicCalcNative(&ret, p1, p2, p3, p4, t);
			return ret;
		}

		public static void ImBezierCubicCalc(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			ImBezierCubicCalcNative(output, p1, p2, p3, p4, t);
		}

		public static void ImBezierCubicCalc(ref Vector2 output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			fixed (Vector2* poutput = &output)
			{
				ImBezierCubicCalcNative((Vector2*)poutput, p1, p2, p3, p4, t);
			}
		}

		internal static void ImBezierCubicClosestPointNative(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, Vector2, int, void>)vt[755])(output, p1, p2, p3, p4, p, numSegments);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, Vector2, int, void>)vt[755])((nint)output, p1, p2, p3, p4, p, numSegments);
			#endif
		}

		public static Vector2 ImBezierCubicClosestPoint(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			Vector2 ret;
			ImBezierCubicClosestPointNative(&ret, p1, p2, p3, p4, p, numSegments);
			return ret;
		}

		public static void ImBezierCubicClosestPoint(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			ImBezierCubicClosestPointNative(output, p1, p2, p3, p4, p, numSegments);
		}

		public static void ImBezierCubicClosestPoint(ref Vector2 output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			fixed (Vector2* poutput = &output)
			{
				ImBezierCubicClosestPointNative((Vector2*)poutput, p1, p2, p3, p4, p, numSegments);
			}
		}

		internal static void ImBezierCubicClosestPointCasteljauNative(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, Vector2, float, void>)vt[756])(output, p1, p2, p3, p4, p, tessTol);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, Vector2, float, void>)vt[756])((nint)output, p1, p2, p3, p4, p, tessTol);
			#endif
		}

		public static Vector2 ImBezierCubicClosestPointCasteljau(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			Vector2 ret;
			ImBezierCubicClosestPointCasteljauNative(&ret, p1, p2, p3, p4, p, tessTol);
			return ret;
		}

		public static void ImBezierCubicClosestPointCasteljau(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			ImBezierCubicClosestPointCasteljauNative(output, p1, p2, p3, p4, p, tessTol);
		}

		public static void ImBezierCubicClosestPointCasteljau(ref Vector2 output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			fixed (Vector2* poutput = &output)
			{
				ImBezierCubicClosestPointCasteljauNative((Vector2*)poutput, p1, p2, p3, p4, p, tessTol);
			}
		}

		internal static void ImBezierQuadraticCalcNative(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, float, void>)vt[757])(output, p1, p2, p3, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, float, void>)vt[757])((nint)output, p1, p2, p3, t);
			#endif
		}

		public static Vector2 ImBezierQuadraticCalc(Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			Vector2 ret;
			ImBezierQuadraticCalcNative(&ret, p1, p2, p3, t);
			return ret;
		}

		public static void ImBezierQuadraticCalc(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			ImBezierQuadraticCalcNative(output, p1, p2, p3, t);
		}

		public static void ImBezierQuadraticCalc(ref Vector2 output, Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			fixed (Vector2* poutput = &output)
			{
				ImBezierQuadraticCalcNative((Vector2*)poutput, p1, p2, p3, t);
			}
		}

		internal static void ImLineClosestPointNative(Vector2* output, Vector2 a, Vector2 b, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[758])(output, a, b, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, void>)vt[758])((nint)output, a, b, p);
			#endif
		}

		public static Vector2 ImLineClosestPoint(Vector2 a, Vector2 b, Vector2 p)
		{
			Vector2 ret;
			ImLineClosestPointNative(&ret, a, b, p);
			return ret;
		}

		public static void ImLineClosestPoint(Vector2* output, Vector2 a, Vector2 b, Vector2 p)
		{
			ImLineClosestPointNative(output, a, b, p);
		}

		public static void ImLineClosestPoint(ref Vector2 output, Vector2 a, Vector2 b, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				ImLineClosestPointNative((Vector2*)poutput, a, b, p);
			}
		}

		internal static byte ImTriangleContainsPointNative(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, byte>)vt[759])(a, b, c, p);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, byte>)vt[759])(a, b, c, p);
			#endif
		}

		public static bool ImTriangleContainsPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			byte ret = ImTriangleContainsPointNative(a, b, c, p);
			return ret != 0;
		}

		internal static void ImTriangleClosestPointNative(Vector2* output, Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, void>)vt[760])(output, a, b, c, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, void>)vt[760])((nint)output, a, b, c, p);
			#endif
		}

		public static Vector2 ImTriangleClosestPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			Vector2 ret;
			ImTriangleClosestPointNative(&ret, a, b, c, p);
			return ret;
		}

		public static void ImTriangleClosestPoint(Vector2* output, Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			ImTriangleClosestPointNative(output, a, b, c, p);
		}

		public static void ImTriangleClosestPoint(ref Vector2 output, Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				ImTriangleClosestPointNative((Vector2*)poutput, a, b, c, p);
			}
		}

		internal static void ImTriangleBarycentricCoordsNative(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, float* outV, float* outW)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, float*, float*, float*, void>)vt[761])(a, b, c, p, outU, outV, outW);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, nint, nint, nint, void>)vt[761])(a, b, c, p, (nint)outU, (nint)outV, (nint)outW);
			#endif
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, float* outV, float* outW)
		{
			ImTriangleBarycentricCoordsNative(a, b, c, p, outU, outV, outW);
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, float* outV, float* outW)
		{
			fixed (float* poutU = &outU)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, outV, outW);
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, ref float outV, float* outW)
		{
			fixed (float* poutV = &outV)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, outU, (float*)poutV, outW);
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, ref float outV, float* outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutV = &outV)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, (float*)poutV, outW);
				}
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, float* outV, ref float outW)
		{
			fixed (float* poutW = &outW)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, outU, outV, (float*)poutW);
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, float* outV, ref float outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutW = &outW)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, outV, (float*)poutW);
				}
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, ref float outV, ref float outW)
		{
			fixed (float* poutV = &outV)
			{
				fixed (float* poutW = &outW)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, outU, (float*)poutV, (float*)poutW);
				}
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, ref float outV, ref float outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutV = &outV)
				{
					fixed (float* poutW = &outW)
					{
						ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, (float*)poutV, (float*)poutW);
					}
				}
			}
		}

		internal static float ImTriangleAreaNative(Vector2 a, Vector2 b, Vector2 c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, float>)vt[762])(a, b, c);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, float>)vt[762])(a, b, c);
			#endif
		}

		public static float ImTriangleArea(Vector2 a, Vector2 b, Vector2 c)
		{
			float ret = ImTriangleAreaNative(a, b, c);
			return ret;
		}

		internal static byte ImTriangleIsClockwiseNative(Vector2 a, Vector2 b, Vector2 c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, byte>)vt[763])(a, b, c);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, byte>)vt[763])(a, b, c);
			#endif
		}

		public static bool ImTriangleIsClockwise(Vector2 a, Vector2 b, Vector2 c)
		{
			byte ret = ImTriangleIsClockwiseNative(a, b, c);
			return ret != 0;
		}

		internal static ImVec1* ImVec1ImVec1NilNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImVec1*>)vt[764])();
			#else
			return (ImVec1*)((delegate* unmanaged[Cdecl]<nint>)vt[764])();
			#endif
		}

		public static ImVec1Ptr ImVec1ImVec1Nil()
		{
			ImVec1Ptr ret = ImVec1ImVec1NilNative();
			return ret;
		}

		internal static void ImVec1DestroyNative(ImVec1* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVec1*, void>)vt[765])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[765])((nint)self);
			#endif
		}

		public static void ImVec1Destroy(ImVec1Ptr self)
		{
			ImVec1DestroyNative(self);
		}

		public static void ImVec1Destroy(ref ImVec1 self)
		{
			fixed (ImVec1* pself = &self)
			{
				ImVec1DestroyNative((ImVec1*)pself);
			}
		}

		internal static ImVec1* ImVec1ImVec1FloatNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, ImVec1*>)vt[766])(x);
			#else
			return (ImVec1*)((delegate* unmanaged[Cdecl]<float, nint>)vt[766])(x);
			#endif
		}

		public static ImVec1Ptr ImVec1ImVec1Float(float x)
		{
			ImVec1Ptr ret = ImVec1ImVec1FloatNative(x);
			return ret;
		}

		internal static ImVec2ih* ImVec2ihImVec2ihNilNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImVec2ih*>)vt[767])();
			#else
			return (ImVec2ih*)((delegate* unmanaged[Cdecl]<nint>)vt[767])();
			#endif
		}

		public static ImVec2ihPtr ImVec2ihImVec2ihNil()
		{
			ImVec2ihPtr ret = ImVec2ihImVec2ihNilNative();
			return ret;
		}

		internal static void ImVec2ihDestroyNative(ImVec2ih* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVec2ih*, void>)vt[768])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[768])((nint)self);
			#endif
		}

		public static void ImVec2ihDestroy(ImVec2ihPtr self)
		{
			ImVec2ihDestroyNative(self);
		}

		public static void ImVec2ihDestroy(ref ImVec2ih self)
		{
			fixed (ImVec2ih* pself = &self)
			{
				ImVec2ihDestroyNative((ImVec2ih*)pself);
			}
		}

		internal static ImVec2ih* ImVec2ihImVec2ihShortNative(short x, short y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<short, short, ImVec2ih*>)vt[769])(x, y);
			#else
			return (ImVec2ih*)((delegate* unmanaged[Cdecl]<short, short, nint>)vt[769])(x, y);
			#endif
		}

		public static ImVec2ihPtr ImVec2ihImVec2ihShort(short x, short y)
		{
			ImVec2ihPtr ret = ImVec2ihImVec2ihShortNative(x, y);
			return ret;
		}

		internal static ImVec2ih* ImVec2ihImVec2ihVec2Native(Vector2 rhs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, ImVec2ih*>)vt[770])(rhs);
			#else
			return (ImVec2ih*)((delegate* unmanaged[Cdecl]<Vector2, nint>)vt[770])(rhs);
			#endif
		}

		public static ImVec2ihPtr ImVec2ihImVec2ihVec2(Vector2 rhs)
		{
			ImVec2ihPtr ret = ImVec2ihImVec2ihVec2Native(rhs);
			return ret;
		}

		internal static ImRect* ImRectImRectNilNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*>)vt[771])();
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<nint>)vt[771])();
			#endif
		}

		public static ImRectPtr ImRectImRectNil()
		{
			ImRectPtr ret = ImRectImRectNilNative();
			return ret;
		}

		internal static void ImRectDestroyNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, void>)vt[772])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[772])((nint)self);
			#endif
		}

		public static void ImRectDestroy(ImRectPtr self)
		{
			ImRectDestroyNative(self);
		}

		public static void ImRectDestroy(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectDestroyNative((ImRect*)pself);
			}
		}

		internal static ImRect* ImRectImRectVec2Native(Vector2 min, Vector2 max)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, ImRect*>)vt[773])(min, max);
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<Vector2, Vector2, nint>)vt[773])(min, max);
			#endif
		}

		public static ImRectPtr ImRectImRectVec2(Vector2 min, Vector2 max)
		{
			ImRectPtr ret = ImRectImRectVec2Native(min, max);
			return ret;
		}

		internal static ImRect* ImRectImRectVec4Native(Vector4 v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4, ImRect*>)vt[774])(v);
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<Vector4, nint>)vt[774])(v);
			#endif
		}

		public static ImRectPtr ImRectImRectVec4(Vector4 v)
		{
			ImRectPtr ret = ImRectImRectVec4Native(v);
			return ret;
		}

		internal static ImRect* ImRectImRectFloatNative(float x1, float y1, float x2, float y2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, ImRect*>)vt[775])(x1, y1, x2, y2);
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<float, float, float, float, nint>)vt[775])(x1, y1, x2, y2);
			#endif
		}

		public static ImRectPtr ImRectImRectFloat(float x1, float y1, float x2, float y2)
		{
			ImRectPtr ret = ImRectImRectFloatNative(x1, y1, x2, y2);
			return ret;
		}

		internal static void ImRectGetCenterNative(Vector2* output, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[776])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[776])((nint)output, (nint)self);
			#endif
		}

		public static Vector2 ImRectGetCenter(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetCenterNative(&ret, self);
			return ret;
		}

		public static void ImRectGetCenter(Vector2* output, ImRectPtr self)
		{
			ImRectGetCenterNative(output, self);
		}

		public static void ImRectGetCenter(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetCenterNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetCenter(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetCenterNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetCenter(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetCenterNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetCenter(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetCenterNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static void ImRectGetSizeNative(Vector2* output, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[777])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[777])((nint)output, (nint)self);
			#endif
		}

		public static Vector2 ImRectGetSize(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetSizeNative(&ret, self);
			return ret;
		}

		public static void ImRectGetSize(Vector2* output, ImRectPtr self)
		{
			ImRectGetSizeNative(output, self);
		}

		public static void ImRectGetSize(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetSizeNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetSize(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetSizeNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetSize(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetSizeNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetSize(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetSizeNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static float ImRectGetWidthNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[778])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[778])((nint)self);
			#endif
		}

		public static float ImRectGetWidth(ImRectPtr self)
		{
			float ret = ImRectGetWidthNative(self);
			return ret;
		}

		public static float ImRectGetWidth(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetWidthNative((ImRect*)pself);
				return ret;
			}
		}

		internal static float ImRectGetHeightNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[779])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[779])((nint)self);
			#endif
		}

		public static float ImRectGetHeight(ImRectPtr self)
		{
			float ret = ImRectGetHeightNative(self);
			return ret;
		}

		public static float ImRectGetHeight(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetHeightNative((ImRect*)pself);
				return ret;
			}
		}

		internal static float ImRectGetAreaNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[780])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[780])((nint)self);
			#endif
		}

		public static float ImRectGetArea(ImRectPtr self)
		{
			float ret = ImRectGetAreaNative(self);
			return ret;
		}

		public static float ImRectGetArea(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetAreaNative((ImRect*)pself);
				return ret;
			}
		}

		internal static void ImRectGetTLNative(Vector2* output, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[781])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[781])((nint)output, (nint)self);
			#endif
		}

		public static Vector2 ImRectGetTL(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetTLNative(&ret, self);
			return ret;
		}

		public static void ImRectGetTL(Vector2* output, ImRectPtr self)
		{
			ImRectGetTLNative(output, self);
		}

		public static void ImRectGetTL(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetTLNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetTL(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetTL(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTLNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetTL(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTLNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static void ImRectGetTRNative(Vector2* output, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[782])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[782])((nint)output, (nint)self);
			#endif
		}

		public static Vector2 ImRectGetTR(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetTRNative(&ret, self);
			return ret;
		}

		public static void ImRectGetTR(Vector2* output, ImRectPtr self)
		{
			ImRectGetTRNative(output, self);
		}

		public static void ImRectGetTR(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetTRNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetTR(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetTR(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTRNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetTR(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTRNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static void ImRectGetBLNative(Vector2* output, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[783])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[783])((nint)output, (nint)self);
			#endif
		}

		public static Vector2 ImRectGetBL(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetBLNative(&ret, self);
			return ret;
		}

		public static void ImRectGetBL(Vector2* output, ImRectPtr self)
		{
			ImRectGetBLNative(output, self);
		}

		public static void ImRectGetBL(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetBLNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetBL(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetBL(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBLNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetBL(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBLNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static void ImRectGetBRNative(Vector2* output, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[784])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[784])((nint)output, (nint)self);
			#endif
		}

		public static Vector2 ImRectGetBR(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetBRNative(&ret, self);
			return ret;
		}

		public static void ImRectGetBR(Vector2* output, ImRectPtr self)
		{
			ImRectGetBRNative(output, self);
		}

		public static void ImRectGetBR(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetBRNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetBR(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetBR(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBRNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetBR(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBRNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static byte ImRectContainsVec2Native(ImRect* self, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, Vector2, byte>)vt[785])(self, p);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, byte>)vt[785])((nint)self, p);
			#endif
		}

		public static bool ImRectContainsVec2(ImRectPtr self, Vector2 p)
		{
			byte ret = ImRectContainsVec2Native(self, p);
			return ret != 0;
		}

		public static bool ImRectContainsVec2(ref ImRect self, Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsVec2Native((ImRect*)pself, p);
				return ret != 0;
			}
		}

		internal static byte ImRectContainsRectNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, ImRect, byte>)vt[786])(self, r);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImRect, byte>)vt[786])((nint)self, r);
			#endif
		}

		public static bool ImRectContainsRect(ImRectPtr self, ImRect r)
		{
			byte ret = ImRectContainsRectNative(self, r);
			return ret != 0;
		}

		public static bool ImRectContainsRect(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsRectNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		internal static byte ImRectContainsWithPadNative(ImRect* self, Vector2 p, Vector2 pad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, Vector2, Vector2, byte>)vt[787])(self, p, pad);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, byte>)vt[787])((nint)self, p, pad);
			#endif
		}

		public static bool ImRectContainsWithPad(ImRectPtr self, Vector2 p, Vector2 pad)
		{
			byte ret = ImRectContainsWithPadNative(self, p, pad);
			return ret != 0;
		}

		public static bool ImRectContainsWithPad(ref ImRect self, Vector2 p, Vector2 pad)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsWithPadNative((ImRect*)pself, p, pad);
				return ret != 0;
			}
		}

		internal static byte ImRectOverlapsNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, ImRect, byte>)vt[788])(self, r);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImRect, byte>)vt[788])((nint)self, r);
			#endif
		}

		public static bool ImRectOverlaps(ImRectPtr self, ImRect r)
		{
			byte ret = ImRectOverlapsNative(self, r);
			return ret != 0;
		}

		public static bool ImRectOverlaps(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectOverlapsNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		internal static void ImRectAddVec2Native(ImRect* self, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[789])(self, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[789])((nint)self, p);
			#endif
		}

		public static void ImRectAddVec2(ImRectPtr self, Vector2 p)
		{
			ImRectAddVec2Native(self, p);
		}

		public static void ImRectAddVec2(ref ImRect self, Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddVec2Native((ImRect*)pself, p);
			}
		}

		internal static void ImRectAddRectNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[790])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[790])((nint)self, r);
			#endif
		}

		public static void ImRectAddRect(ImRectPtr self, ImRect r)
		{
			ImRectAddRectNative(self, r);
		}

		public static void ImRectAddRect(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddRectNative((ImRect*)pself, r);
			}
		}

		internal static void ImRectExpandFloatNative(ImRect* self, float amount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[791])(self, amount);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[791])((nint)self, amount);
			#endif
		}

		public static void ImRectExpandFloat(ImRectPtr self, float amount)
		{
			ImRectExpandFloatNative(self, amount);
		}

		public static void ImRectExpandFloat(ref ImRect self, float amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandFloatNative((ImRect*)pself, amount);
			}
		}

		internal static void ImRectExpandVec2Native(ImRect* self, Vector2 amount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[792])(self, amount);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[792])((nint)self, amount);
			#endif
		}

		public static void ImRectExpandVec2(ImRectPtr self, Vector2 amount)
		{
			ImRectExpandVec2Native(self, amount);
		}

		public static void ImRectExpandVec2(ref ImRect self, Vector2 amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandVec2Native((ImRect*)pself, amount);
			}
		}

		internal static void ImRectTranslateNative(ImRect* self, Vector2 d)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[793])(self, d);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[793])((nint)self, d);
			#endif
		}

		public static void ImRectTranslate(ImRectPtr self, Vector2 d)
		{
			ImRectTranslateNative(self, d);
		}

		public static void ImRectTranslate(ref ImRect self, Vector2 d)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateNative((ImRect*)pself, d);
			}
		}

		internal static void ImRectTranslateXNative(ImRect* self, float dx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[794])(self, dx);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[794])((nint)self, dx);
			#endif
		}

		public static void ImRectTranslateX(ImRectPtr self, float dx)
		{
			ImRectTranslateXNative(self, dx);
		}

		public static void ImRectTranslateX(ref ImRect self, float dx)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateXNative((ImRect*)pself, dx);
			}
		}

		internal static void ImRectTranslateYNative(ImRect* self, float dy)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[795])(self, dy);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[795])((nint)self, dy);
			#endif
		}

		public static void ImRectTranslateY(ImRectPtr self, float dy)
		{
			ImRectTranslateYNative(self, dy);
		}

		public static void ImRectTranslateY(ref ImRect self, float dy)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateYNative((ImRect*)pself, dy);
			}
		}

		internal static void ImRectClipWithNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[796])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[796])((nint)self, r);
			#endif
		}

		public static void ImRectClipWith(ImRectPtr self, ImRect r)
		{
			ImRectClipWithNative(self, r);
		}

		public static void ImRectClipWith(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithNative((ImRect*)pself, r);
			}
		}

		internal static void ImRectClipWithFullNative(ImRect* self, ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[797])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[797])((nint)self, r);
			#endif
		}

		public static void ImRectClipWithFull(ImRectPtr self, ImRect r)
		{
			ImRectClipWithFullNative(self, r);
		}

		public static void ImRectClipWithFull(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithFullNative((ImRect*)pself, r);
			}
		}

		internal static void ImRectFloorNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, void>)vt[798])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[798])((nint)self);
			#endif
		}

		public static void ImRectFloor(ImRectPtr self)
		{
			ImRectFloorNative(self);
		}

		public static void ImRectFloor(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectFloorNative((ImRect*)pself);
			}
		}

		internal static byte ImRectIsInvertedNative(ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, byte>)vt[799])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[799])((nint)self);
			#endif
		}

		public static bool ImRectIsInverted(ImRectPtr self)
		{
			byte ret = ImRectIsInvertedNative(self);
			return ret != 0;
		}

		public static bool ImRectIsInverted(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectIsInvertedNative((ImRect*)pself);
				return ret != 0;
			}
		}

		internal static void ImRectToVec4Native(Vector4* output, ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, ImRect*, void>)vt[800])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[800])((nint)output, (nint)self);
			#endif
		}

		public static Vector4 ImRectToVec4(ImRectPtr self)
		{
			Vector4 ret;
			ImRectToVec4Native(&ret, self);
			return ret;
		}

		public static void ImRectToVec4(Vector4* output, ImRectPtr self)
		{
			ImRectToVec4Native(output, self);
		}

		public static void ImRectToVec4(ref Vector4 output, ImRectPtr self)
		{
			fixed (Vector4* poutput = &output)
			{
				ImRectToVec4Native((Vector4*)poutput, self);
			}
		}

		public static Vector4 ImRectToVec4(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector4 ret;
				ImRectToVec4Native(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectToVec4(Vector4* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectToVec4Native(output, (ImRect*)pself);
			}
		}

		public static void ImRectToVec4(ref Vector4 output, ref ImRect self)
		{
			fixed (Vector4* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectToVec4Native((Vector4*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static nuint ImBitArrayGetStorageSizeInBytesNative(int bitcount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, nuint>)vt[801])(bitcount);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<int, nuint>)vt[801])(bitcount);
			#endif
		}

		public static nuint ImBitArrayGetStorageSizeInBytes(int bitcount)
		{
			nuint ret = ImBitArrayGetStorageSizeInBytesNative(bitcount);
			return ret;
		}

		internal static void ImBitArrayClearAllBitsNative(uint* arr, int bitcount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[802])(arr, bitcount);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[802])((nint)arr, bitcount);
			#endif
		}

		public static void ImBitArrayClearAllBits(uint* arr, int bitcount)
		{
			ImBitArrayClearAllBitsNative(arr, bitcount);
		}

		public static void ImBitArrayClearAllBits(ref uint arr, int bitcount)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearAllBitsNative((uint*)parr, bitcount);
			}
		}

		internal static byte ImBitArrayTestBitNative(uint* arr, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint*, int, byte>)vt[803])(arr, n);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)vt[803])((nint)arr, n);
			#endif
		}

		public static bool ImBitArrayTestBit(uint* arr, int n)
		{
			byte ret = ImBitArrayTestBitNative(arr, n);
			return ret != 0;
		}

		public static bool ImBitArrayTestBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				byte ret = ImBitArrayTestBitNative((uint*)parr, n);
				return ret != 0;
			}
		}

		internal static void ImBitArrayClearBitNative(uint* arr, int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[804])(arr, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[804])((nint)arr, n);
			#endif
		}

		public static void ImBitArrayClearBit(uint* arr, int n)
		{
			ImBitArrayClearBitNative(arr, n);
		}

		public static void ImBitArrayClearBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearBitNative((uint*)parr, n);
			}
		}

		internal static void ImBitArraySetBitNative(uint* arr, int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[805])(arr, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[805])((nint)arr, n);
			#endif
		}

		public static void ImBitArraySetBit(uint* arr, int n)
		{
			ImBitArraySetBitNative(arr, n);
		}

		public static void ImBitArraySetBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitNative((uint*)parr, n);
			}
		}

		internal static void ImBitArraySetBitRangeNative(uint* arr, int n, int n2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, int, void>)vt[806])(arr, n, n2);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[806])((nint)arr, n, n2);
			#endif
		}

		public static void ImBitArraySetBitRange(uint* arr, int n, int n2)
		{
			ImBitArraySetBitRangeNative(arr, n, n2);
		}

		public static void ImBitArraySetBitRange(ref uint arr, int n, int n2)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitRangeNative((uint*)parr, n, n2);
			}
		}

		internal static void ImBitVectorCreateNative(ImBitVector* self, int sz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[807])(self, sz);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[807])((nint)self, sz);
			#endif
		}

		public static void ImBitVectorCreate(ImBitVectorPtr self, int sz)
		{
			ImBitVectorCreateNative(self, sz);
		}

		public static void ImBitVectorCreate(ref ImBitVector self, int sz)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorCreateNative((ImBitVector*)pself, sz);
			}
		}

		internal static void ImBitVectorClearNative(ImBitVector* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, void>)vt[808])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[808])((nint)self);
			#endif
		}

		public static void ImBitVectorClear(ImBitVectorPtr self)
		{
			ImBitVectorClearNative(self);
		}

		public static void ImBitVectorClear(ref ImBitVector self)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearNative((ImBitVector*)pself);
			}
		}

		internal static byte ImBitVectorTestBitNative(ImBitVector* self, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImBitVector*, int, byte>)vt[809])(self, n);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)vt[809])((nint)self, n);
			#endif
		}

		public static bool ImBitVectorTestBit(ImBitVectorPtr self, int n)
		{
			byte ret = ImBitVectorTestBitNative(self, n);
			return ret != 0;
		}

		public static bool ImBitVectorTestBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				byte ret = ImBitVectorTestBitNative((ImBitVector*)pself, n);
				return ret != 0;
			}
		}

		internal static void ImBitVectorSetBitNative(ImBitVector* self, int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[810])(self, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[810])((nint)self, n);
			#endif
		}

		public static void ImBitVectorSetBit(ImBitVectorPtr self, int n)
		{
			ImBitVectorSetBitNative(self, n);
		}

		public static void ImBitVectorSetBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorSetBitNative((ImBitVector*)pself, n);
			}
		}

		internal static void ImBitVectorClearBitNative(ImBitVector* self, int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[811])(self, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[811])((nint)self, n);
			#endif
		}

		public static void ImBitVectorClearBit(ImBitVectorPtr self, int n)
		{
			ImBitVectorClearBitNative(self, n);
		}

		public static void ImBitVectorClearBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearBitNative((ImBitVector*)pself, n);
			}
		}

		internal static void ImGuiTextIndexClearNative(ImGuiTextIndex* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, void>)vt[812])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[812])((nint)self);
			#endif
		}

		public static void ImGuiTextIndexClear(ImGuiTextIndexPtr self)
		{
			ImGuiTextIndexClearNative(self);
		}

		public static void ImGuiTextIndexClear(ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexClearNative((ImGuiTextIndex*)pself);
			}
		}

		internal static int ImGuiTextIndexSizeNative(ImGuiTextIndex* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, int>)vt[813])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[813])((nint)self);
			#endif
		}

		public static int ImGuiTextIndexSize(ImGuiTextIndexPtr self)
		{
			int ret = ImGuiTextIndexSizeNative(self);
			return ret;
		}

		public static int ImGuiTextIndexSize(ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				int ret = ImGuiTextIndexSizeNative((ImGuiTextIndex*)pself);
				return ret;
			}
		}

		internal static byte* ImGuiTextIndexGetLineBeginNative(ImGuiTextIndex* self, byte* baseValue, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, byte*>)vt[814])(self, baseValue, n);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, int, nint>)vt[814])((nint)self, (nint)baseValue, n);
			#endif
		}

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, baseValue, n);
			return ret;
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, baseValue, n));
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		internal static byte* ImGuiTextIndexGetLineEndNative(ImGuiTextIndex* self, byte* baseValue, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, byte*>)vt[815])(self, baseValue, n);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, int, nint>)vt[815])((nint)self, (nint)baseValue, n);
			#endif
		}

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			byte* ret = ImGuiTextIndexGetLineEndNative(self, baseValue, n);
			return ret;
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, baseValue, n));
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineEndNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		internal static void ImGuiTextIndexAppendNative(ImGuiTextIndex* self, byte* baseValue, int oldSize, int newSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, int, void>)vt[816])(self, baseValue, oldSize, newSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, void>)vt[816])((nint)self, (nint)baseValue, oldSize, newSize);
			#endif
		}

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, byte* baseValue, int oldSize, int newSize)
		{
			ImGuiTextIndexAppendNative(self, baseValue, oldSize, newSize);
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, byte* baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, baseValue, oldSize, newSize);
			}
		}

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, ref byte baseValue, int oldSize, int newSize)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				ImGuiTextIndexAppendNative(self, (byte*)pbaseValue, oldSize, newSize);
			}
		}

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, string baseValue, int oldSize, int newSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextIndexAppendNative(self, pStr0, oldSize, newSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, ReadOnlySpan<byte> baseValue, int oldSize, int newSize)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				ImGuiTextIndexAppendNative(self, (byte*)pbaseValue, oldSize, newSize);
			}
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, ref byte baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, string baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, pStr0, oldSize, newSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, ReadOnlySpan<byte> baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		internal static ImGuiStoragePair* ImLowerBoundNative(ImGuiStoragePair* inBegin, ImGuiStoragePair* inEnd, int key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStoragePair*, ImGuiStoragePair*, int, ImGuiStoragePair*>)vt[817])(inBegin, inEnd, key);
			#else
			return (ImGuiStoragePair*)((delegate* unmanaged[Cdecl]<nint, nint, int, nint>)vt[817])((nint)inBegin, (nint)inEnd, key);
			#endif
		}

		public static ImGuiStoragePairPtr ImLowerBound(ImGuiStoragePairPtr inBegin, ImGuiStoragePairPtr inEnd, int key)
		{
			ImGuiStoragePairPtr ret = ImLowerBoundNative(inBegin, inEnd, key);
			return ret;
		}

		public static ImGuiStoragePairPtr ImLowerBound(ref ImGuiStoragePair inBegin, ImGuiStoragePairPtr inEnd, int key)
		{
			fixed (ImGuiStoragePair* pinBegin = &inBegin)
			{
				ImGuiStoragePairPtr ret = ImLowerBoundNative((ImGuiStoragePair*)pinBegin, inEnd, key);
				return ret;
			}
		}

		public static ImGuiStoragePairPtr ImLowerBound(ImGuiStoragePairPtr inBegin, ref ImGuiStoragePair inEnd, int key)
		{
			fixed (ImGuiStoragePair* pinEnd = &inEnd)
			{
				ImGuiStoragePairPtr ret = ImLowerBoundNative(inBegin, (ImGuiStoragePair*)pinEnd, key);
				return ret;
			}
		}

		public static ImGuiStoragePairPtr ImLowerBound(ref ImGuiStoragePair inBegin, ref ImGuiStoragePair inEnd, int key)
		{
			fixed (ImGuiStoragePair* pinBegin = &inBegin)
			{
				fixed (ImGuiStoragePair* pinEnd = &inEnd)
				{
					ImGuiStoragePairPtr ret = ImLowerBoundNative((ImGuiStoragePair*)pinBegin, (ImGuiStoragePair*)pinEnd, key);
					return ret;
				}
			}
		}

		internal static ImDrawListSharedData* ImDrawListSharedDataImDrawListSharedDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawListSharedData*>)vt[818])();
			#else
			return (ImDrawListSharedData*)((delegate* unmanaged[Cdecl]<nint>)vt[818])();
			#endif
		}

		public static ImDrawListSharedDataPtr ImDrawListSharedDataImDrawListSharedData()
		{
			ImDrawListSharedDataPtr ret = ImDrawListSharedDataImDrawListSharedDataNative();
			return ret;
		}

		internal static void ImDrawListSharedDataDestroyNative(ImDrawListSharedData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSharedData*, void>)vt[819])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[819])((nint)self);
			#endif
		}

		public static void ImDrawListSharedDataDestroy(ImDrawListSharedDataPtr self)
		{
			ImDrawListSharedDataDestroyNative(self);
		}

		public static void ImDrawListSharedDataDestroy(ref ImDrawListSharedData self)
		{
			fixed (ImDrawListSharedData* pself = &self)
			{
				ImDrawListSharedDataDestroyNative((ImDrawListSharedData*)pself);
			}
		}

		internal static void ImDrawListSharedDataSetCircleTessellationMaxErrorNative(ImDrawListSharedData* self, float maxError)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSharedData*, float, void>)vt[820])(self, maxError);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[820])((nint)self, maxError);
			#endif
		}

		public static void ImDrawListSharedDataSetCircleTessellationMaxError(ImDrawListSharedDataPtr self, float maxError)
		{
			ImDrawListSharedDataSetCircleTessellationMaxErrorNative(self, maxError);
		}

		public static void ImDrawListSharedDataSetCircleTessellationMaxError(ref ImDrawListSharedData self, float maxError)
		{
			fixed (ImDrawListSharedData* pself = &self)
			{
				ImDrawListSharedDataSetCircleTessellationMaxErrorNative((ImDrawListSharedData*)pself, maxError);
			}
		}

		internal static ImDrawDataBuilder* ImDrawDataBuilderImDrawDataBuilderNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawDataBuilder*>)vt[821])();
			#else
			return (ImDrawDataBuilder*)((delegate* unmanaged[Cdecl]<nint>)vt[821])();
			#endif
		}

		public static ImDrawDataBuilderPtr ImDrawDataBuilderImDrawDataBuilder()
		{
			ImDrawDataBuilderPtr ret = ImDrawDataBuilderImDrawDataBuilderNative();
			return ret;
		}

		internal static void ImDrawDataBuilderDestroyNative(ImDrawDataBuilder* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawDataBuilder*, void>)vt[822])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[822])((nint)self);
			#endif
		}

		public static void ImDrawDataBuilderDestroy(ImDrawDataBuilderPtr self)
		{
			ImDrawDataBuilderDestroyNative(self);
		}

		public static void ImDrawDataBuilderDestroy(ref ImDrawDataBuilder self)
		{
			fixed (ImDrawDataBuilder* pself = &self)
			{
				ImDrawDataBuilderDestroyNative((ImDrawDataBuilder*)pself);
			}
		}

		internal static void* ImGuiDataVarInfoGetVarPtrNative(ImGuiDataVarInfo* self, void* parent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDataVarInfo*, void*, void*>)vt[823])(self, parent);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[823])((nint)self, (nint)parent);
			#endif
		}

		public static void* ImGuiDataVarInfoGetVarPtr(ImGuiDataVarInfoPtr self, void* parent)
		{
			void* ret = ImGuiDataVarInfoGetVarPtrNative(self, parent);
			return ret;
		}

		public static void* ImGuiDataVarInfoGetVarPtr(ref ImGuiDataVarInfo self, void* parent)
		{
			fixed (ImGuiDataVarInfo* pself = &self)
			{
				void* ret = ImGuiDataVarInfoGetVarPtrNative((ImGuiDataVarInfo*)pself, parent);
				return ret;
			}
		}

		internal static ImGuiStyleMod* ImGuiStyleModImGuiStyleModIntNative(ImGuiStyleVar idx, int v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, int, ImGuiStyleMod*>)vt[824])(idx, v);
			#else
			return (ImGuiStyleMod*)((delegate* unmanaged[Cdecl]<ImGuiStyleVar, int, nint>)vt[824])(idx, v);
			#endif
		}

		public static ImGuiStyleModPtr ImGuiStyleModImGuiStyleModInt(ImGuiStyleVar idx, int v)
		{
			ImGuiStyleModPtr ret = ImGuiStyleModImGuiStyleModIntNative(idx, v);
			return ret;
		}

		internal static void ImGuiStyleModDestroyNative(ImGuiStyleMod* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStyleMod*, void>)vt[825])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[825])((nint)self);
			#endif
		}

		public static void ImGuiStyleModDestroy(ImGuiStyleModPtr self)
		{
			ImGuiStyleModDestroyNative(self);
		}

		public static void ImGuiStyleModDestroy(ref ImGuiStyleMod self)
		{
			fixed (ImGuiStyleMod* pself = &self)
			{
				ImGuiStyleModDestroyNative((ImGuiStyleMod*)pself);
			}
		}

		internal static ImGuiStyleMod* ImGuiStyleModImGuiStyleModFloatNative(ImGuiStyleVar idx, float v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, float, ImGuiStyleMod*>)vt[826])(idx, v);
			#else
			return (ImGuiStyleMod*)((delegate* unmanaged[Cdecl]<ImGuiStyleVar, float, nint>)vt[826])(idx, v);
			#endif
		}

		public static ImGuiStyleModPtr ImGuiStyleModImGuiStyleModFloat(ImGuiStyleVar idx, float v)
		{
			ImGuiStyleModPtr ret = ImGuiStyleModImGuiStyleModFloatNative(idx, v);
			return ret;
		}

		internal static ImGuiStyleMod* ImGuiStyleModImGuiStyleModVec2Native(ImGuiStyleVar idx, Vector2 v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, Vector2, ImGuiStyleMod*>)vt[827])(idx, v);
			#else
			return (ImGuiStyleMod*)((delegate* unmanaged[Cdecl]<ImGuiStyleVar, Vector2, nint>)vt[827])(idx, v);
			#endif
		}

		public static ImGuiStyleModPtr ImGuiStyleModImGuiStyleModVec2(ImGuiStyleVar idx, Vector2 v)
		{
			ImGuiStyleModPtr ret = ImGuiStyleModImGuiStyleModVec2Native(idx, v);
			return ret;
		}

		internal static ImGuiComboPreviewData* ImGuiComboPreviewDataImGuiComboPreviewDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiComboPreviewData*>)vt[828])();
			#else
			return (ImGuiComboPreviewData*)((delegate* unmanaged[Cdecl]<nint>)vt[828])();
			#endif
		}

		public static ImGuiComboPreviewDataPtr ImGuiComboPreviewDataImGuiComboPreviewData()
		{
			ImGuiComboPreviewDataPtr ret = ImGuiComboPreviewDataImGuiComboPreviewDataNative();
			return ret;
		}

		internal static void ImGuiComboPreviewDataDestroyNative(ImGuiComboPreviewData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiComboPreviewData*, void>)vt[829])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[829])((nint)self);
			#endif
		}

		public static void ImGuiComboPreviewDataDestroy(ImGuiComboPreviewDataPtr self)
		{
			ImGuiComboPreviewDataDestroyNative(self);
		}

		public static void ImGuiComboPreviewDataDestroy(ref ImGuiComboPreviewData self)
		{
			fixed (ImGuiComboPreviewData* pself = &self)
			{
				ImGuiComboPreviewDataDestroyNative((ImGuiComboPreviewData*)pself);
			}
		}

		internal static ImGuiMenuColumns* ImGuiMenuColumnsImGuiMenuColumnsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*>)vt[830])();
			#else
			return (ImGuiMenuColumns*)((delegate* unmanaged[Cdecl]<nint>)vt[830])();
			#endif
		}

		public static ImGuiMenuColumnsPtr ImGuiMenuColumnsImGuiMenuColumns()
		{
			ImGuiMenuColumnsPtr ret = ImGuiMenuColumnsImGuiMenuColumnsNative();
			return ret;
		}

		internal static void ImGuiMenuColumnsDestroyNative(ImGuiMenuColumns* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, void>)vt[831])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[831])((nint)self);
			#endif
		}

		public static void ImGuiMenuColumnsDestroy(ImGuiMenuColumnsPtr self)
		{
			ImGuiMenuColumnsDestroyNative(self);
		}

		public static void ImGuiMenuColumnsDestroy(ref ImGuiMenuColumns self)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsDestroyNative((ImGuiMenuColumns*)pself);
			}
		}

		internal static void ImGuiMenuColumnsUpdateNative(ImGuiMenuColumns* self, float spacing, byte windowReappearing)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, float, byte, void>)vt[832])(self, spacing, windowReappearing);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, void>)vt[832])((nint)self, spacing, windowReappearing);
			#endif
		}

		public static void ImGuiMenuColumnsUpdate(ImGuiMenuColumnsPtr self, float spacing, bool windowReappearing)
		{
			ImGuiMenuColumnsUpdateNative(self, spacing, windowReappearing ? (byte)1 : (byte)0);
		}

		public static void ImGuiMenuColumnsUpdate(ref ImGuiMenuColumns self, float spacing, bool windowReappearing)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsUpdateNative((ImGuiMenuColumns*)pself, spacing, windowReappearing ? (byte)1 : (byte)0);
			}
		}

		internal static float ImGuiMenuColumnsDeclColumnsNative(ImGuiMenuColumns* self, float wIcon, float wLabel, float wShortcut, float wMark)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, float, float, float, float, float>)vt[833])(self, wIcon, wLabel, wShortcut, wMark);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float, float, float, float, float>)vt[833])((nint)self, wIcon, wLabel, wShortcut, wMark);
			#endif
		}

		public static float ImGuiMenuColumnsDeclColumns(ImGuiMenuColumnsPtr self, float wIcon, float wLabel, float wShortcut, float wMark)
		{
			float ret = ImGuiMenuColumnsDeclColumnsNative(self, wIcon, wLabel, wShortcut, wMark);
			return ret;
		}

		public static float ImGuiMenuColumnsDeclColumns(ref ImGuiMenuColumns self, float wIcon, float wLabel, float wShortcut, float wMark)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				float ret = ImGuiMenuColumnsDeclColumnsNative((ImGuiMenuColumns*)pself, wIcon, wLabel, wShortcut, wMark);
				return ret;
			}
		}

		internal static void ImGuiMenuColumnsCalcNextTotalWidthNative(ImGuiMenuColumns* self, byte updateOffsets)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, byte, void>)vt[834])(self, updateOffsets);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[834])((nint)self, updateOffsets);
			#endif
		}

		public static void ImGuiMenuColumnsCalcNextTotalWidth(ImGuiMenuColumnsPtr self, bool updateOffsets)
		{
			ImGuiMenuColumnsCalcNextTotalWidthNative(self, updateOffsets ? (byte)1 : (byte)0);
		}

		public static void ImGuiMenuColumnsCalcNextTotalWidth(ref ImGuiMenuColumns self, bool updateOffsets)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsCalcNextTotalWidthNative((ImGuiMenuColumns*)pself, updateOffsets ? (byte)1 : (byte)0);
			}
		}

		internal static ImGuiInputTextDeactivatedState* ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedStateNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextDeactivatedState*>)vt[835])();
			#else
			return (ImGuiInputTextDeactivatedState*)((delegate* unmanaged[Cdecl]<nint>)vt[835])();
			#endif
		}

		public static ImGuiInputTextDeactivatedStatePtr ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedState()
		{
			ImGuiInputTextDeactivatedStatePtr ret = ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedStateNative();
			return ret;
		}

		internal static void ImGuiInputTextDeactivatedStateDestroyNative(ImGuiInputTextDeactivatedState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextDeactivatedState*, void>)vt[836])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[836])((nint)self);
			#endif
		}

		public static void ImGuiInputTextDeactivatedStateDestroy(ImGuiInputTextDeactivatedStatePtr self)
		{
			ImGuiInputTextDeactivatedStateDestroyNative(self);
		}

		public static void ImGuiInputTextDeactivatedStateDestroy(ref ImGuiInputTextDeactivatedState self)
		{
			fixed (ImGuiInputTextDeactivatedState* pself = &self)
			{
				ImGuiInputTextDeactivatedStateDestroyNative((ImGuiInputTextDeactivatedState*)pself);
			}
		}

		internal static void ImGuiInputTextDeactivatedStateClearFreeMemoryNative(ImGuiInputTextDeactivatedState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextDeactivatedState*, void>)vt[837])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[837])((nint)self);
			#endif
		}

		public static void ImGuiInputTextDeactivatedStateClearFreeMemory(ImGuiInputTextDeactivatedStatePtr self)
		{
			ImGuiInputTextDeactivatedStateClearFreeMemoryNative(self);
		}

		public static void ImGuiInputTextDeactivatedStateClearFreeMemory(ref ImGuiInputTextDeactivatedState self)
		{
			fixed (ImGuiInputTextDeactivatedState* pself = &self)
			{
				ImGuiInputTextDeactivatedStateClearFreeMemoryNative((ImGuiInputTextDeactivatedState*)pself);
			}
		}

		internal static ImGuiInputTextState* ImGuiInputTextStateImGuiInputTextStateNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*>)vt[838])();
			#else
			return (ImGuiInputTextState*)((delegate* unmanaged[Cdecl]<nint>)vt[838])();
			#endif
		}

		public static ImGuiInputTextStatePtr ImGuiInputTextStateImGuiInputTextState()
		{
			ImGuiInputTextStatePtr ret = ImGuiInputTextStateImGuiInputTextStateNative();
			return ret;
		}

		internal static void ImGuiInputTextStateDestroyNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[839])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[839])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateDestroy(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateDestroyNative(self);
		}

		public static void ImGuiInputTextStateDestroy(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateDestroyNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateClearTextNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[840])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[840])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateClearText(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateClearTextNative(self);
		}

		public static void ImGuiInputTextStateClearText(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearTextNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateClearFreeMemoryNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[841])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[841])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateClearFreeMemory(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateClearFreeMemoryNative(self);
		}

		public static void ImGuiInputTextStateClearFreeMemory(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearFreeMemoryNative((ImGuiInputTextState*)pself);
			}
		}

		internal static int ImGuiInputTextStateGetUndoAvailCountNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[842])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[842])((nint)self);
			#endif
		}

		public static int ImGuiInputTextStateGetUndoAvailCount(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetUndoAvailCountNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetUndoAvailCount(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetUndoAvailCountNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static int ImGuiInputTextStateGetRedoAvailCountNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[843])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[843])((nint)self);
			#endif
		}

		public static int ImGuiInputTextStateGetRedoAvailCount(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetRedoAvailCountNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetRedoAvailCount(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetRedoAvailCountNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static void ImGuiInputTextStateOnKeyPressedNative(ImGuiInputTextState* self, int key)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int, void>)vt[844])(self, key);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[844])((nint)self, key);
			#endif
		}

		public static void ImGuiInputTextStateOnKeyPressed(ImGuiInputTextStatePtr self, int key)
		{
			ImGuiInputTextStateOnKeyPressedNative(self, key);
		}

		public static void ImGuiInputTextStateOnKeyPressed(ref ImGuiInputTextState self, int key)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateOnKeyPressedNative((ImGuiInputTextState*)pself, key);
			}
		}

		internal static void ImGuiInputTextStateCursorAnimResetNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[845])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[845])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateCursorAnimReset(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateCursorAnimResetNative(self);
		}

		public static void ImGuiInputTextStateCursorAnimReset(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateCursorAnimResetNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateCursorClampNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[846])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[846])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateCursorClamp(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateCursorClampNative(self);
		}

		public static void ImGuiInputTextStateCursorClamp(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateCursorClampNative((ImGuiInputTextState*)pself);
			}
		}

		internal static byte ImGuiInputTextStateHasSelectionNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, byte>)vt[847])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[847])((nint)self);
			#endif
		}

		public static bool ImGuiInputTextStateHasSelection(ImGuiInputTextStatePtr self)
		{
			byte ret = ImGuiInputTextStateHasSelectionNative(self);
			return ret != 0;
		}

		public static bool ImGuiInputTextStateHasSelection(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				byte ret = ImGuiInputTextStateHasSelectionNative((ImGuiInputTextState*)pself);
				return ret != 0;
			}
		}

		internal static void ImGuiInputTextStateClearSelectionNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[848])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[848])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateClearSelection(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateClearSelectionNative(self);
		}

		public static void ImGuiInputTextStateClearSelection(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearSelectionNative((ImGuiInputTextState*)pself);
			}
		}

		internal static int ImGuiInputTextStateGetCursorPosNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[849])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[849])((nint)self);
			#endif
		}

		public static int ImGuiInputTextStateGetCursorPos(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetCursorPosNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetCursorPos(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetCursorPosNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static int ImGuiInputTextStateGetSelectionStartNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[850])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[850])((nint)self);
			#endif
		}

		public static int ImGuiInputTextStateGetSelectionStart(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetSelectionStartNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetSelectionStart(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetSelectionStartNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static int ImGuiInputTextStateGetSelectionEndNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[851])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[851])((nint)self);
			#endif
		}

		public static int ImGuiInputTextStateGetSelectionEnd(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetSelectionEndNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetSelectionEnd(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetSelectionEndNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static void ImGuiInputTextStateSelectAllNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[852])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[852])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateSelectAll(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateSelectAllNative(self);
		}

		public static void ImGuiInputTextStateSelectAll(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateSelectAllNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateReloadUserBufAndSelectAllNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[853])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[853])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateReloadUserBufAndSelectAll(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateReloadUserBufAndSelectAllNative(self);
		}

		public static void ImGuiInputTextStateReloadUserBufAndSelectAll(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateReloadUserBufAndSelectAllNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateReloadUserBufAndKeepSelectionNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[854])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[854])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateReloadUserBufAndKeepSelection(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateReloadUserBufAndKeepSelectionNative(self);
		}

		public static void ImGuiInputTextStateReloadUserBufAndKeepSelection(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateReloadUserBufAndKeepSelectionNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateReloadUserBufAndMoveToEndNative(ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[855])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[855])((nint)self);
			#endif
		}

		public static void ImGuiInputTextStateReloadUserBufAndMoveToEnd(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateReloadUserBufAndMoveToEndNative(self);
		}

		public static void ImGuiInputTextStateReloadUserBufAndMoveToEnd(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateReloadUserBufAndMoveToEndNative((ImGuiInputTextState*)pself);
			}
		}

		internal static ImGuiNextWindowData* ImGuiNextWindowDataImGuiNextWindowDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiNextWindowData*>)vt[856])();
			#else
			return (ImGuiNextWindowData*)((delegate* unmanaged[Cdecl]<nint>)vt[856])();
			#endif
		}

		public static ImGuiNextWindowDataPtr ImGuiNextWindowDataImGuiNextWindowData()
		{
			ImGuiNextWindowDataPtr ret = ImGuiNextWindowDataImGuiNextWindowDataNative();
			return ret;
		}

		internal static void ImGuiNextWindowDataDestroyNative(ImGuiNextWindowData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiNextWindowData*, void>)vt[857])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[857])((nint)self);
			#endif
		}

		public static void ImGuiNextWindowDataDestroy(ImGuiNextWindowDataPtr self)
		{
			ImGuiNextWindowDataDestroyNative(self);
		}

		public static void ImGuiNextWindowDataDestroy(ref ImGuiNextWindowData self)
		{
			fixed (ImGuiNextWindowData* pself = &self)
			{
				ImGuiNextWindowDataDestroyNative((ImGuiNextWindowData*)pself);
			}
		}

		internal static void ImGuiNextWindowDataClearFlagsNative(ImGuiNextWindowData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiNextWindowData*, void>)vt[858])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[858])((nint)self);
			#endif
		}

		public static void ImGuiNextWindowDataClearFlags(ImGuiNextWindowDataPtr self)
		{
			ImGuiNextWindowDataClearFlagsNative(self);
		}

		public static void ImGuiNextWindowDataClearFlags(ref ImGuiNextWindowData self)
		{
			fixed (ImGuiNextWindowData* pself = &self)
			{
				ImGuiNextWindowDataClearFlagsNative((ImGuiNextWindowData*)pself);
			}
		}

		internal static ImGuiNextItemData* ImGuiNextItemDataImGuiNextItemDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiNextItemData*>)vt[859])();
			#else
			return (ImGuiNextItemData*)((delegate* unmanaged[Cdecl]<nint>)vt[859])();
			#endif
		}

		public static ImGuiNextItemDataPtr ImGuiNextItemDataImGuiNextItemData()
		{
			ImGuiNextItemDataPtr ret = ImGuiNextItemDataImGuiNextItemDataNative();
			return ret;
		}

		internal static void ImGuiNextItemDataDestroyNative(ImGuiNextItemData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiNextItemData*, void>)vt[860])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[860])((nint)self);
			#endif
		}

		public static void ImGuiNextItemDataDestroy(ImGuiNextItemDataPtr self)
		{
			ImGuiNextItemDataDestroyNative(self);
		}

		public static void ImGuiNextItemDataDestroy(ref ImGuiNextItemData self)
		{
			fixed (ImGuiNextItemData* pself = &self)
			{
				ImGuiNextItemDataDestroyNative((ImGuiNextItemData*)pself);
			}
		}

		internal static void ImGuiNextItemDataClearFlagsNative(ImGuiNextItemData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiNextItemData*, void>)vt[861])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[861])((nint)self);
			#endif
		}

		public static void ImGuiNextItemDataClearFlags(ImGuiNextItemDataPtr self)
		{
			ImGuiNextItemDataClearFlagsNative(self);
		}

		public static void ImGuiNextItemDataClearFlags(ref ImGuiNextItemData self)
		{
			fixed (ImGuiNextItemData* pself = &self)
			{
				ImGuiNextItemDataClearFlagsNative((ImGuiNextItemData*)pself);
			}
		}

		internal static ImGuiLastItemData* ImGuiLastItemDataImGuiLastItemDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiLastItemData*>)vt[862])();
			#else
			return (ImGuiLastItemData*)((delegate* unmanaged[Cdecl]<nint>)vt[862])();
			#endif
		}

		public static ImGuiLastItemDataPtr ImGuiLastItemDataImGuiLastItemData()
		{
			ImGuiLastItemDataPtr ret = ImGuiLastItemDataImGuiLastItemDataNative();
			return ret;
		}

		internal static void ImGuiLastItemDataDestroyNative(ImGuiLastItemData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiLastItemData*, void>)vt[863])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[863])((nint)self);
			#endif
		}

		public static void ImGuiLastItemDataDestroy(ImGuiLastItemDataPtr self)
		{
			ImGuiLastItemDataDestroyNative(self);
		}

		public static void ImGuiLastItemDataDestroy(ref ImGuiLastItemData self)
		{
			fixed (ImGuiLastItemData* pself = &self)
			{
				ImGuiLastItemDataDestroyNative((ImGuiLastItemData*)pself);
			}
		}

		internal static ImGuiStackSizes* ImGuiStackSizesImGuiStackSizesNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStackSizes*>)vt[864])();
			#else
			return (ImGuiStackSizes*)((delegate* unmanaged[Cdecl]<nint>)vt[864])();
			#endif
		}

		public static ImGuiStackSizesPtr ImGuiStackSizesImGuiStackSizes()
		{
			ImGuiStackSizesPtr ret = ImGuiStackSizesImGuiStackSizesNative();
			return ret;
		}

		internal static void ImGuiStackSizesDestroyNative(ImGuiStackSizes* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStackSizes*, void>)vt[865])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[865])((nint)self);
			#endif
		}

		public static void ImGuiStackSizesDestroy(ImGuiStackSizesPtr self)
		{
			ImGuiStackSizesDestroyNative(self);
		}

		public static void ImGuiStackSizesDestroy(ref ImGuiStackSizes self)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiStackSizesDestroyNative((ImGuiStackSizes*)pself);
			}
		}

		internal static void ImGuiStackSizesSetToContextStateNative(ImGuiStackSizes* self, ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStackSizes*, ImGuiContext*, void>)vt[866])(self, ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[866])((nint)self, (nint)ctx);
			#endif
		}

		public static void ImGuiStackSizesSetToContextState(ImGuiStackSizesPtr self, ImGuiContextPtr ctx)
		{
			ImGuiStackSizesSetToContextStateNative(self, ctx);
		}

		public static void ImGuiStackSizesSetToContextState(ref ImGuiStackSizes self, ImGuiContextPtr ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiStackSizesSetToContextStateNative((ImGuiStackSizes*)pself, ctx);
			}
		}

		public static void ImGuiStackSizesSetToContextState(ImGuiStackSizesPtr self, ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiStackSizesSetToContextStateNative(self, (ImGuiContext*)pctx);
			}
		}

		public static void ImGuiStackSizesSetToContextState(ref ImGuiStackSizes self, ref ImGuiContext ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				fixed (ImGuiContext* pctx = &ctx)
				{
					ImGuiStackSizesSetToContextStateNative((ImGuiStackSizes*)pself, (ImGuiContext*)pctx);
				}
			}
		}

		internal static void ImGuiStackSizesCompareWithContextStateNative(ImGuiStackSizes* self, ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStackSizes*, ImGuiContext*, void>)vt[867])(self, ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[867])((nint)self, (nint)ctx);
			#endif
		}

		public static void ImGuiStackSizesCompareWithContextState(ImGuiStackSizesPtr self, ImGuiContextPtr ctx)
		{
			ImGuiStackSizesCompareWithContextStateNative(self, ctx);
		}

		public static void ImGuiStackSizesCompareWithContextState(ref ImGuiStackSizes self, ImGuiContextPtr ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiStackSizesCompareWithContextStateNative((ImGuiStackSizes*)pself, ctx);
			}
		}

		public static void ImGuiStackSizesCompareWithContextState(ImGuiStackSizesPtr self, ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiStackSizesCompareWithContextStateNative(self, (ImGuiContext*)pctx);
			}
		}

		public static void ImGuiStackSizesCompareWithContextState(ref ImGuiStackSizes self, ref ImGuiContext ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				fixed (ImGuiContext* pctx = &ctx)
				{
					ImGuiStackSizesCompareWithContextStateNative((ImGuiStackSizes*)pself, (ImGuiContext*)pctx);
				}
			}
		}

		internal static ImGuiPtrOrIndex* ImGuiPtrOrIndexImGuiPtrOrIndexPtrNative(void* ptr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ImGuiPtrOrIndex*>)vt[868])(ptr);
			#else
			return (ImGuiPtrOrIndex*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[868])((nint)ptr);
			#endif
		}

		public static ImGuiPtrOrIndexPtr ImGuiPtrOrIndexImGuiPtrOrIndexPtr(void* ptr)
		{
			ImGuiPtrOrIndexPtr ret = ImGuiPtrOrIndexImGuiPtrOrIndexPtrNative(ptr);
			return ret;
		}

		internal static void ImGuiPtrOrIndexDestroyNative(ImGuiPtrOrIndex* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPtrOrIndex*, void>)vt[869])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[869])((nint)self);
			#endif
		}

		public static void ImGuiPtrOrIndexDestroy(ImGuiPtrOrIndexPtr self)
		{
			ImGuiPtrOrIndexDestroyNative(self);
		}

		public static void ImGuiPtrOrIndexDestroy(ref ImGuiPtrOrIndex self)
		{
			fixed (ImGuiPtrOrIndex* pself = &self)
			{
				ImGuiPtrOrIndexDestroyNative((ImGuiPtrOrIndex*)pself);
			}
		}

		internal static ImGuiPtrOrIndex* ImGuiPtrOrIndexImGuiPtrOrIndexIntNative(int index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiPtrOrIndex*>)vt[870])(index);
			#else
			return (ImGuiPtrOrIndex*)((delegate* unmanaged[Cdecl]<int, nint>)vt[870])(index);
			#endif
		}

		public static ImGuiPtrOrIndexPtr ImGuiPtrOrIndexImGuiPtrOrIndexInt(int index)
		{
			ImGuiPtrOrIndexPtr ret = ImGuiPtrOrIndexImGuiPtrOrIndexIntNative(index);
			return ret;
		}

		internal static ImGuiPopupData* ImGuiPopupDataImGuiPopupDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPopupData*>)vt[871])();
			#else
			return (ImGuiPopupData*)((delegate* unmanaged[Cdecl]<nint>)vt[871])();
			#endif
		}

		public static ImGuiPopupDataPtr ImGuiPopupDataImGuiPopupData()
		{
			ImGuiPopupDataPtr ret = ImGuiPopupDataImGuiPopupDataNative();
			return ret;
		}

		internal static void ImGuiPopupDataDestroyNative(ImGuiPopupData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPopupData*, void>)vt[872])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[872])((nint)self);
			#endif
		}

		public static void ImGuiPopupDataDestroy(ImGuiPopupDataPtr self)
		{
			ImGuiPopupDataDestroyNative(self);
		}

		public static void ImGuiPopupDataDestroy(ref ImGuiPopupData self)
		{
			fixed (ImGuiPopupData* pself = &self)
			{
				ImGuiPopupDataDestroyNative((ImGuiPopupData*)pself);
			}
		}

		internal static ImGuiInputEvent* ImGuiInputEventImGuiInputEventNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputEvent*>)vt[873])();
			#else
			return (ImGuiInputEvent*)((delegate* unmanaged[Cdecl]<nint>)vt[873])();
			#endif
		}

		public static ImGuiInputEventPtr ImGuiInputEventImGuiInputEvent()
		{
			ImGuiInputEventPtr ret = ImGuiInputEventImGuiInputEventNative();
			return ret;
		}

		internal static void ImGuiInputEventDestroyNative(ImGuiInputEvent* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputEvent*, void>)vt[874])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[874])((nint)self);
			#endif
		}

		public static void ImGuiInputEventDestroy(ImGuiInputEventPtr self)
		{
			ImGuiInputEventDestroyNative(self);
		}

		public static void ImGuiInputEventDestroy(ref ImGuiInputEvent self)
		{
			fixed (ImGuiInputEvent* pself = &self)
			{
				ImGuiInputEventDestroyNative((ImGuiInputEvent*)pself);
			}
		}

		internal static ImGuiKeyRoutingData* ImGuiKeyRoutingDataImGuiKeyRoutingDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingData*>)vt[875])();
			#else
			return (ImGuiKeyRoutingData*)((delegate* unmanaged[Cdecl]<nint>)vt[875])();
			#endif
		}

		public static ImGuiKeyRoutingDataPtr ImGuiKeyRoutingDataImGuiKeyRoutingData()
		{
			ImGuiKeyRoutingDataPtr ret = ImGuiKeyRoutingDataImGuiKeyRoutingDataNative();
			return ret;
		}

		internal static void ImGuiKeyRoutingDataDestroyNative(ImGuiKeyRoutingData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingData*, void>)vt[876])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[876])((nint)self);
			#endif
		}

		public static void ImGuiKeyRoutingDataDestroy(ImGuiKeyRoutingDataPtr self)
		{
			ImGuiKeyRoutingDataDestroyNative(self);
		}

		public static void ImGuiKeyRoutingDataDestroy(ref ImGuiKeyRoutingData self)
		{
			fixed (ImGuiKeyRoutingData* pself = &self)
			{
				ImGuiKeyRoutingDataDestroyNative((ImGuiKeyRoutingData*)pself);
			}
		}

		internal static ImGuiKeyRoutingTable* ImGuiKeyRoutingTableImGuiKeyRoutingTableNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingTable*>)vt[877])();
			#else
			return (ImGuiKeyRoutingTable*)((delegate* unmanaged[Cdecl]<nint>)vt[877])();
			#endif
		}

		public static ImGuiKeyRoutingTablePtr ImGuiKeyRoutingTableImGuiKeyRoutingTable()
		{
			ImGuiKeyRoutingTablePtr ret = ImGuiKeyRoutingTableImGuiKeyRoutingTableNative();
			return ret;
		}

		internal static void ImGuiKeyRoutingTableDestroyNative(ImGuiKeyRoutingTable* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingTable*, void>)vt[878])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[878])((nint)self);
			#endif
		}

		public static void ImGuiKeyRoutingTableDestroy(ImGuiKeyRoutingTablePtr self)
		{
			ImGuiKeyRoutingTableDestroyNative(self);
		}

		public static void ImGuiKeyRoutingTableDestroy(ref ImGuiKeyRoutingTable self)
		{
			fixed (ImGuiKeyRoutingTable* pself = &self)
			{
				ImGuiKeyRoutingTableDestroyNative((ImGuiKeyRoutingTable*)pself);
			}
		}

		internal static void ImGuiKeyRoutingTableClearNative(ImGuiKeyRoutingTable* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingTable*, void>)vt[879])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[879])((nint)self);
			#endif
		}

		public static void ImGuiKeyRoutingTableClear(ImGuiKeyRoutingTablePtr self)
		{
			ImGuiKeyRoutingTableClearNative(self);
		}

		public static void ImGuiKeyRoutingTableClear(ref ImGuiKeyRoutingTable self)
		{
			fixed (ImGuiKeyRoutingTable* pself = &self)
			{
				ImGuiKeyRoutingTableClearNative((ImGuiKeyRoutingTable*)pself);
			}
		}

		internal static ImGuiKeyOwnerData* ImGuiKeyOwnerDataImGuiKeyOwnerDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKeyOwnerData*>)vt[880])();
			#else
			return (ImGuiKeyOwnerData*)((delegate* unmanaged[Cdecl]<nint>)vt[880])();
			#endif
		}

		public static ImGuiKeyOwnerDataPtr ImGuiKeyOwnerDataImGuiKeyOwnerData()
		{
			ImGuiKeyOwnerDataPtr ret = ImGuiKeyOwnerDataImGuiKeyOwnerDataNative();
			return ret;
		}

		internal static void ImGuiKeyOwnerDataDestroyNative(ImGuiKeyOwnerData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiKeyOwnerData*, void>)vt[881])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[881])((nint)self);
			#endif
		}

		public static void ImGuiKeyOwnerDataDestroy(ImGuiKeyOwnerDataPtr self)
		{
			ImGuiKeyOwnerDataDestroyNative(self);
		}

		public static void ImGuiKeyOwnerDataDestroy(ref ImGuiKeyOwnerData self)
		{
			fixed (ImGuiKeyOwnerData* pself = &self)
			{
				ImGuiKeyOwnerDataDestroyNative((ImGuiKeyOwnerData*)pself);
			}
		}

		internal static ImGuiListClipperRange ImGuiListClipperRangeFromIndicesNative(int min, int max)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, ImGuiListClipperRange>)vt[882])(min, max);
			#else
			return (ImGuiListClipperRange)((delegate* unmanaged[Cdecl]<int, int, ImGuiListClipperRange>)vt[882])(min, max);
			#endif
		}

		public static ImGuiListClipperRange ImGuiListClipperRangeFromIndices(int min, int max)
		{
			ImGuiListClipperRange ret = ImGuiListClipperRangeFromIndicesNative(min, max);
			return ret;
		}

		internal static ImGuiListClipperRange ImGuiListClipperRangeFromPositionsNative(float y1, float y2, int offMin, int offMax)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, int, int, ImGuiListClipperRange>)vt[883])(y1, y2, offMin, offMax);
			#else
			return (ImGuiListClipperRange)((delegate* unmanaged[Cdecl]<float, float, int, int, ImGuiListClipperRange>)vt[883])(y1, y2, offMin, offMax);
			#endif
		}

		public static ImGuiListClipperRange ImGuiListClipperRangeFromPositions(float y1, float y2, int offMin, int offMax)
		{
			ImGuiListClipperRange ret = ImGuiListClipperRangeFromPositionsNative(y1, y2, offMin, offMax);
			return ret;
		}

		internal static ImGuiListClipperData* ImGuiListClipperDataImGuiListClipperDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiListClipperData*>)vt[884])();
			#else
			return (ImGuiListClipperData*)((delegate* unmanaged[Cdecl]<nint>)vt[884])();
			#endif
		}

		public static ImGuiListClipperDataPtr ImGuiListClipperDataImGuiListClipperData()
		{
			ImGuiListClipperDataPtr ret = ImGuiListClipperDataImGuiListClipperDataNative();
			return ret;
		}

		internal static void ImGuiListClipperDataDestroyNative(ImGuiListClipperData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiListClipperData*, void>)vt[885])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[885])((nint)self);
			#endif
		}

		public static void ImGuiListClipperDataDestroy(ImGuiListClipperDataPtr self)
		{
			ImGuiListClipperDataDestroyNative(self);
		}

		public static void ImGuiListClipperDataDestroy(ref ImGuiListClipperData self)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				ImGuiListClipperDataDestroyNative((ImGuiListClipperData*)pself);
			}
		}

		internal static void ImGuiListClipperDataResetNative(ImGuiListClipperData* self, ImGuiListClipper* clipper)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiListClipperData*, ImGuiListClipper*, void>)vt[886])(self, clipper);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[886])((nint)self, (nint)clipper);
			#endif
		}

		public static void ImGuiListClipperDataReset(ImGuiListClipperDataPtr self, ImGuiListClipperPtr clipper)
		{
			ImGuiListClipperDataResetNative(self, clipper);
		}

		public static void ImGuiListClipperDataReset(ref ImGuiListClipperData self, ImGuiListClipperPtr clipper)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				ImGuiListClipperDataResetNative((ImGuiListClipperData*)pself, clipper);
			}
		}

		public static void ImGuiListClipperDataReset(ImGuiListClipperDataPtr self, ref ImGuiListClipper clipper)
		{
			fixed (ImGuiListClipper* pclipper = &clipper)
			{
				ImGuiListClipperDataResetNative(self, (ImGuiListClipper*)pclipper);
			}
		}

		public static void ImGuiListClipperDataReset(ref ImGuiListClipperData self, ref ImGuiListClipper clipper)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				fixed (ImGuiListClipper* pclipper = &clipper)
				{
					ImGuiListClipperDataResetNative((ImGuiListClipperData*)pself, (ImGuiListClipper*)pclipper);
				}
			}
		}

		internal static ImGuiNavItemData* ImGuiNavItemDataImGuiNavItemDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiNavItemData*>)vt[887])();
			#else
			return (ImGuiNavItemData*)((delegate* unmanaged[Cdecl]<nint>)vt[887])();
			#endif
		}

		public static ImGuiNavItemDataPtr ImGuiNavItemDataImGuiNavItemData()
		{
			ImGuiNavItemDataPtr ret = ImGuiNavItemDataImGuiNavItemDataNative();
			return ret;
		}

		internal static void ImGuiNavItemDataDestroyNative(ImGuiNavItemData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiNavItemData*, void>)vt[888])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[888])((nint)self);
			#endif
		}

		public static void ImGuiNavItemDataDestroy(ImGuiNavItemDataPtr self)
		{
			ImGuiNavItemDataDestroyNative(self);
		}

		public static void ImGuiNavItemDataDestroy(ref ImGuiNavItemData self)
		{
			fixed (ImGuiNavItemData* pself = &self)
			{
				ImGuiNavItemDataDestroyNative((ImGuiNavItemData*)pself);
			}
		}

		internal static void ImGuiNavItemDataClearNative(ImGuiNavItemData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiNavItemData*, void>)vt[889])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[889])((nint)self);
			#endif
		}

		public static void ImGuiNavItemDataClear(ImGuiNavItemDataPtr self)
		{
			ImGuiNavItemDataClearNative(self);
		}

		public static void ImGuiNavItemDataClear(ref ImGuiNavItemData self)
		{
			fixed (ImGuiNavItemData* pself = &self)
			{
				ImGuiNavItemDataClearNative((ImGuiNavItemData*)pself);
			}
		}

		internal static ImGuiTypingSelectState* ImGuiTypingSelectStateImGuiTypingSelectStateNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTypingSelectState*>)vt[890])();
			#else
			return (ImGuiTypingSelectState*)((delegate* unmanaged[Cdecl]<nint>)vt[890])();
			#endif
		}

		public static ImGuiTypingSelectStatePtr ImGuiTypingSelectStateImGuiTypingSelectState()
		{
			ImGuiTypingSelectStatePtr ret = ImGuiTypingSelectStateImGuiTypingSelectStateNative();
			return ret;
		}

		internal static void ImGuiTypingSelectStateDestroyNative(ImGuiTypingSelectState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTypingSelectState*, void>)vt[891])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[891])((nint)self);
			#endif
		}

		public static void ImGuiTypingSelectStateDestroy(ImGuiTypingSelectStatePtr self)
		{
			ImGuiTypingSelectStateDestroyNative(self);
		}

		public static void ImGuiTypingSelectStateDestroy(ref ImGuiTypingSelectState self)
		{
			fixed (ImGuiTypingSelectState* pself = &self)
			{
				ImGuiTypingSelectStateDestroyNative((ImGuiTypingSelectState*)pself);
			}
		}

		internal static void ImGuiTypingSelectStateClearNative(ImGuiTypingSelectState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTypingSelectState*, void>)vt[892])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[892])((nint)self);
			#endif
		}

		public static void ImGuiTypingSelectStateClear(ImGuiTypingSelectStatePtr self)
		{
			ImGuiTypingSelectStateClearNative(self);
		}

		public static void ImGuiTypingSelectStateClear(ref ImGuiTypingSelectState self)
		{
			fixed (ImGuiTypingSelectState* pself = &self)
			{
				ImGuiTypingSelectStateClearNative((ImGuiTypingSelectState*)pself);
			}
		}

		internal static ImGuiOldColumnData* ImGuiOldColumnDataImGuiOldColumnDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiOldColumnData*>)vt[893])();
			#else
			return (ImGuiOldColumnData*)((delegate* unmanaged[Cdecl]<nint>)vt[893])();
			#endif
		}

		public static ImGuiOldColumnDataPtr ImGuiOldColumnDataImGuiOldColumnData()
		{
			ImGuiOldColumnDataPtr ret = ImGuiOldColumnDataImGuiOldColumnDataNative();
			return ret;
		}

		internal static void ImGuiOldColumnDataDestroyNative(ImGuiOldColumnData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiOldColumnData*, void>)vt[894])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[894])((nint)self);
			#endif
		}

		public static void ImGuiOldColumnDataDestroy(ImGuiOldColumnDataPtr self)
		{
			ImGuiOldColumnDataDestroyNative(self);
		}

		public static void ImGuiOldColumnDataDestroy(ref ImGuiOldColumnData self)
		{
			fixed (ImGuiOldColumnData* pself = &self)
			{
				ImGuiOldColumnDataDestroyNative((ImGuiOldColumnData*)pself);
			}
		}

		internal static ImGuiOldColumns* ImGuiOldColumnsImGuiOldColumnsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiOldColumns*>)vt[895])();
			#else
			return (ImGuiOldColumns*)((delegate* unmanaged[Cdecl]<nint>)vt[895])();
			#endif
		}

		public static ImGuiOldColumnsPtr ImGuiOldColumnsImGuiOldColumns()
		{
			ImGuiOldColumnsPtr ret = ImGuiOldColumnsImGuiOldColumnsNative();
			return ret;
		}

		internal static void ImGuiOldColumnsDestroyNative(ImGuiOldColumns* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiOldColumns*, void>)vt[896])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[896])((nint)self);
			#endif
		}

		public static void ImGuiOldColumnsDestroy(ImGuiOldColumnsPtr self)
		{
			ImGuiOldColumnsDestroyNative(self);
		}

		public static void ImGuiOldColumnsDestroy(ref ImGuiOldColumns self)
		{
			fixed (ImGuiOldColumns* pself = &self)
			{
				ImGuiOldColumnsDestroyNative((ImGuiOldColumns*)pself);
			}
		}

		internal static ImGuiBoxSelectState* ImGuiBoxSelectStateImGuiBoxSelectStateNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiBoxSelectState*>)vt[897])();
			#else
			return (ImGuiBoxSelectState*)((delegate* unmanaged[Cdecl]<nint>)vt[897])();
			#endif
		}

		public static ImGuiBoxSelectStatePtr ImGuiBoxSelectStateImGuiBoxSelectState()
		{
			ImGuiBoxSelectStatePtr ret = ImGuiBoxSelectStateImGuiBoxSelectStateNative();
			return ret;
		}

		internal static void ImGuiBoxSelectStateDestroyNative(ImGuiBoxSelectState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiBoxSelectState*, void>)vt[898])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[898])((nint)self);
			#endif
		}

		public static void ImGuiBoxSelectStateDestroy(ImGuiBoxSelectStatePtr self)
		{
			ImGuiBoxSelectStateDestroyNative(self);
		}

		public static void ImGuiBoxSelectStateDestroy(ref ImGuiBoxSelectState self)
		{
			fixed (ImGuiBoxSelectState* pself = &self)
			{
				ImGuiBoxSelectStateDestroyNative((ImGuiBoxSelectState*)pself);
			}
		}

		internal static ImGuiMultiSelectTempData* ImGuiMultiSelectTempDataImGuiMultiSelectTempDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMultiSelectTempData*>)vt[899])();
			#else
			return (ImGuiMultiSelectTempData*)((delegate* unmanaged[Cdecl]<nint>)vt[899])();
			#endif
		}

		public static ImGuiMultiSelectTempDataPtr ImGuiMultiSelectTempDataImGuiMultiSelectTempData()
		{
			ImGuiMultiSelectTempDataPtr ret = ImGuiMultiSelectTempDataImGuiMultiSelectTempDataNative();
			return ret;
		}

		internal static void ImGuiMultiSelectTempDataDestroyNative(ImGuiMultiSelectTempData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMultiSelectTempData*, void>)vt[900])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[900])((nint)self);
			#endif
		}

		public static void ImGuiMultiSelectTempDataDestroy(ImGuiMultiSelectTempDataPtr self)
		{
			ImGuiMultiSelectTempDataDestroyNative(self);
		}

		public static void ImGuiMultiSelectTempDataDestroy(ref ImGuiMultiSelectTempData self)
		{
			fixed (ImGuiMultiSelectTempData* pself = &self)
			{
				ImGuiMultiSelectTempDataDestroyNative((ImGuiMultiSelectTempData*)pself);
			}
		}

		internal static void ImGuiMultiSelectTempDataClearNative(ImGuiMultiSelectTempData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMultiSelectTempData*, void>)vt[901])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[901])((nint)self);
			#endif
		}

		public static void ImGuiMultiSelectTempDataClear(ImGuiMultiSelectTempDataPtr self)
		{
			ImGuiMultiSelectTempDataClearNative(self);
		}

		public static void ImGuiMultiSelectTempDataClear(ref ImGuiMultiSelectTempData self)
		{
			fixed (ImGuiMultiSelectTempData* pself = &self)
			{
				ImGuiMultiSelectTempDataClearNative((ImGuiMultiSelectTempData*)pself);
			}
		}

		internal static void ImGuiMultiSelectTempDataClearIONative(ImGuiMultiSelectTempData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMultiSelectTempData*, void>)vt[902])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[902])((nint)self);
			#endif
		}

		public static void ImGuiMultiSelectTempDataClearIO(ImGuiMultiSelectTempDataPtr self)
		{
			ImGuiMultiSelectTempDataClearIONative(self);
		}

		public static void ImGuiMultiSelectTempDataClearIO(ref ImGuiMultiSelectTempData self)
		{
			fixed (ImGuiMultiSelectTempData* pself = &self)
			{
				ImGuiMultiSelectTempDataClearIONative((ImGuiMultiSelectTempData*)pself);
			}
		}

		internal static ImGuiMultiSelectState* ImGuiMultiSelectStateImGuiMultiSelectStateNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMultiSelectState*>)vt[903])();
			#else
			return (ImGuiMultiSelectState*)((delegate* unmanaged[Cdecl]<nint>)vt[903])();
			#endif
		}

		public static ImGuiMultiSelectStatePtr ImGuiMultiSelectStateImGuiMultiSelectState()
		{
			ImGuiMultiSelectStatePtr ret = ImGuiMultiSelectStateImGuiMultiSelectStateNative();
			return ret;
		}

		internal static void ImGuiMultiSelectStateDestroyNative(ImGuiMultiSelectState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMultiSelectState*, void>)vt[904])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[904])((nint)self);
			#endif
		}

		public static void ImGuiMultiSelectStateDestroy(ImGuiMultiSelectStatePtr self)
		{
			ImGuiMultiSelectStateDestroyNative(self);
		}

		public static void ImGuiMultiSelectStateDestroy(ref ImGuiMultiSelectState self)
		{
			fixed (ImGuiMultiSelectState* pself = &self)
			{
				ImGuiMultiSelectStateDestroyNative((ImGuiMultiSelectState*)pself);
			}
		}

		internal static ImGuiDockNode* ImGuiDockNodeImGuiDockNodeNative(int id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiDockNode*>)vt[905])(id);
			#else
			return (ImGuiDockNode*)((delegate* unmanaged[Cdecl]<int, nint>)vt[905])(id);
			#endif
		}

		public static ImGuiDockNodePtr ImGuiDockNodeImGuiDockNode(int id)
		{
			ImGuiDockNodePtr ret = ImGuiDockNodeImGuiDockNodeNative(id);
			return ret;
		}

		internal static void ImGuiDockNodeDestroyNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDockNode*, void>)vt[906])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[906])((nint)self);
			#endif
		}

		public static void ImGuiDockNodeDestroy(ImGuiDockNodePtr self)
		{
			ImGuiDockNodeDestroyNative(self);
		}

		public static void ImGuiDockNodeDestroy(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImGuiDockNodeDestroyNative((ImGuiDockNode*)pself);
			}
		}

		internal static byte ImGuiDockNodeIsRootNodeNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[907])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[907])((nint)self);
			#endif
		}

		public static bool ImGuiDockNodeIsRootNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsRootNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsRootNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsRootNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		internal static byte ImGuiDockNodeIsDockSpaceNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[908])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[908])((nint)self);
			#endif
		}

		public static bool ImGuiDockNodeIsDockSpace(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsDockSpaceNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsDockSpace(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsDockSpaceNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		internal static byte ImGuiDockNodeIsFloatingNodeNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[909])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[909])((nint)self);
			#endif
		}

		public static bool ImGuiDockNodeIsFloatingNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsFloatingNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsFloatingNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsFloatingNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		internal static byte ImGuiDockNodeIsCentralNodeNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[910])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[910])((nint)self);
			#endif
		}

		public static bool ImGuiDockNodeIsCentralNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsCentralNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsCentralNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsCentralNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		internal static byte ImGuiDockNodeIsHiddenTabBarNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[911])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[911])((nint)self);
			#endif
		}

		public static bool ImGuiDockNodeIsHiddenTabBar(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsHiddenTabBarNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsHiddenTabBar(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsHiddenTabBarNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		internal static byte ImGuiDockNodeIsNoTabBarNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[912])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[912])((nint)self);
			#endif
		}

		public static bool ImGuiDockNodeIsNoTabBar(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsNoTabBarNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsNoTabBar(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsNoTabBarNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		internal static byte ImGuiDockNodeIsSplitNodeNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[913])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[913])((nint)self);
			#endif
		}

		public static bool ImGuiDockNodeIsSplitNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsSplitNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsSplitNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsSplitNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		internal static byte ImGuiDockNodeIsLeafNodeNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[914])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[914])((nint)self);
			#endif
		}

		public static bool ImGuiDockNodeIsLeafNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsLeafNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsLeafNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsLeafNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		internal static byte ImGuiDockNodeIsEmptyNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[915])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[915])((nint)self);
			#endif
		}

		public static bool ImGuiDockNodeIsEmpty(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsEmptyNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsEmpty(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsEmptyNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		internal static void ImGuiDockNodeRectNative(ImRect* output, ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiDockNode*, void>)vt[916])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[916])((nint)output, (nint)self);
			#endif
		}

		public static ImRect ImGuiDockNodeRect(ImGuiDockNodePtr self)
		{
			ImRect ret;
			ImGuiDockNodeRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiDockNodeRect(ImRectPtr output, ImGuiDockNodePtr self)
		{
			ImGuiDockNodeRectNative(output, self);
		}

		public static void ImGuiDockNodeRect(ref ImRect output, ImGuiDockNodePtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiDockNodeRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiDockNodeRect(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImRect ret;
				ImGuiDockNodeRectNative(&ret, (ImGuiDockNode*)pself);
				return ret;
			}
		}

		public static void ImGuiDockNodeRect(ImRectPtr output, ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImGuiDockNodeRectNative(output, (ImGuiDockNode*)pself);
			}
		}

		public static void ImGuiDockNodeRect(ref ImRect output, ref ImGuiDockNode self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiDockNode* pself = &self)
				{
					ImGuiDockNodeRectNative((ImRect*)poutput, (ImGuiDockNode*)pself);
				}
			}
		}

		internal static void ImGuiDockNodeSetLocalFlagsNative(ImGuiDockNode* self, ImGuiDockNodeFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDockNode*, ImGuiDockNodeFlags, void>)vt[917])(self, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiDockNodeFlags, void>)vt[917])((nint)self, flags);
			#endif
		}

		public static void ImGuiDockNodeSetLocalFlags(ImGuiDockNodePtr self, ImGuiDockNodeFlags flags)
		{
			ImGuiDockNodeSetLocalFlagsNative(self, flags);
		}

		public static void ImGuiDockNodeSetLocalFlags(ref ImGuiDockNode self, ImGuiDockNodeFlags flags)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImGuiDockNodeSetLocalFlagsNative((ImGuiDockNode*)pself, flags);
			}
		}

		internal static void ImGuiDockNodeUpdateMergedFlagsNative(ImGuiDockNode* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDockNode*, void>)vt[918])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[918])((nint)self);
			#endif
		}

		public static void ImGuiDockNodeUpdateMergedFlags(ImGuiDockNodePtr self)
		{
			ImGuiDockNodeUpdateMergedFlagsNative(self);
		}

		public static void ImGuiDockNodeUpdateMergedFlags(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImGuiDockNodeUpdateMergedFlagsNative((ImGuiDockNode*)pself);
			}
		}

		internal static ImGuiDockContext* ImGuiDockContextImGuiDockContextNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockContext*>)vt[919])();
			#else
			return (ImGuiDockContext*)((delegate* unmanaged[Cdecl]<nint>)vt[919])();
			#endif
		}

		public static ImGuiDockContextPtr ImGuiDockContextImGuiDockContext()
		{
			ImGuiDockContextPtr ret = ImGuiDockContextImGuiDockContextNative();
			return ret;
		}

		internal static void ImGuiDockContextDestroyNative(ImGuiDockContext* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDockContext*, void>)vt[920])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[920])((nint)self);
			#endif
		}

		public static void ImGuiDockContextDestroy(ImGuiDockContextPtr self)
		{
			ImGuiDockContextDestroyNative(self);
		}

		public static void ImGuiDockContextDestroy(ref ImGuiDockContext self)
		{
			fixed (ImGuiDockContext* pself = &self)
			{
				ImGuiDockContextDestroyNative((ImGuiDockContext*)pself);
			}
		}

		internal static ImGuiViewportP* ImGuiViewportPImGuiViewportPNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiViewportP*>)vt[921])();
			#else
			return (ImGuiViewportP*)((delegate* unmanaged[Cdecl]<nint>)vt[921])();
			#endif
		}

		public static ImGuiViewportPPtr ImGuiViewportPImGuiViewportP()
		{
			ImGuiViewportPPtr ret = ImGuiViewportPImGuiViewportPNative();
			return ret;
		}

		internal static void ImGuiViewportPDestroyNative(ImGuiViewportP* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, void>)vt[922])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[922])((nint)self);
			#endif
		}

		public static void ImGuiViewportPDestroy(ImGuiViewportPPtr self)
		{
			ImGuiViewportPDestroyNative(self);
		}

		public static void ImGuiViewportPDestroy(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPDestroyNative((ImGuiViewportP*)pself);
			}
		}

		internal static void ImGuiViewportPClearRequestFlagsNative(ImGuiViewportP* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, void>)vt[923])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[923])((nint)self);
			#endif
		}

		public static void ImGuiViewportPClearRequestFlags(ImGuiViewportPPtr self)
		{
			ImGuiViewportPClearRequestFlagsNative(self);
		}

		public static void ImGuiViewportPClearRequestFlags(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPClearRequestFlagsNative((ImGuiViewportP*)pself);
			}
		}

		internal static void ImGuiViewportPCalcWorkRectPosNative(Vector2* output, ImGuiViewportP* self, Vector2 offMin)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiViewportP*, Vector2, void>)vt[924])(output, self, offMin);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, Vector2, void>)vt[924])((nint)output, (nint)self, offMin);
			#endif
		}

		public static Vector2 ImGuiViewportPCalcWorkRectPos(ImGuiViewportPPtr self, Vector2 offMin)
		{
			Vector2 ret;
			ImGuiViewportPCalcWorkRectPosNative(&ret, self, offMin);
			return ret;
		}

		public static void ImGuiViewportPCalcWorkRectPos(Vector2* output, ImGuiViewportPPtr self, Vector2 offMin)
		{
			ImGuiViewportPCalcWorkRectPosNative(output, self, offMin);
		}

		public static void ImGuiViewportPCalcWorkRectPos(ref Vector2 output, ImGuiViewportPPtr self, Vector2 offMin)
		{
			fixed (Vector2* poutput = &output)
			{
				ImGuiViewportPCalcWorkRectPosNative((Vector2*)poutput, self, offMin);
			}
		}

		public static Vector2 ImGuiViewportPCalcWorkRectPos(ref ImGuiViewportP self, Vector2 offMin)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				Vector2 ret;
				ImGuiViewportPCalcWorkRectPosNative(&ret, (ImGuiViewportP*)pself, offMin);
				return ret;
			}
		}

		public static void ImGuiViewportPCalcWorkRectPos(Vector2* output, ref ImGuiViewportP self, Vector2 offMin)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPCalcWorkRectPosNative(output, (ImGuiViewportP*)pself, offMin);
			}
		}

		public static void ImGuiViewportPCalcWorkRectPos(ref Vector2 output, ref ImGuiViewportP self, Vector2 offMin)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPCalcWorkRectPosNative((Vector2*)poutput, (ImGuiViewportP*)pself, offMin);
				}
			}
		}

		internal static void ImGuiViewportPCalcWorkRectSizeNative(Vector2* output, ImGuiViewportP* self, Vector2 offMin, Vector2 offMax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiViewportP*, Vector2, Vector2, void>)vt[925])(output, self, offMin, offMax);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, Vector2, Vector2, void>)vt[925])((nint)output, (nint)self, offMin, offMax);
			#endif
		}

		public static Vector2 ImGuiViewportPCalcWorkRectSize(ImGuiViewportPPtr self, Vector2 offMin, Vector2 offMax)
		{
			Vector2 ret;
			ImGuiViewportPCalcWorkRectSizeNative(&ret, self, offMin, offMax);
			return ret;
		}

		public static void ImGuiViewportPCalcWorkRectSize(Vector2* output, ImGuiViewportPPtr self, Vector2 offMin, Vector2 offMax)
		{
			ImGuiViewportPCalcWorkRectSizeNative(output, self, offMin, offMax);
		}

		public static void ImGuiViewportPCalcWorkRectSize(ref Vector2 output, ImGuiViewportPPtr self, Vector2 offMin, Vector2 offMax)
		{
			fixed (Vector2* poutput = &output)
			{
				ImGuiViewportPCalcWorkRectSizeNative((Vector2*)poutput, self, offMin, offMax);
			}
		}

		public static Vector2 ImGuiViewportPCalcWorkRectSize(ref ImGuiViewportP self, Vector2 offMin, Vector2 offMax)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				Vector2 ret;
				ImGuiViewportPCalcWorkRectSizeNative(&ret, (ImGuiViewportP*)pself, offMin, offMax);
				return ret;
			}
		}

		public static void ImGuiViewportPCalcWorkRectSize(Vector2* output, ref ImGuiViewportP self, Vector2 offMin, Vector2 offMax)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPCalcWorkRectSizeNative(output, (ImGuiViewportP*)pself, offMin, offMax);
			}
		}

		public static void ImGuiViewportPCalcWorkRectSize(ref Vector2 output, ref ImGuiViewportP self, Vector2 offMin, Vector2 offMax)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPCalcWorkRectSizeNative((Vector2*)poutput, (ImGuiViewportP*)pself, offMin, offMax);
				}
			}
		}

		internal static void ImGuiViewportPUpdateWorkRectNative(ImGuiViewportP* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, void>)vt[926])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[926])((nint)self);
			#endif
		}

		public static void ImGuiViewportPUpdateWorkRect(ImGuiViewportPPtr self)
		{
			ImGuiViewportPUpdateWorkRectNative(self);
		}

		public static void ImGuiViewportPUpdateWorkRect(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPUpdateWorkRectNative((ImGuiViewportP*)pself);
			}
		}

		internal static void ImGuiViewportPGetMainRectNative(ImRect* output, ImGuiViewportP* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiViewportP*, void>)vt[927])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[927])((nint)output, (nint)self);
			#endif
		}

		public static ImRect ImGuiViewportPGetMainRect(ImGuiViewportPPtr self)
		{
			ImRect ret;
			ImGuiViewportPGetMainRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiViewportPGetMainRect(ImRectPtr output, ImGuiViewportPPtr self)
		{
			ImGuiViewportPGetMainRectNative(output, self);
		}

		public static void ImGuiViewportPGetMainRect(ref ImRect output, ImGuiViewportPPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiViewportPGetMainRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiViewportPGetMainRect(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImRect ret;
				ImGuiViewportPGetMainRectNative(&ret, (ImGuiViewportP*)pself);
				return ret;
			}
		}

		public static void ImGuiViewportPGetMainRect(ImRectPtr output, ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPGetMainRectNative(output, (ImGuiViewportP*)pself);
			}
		}

		public static void ImGuiViewportPGetMainRect(ref ImRect output, ref ImGuiViewportP self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPGetMainRectNative((ImRect*)poutput, (ImGuiViewportP*)pself);
				}
			}
		}

		internal static void ImGuiViewportPGetWorkRectNative(ImRect* output, ImGuiViewportP* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiViewportP*, void>)vt[928])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[928])((nint)output, (nint)self);
			#endif
		}

		public static ImRect ImGuiViewportPGetWorkRect(ImGuiViewportPPtr self)
		{
			ImRect ret;
			ImGuiViewportPGetWorkRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiViewportPGetWorkRect(ImRectPtr output, ImGuiViewportPPtr self)
		{
			ImGuiViewportPGetWorkRectNative(output, self);
		}

		public static void ImGuiViewportPGetWorkRect(ref ImRect output, ImGuiViewportPPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiViewportPGetWorkRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiViewportPGetWorkRect(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImRect ret;
				ImGuiViewportPGetWorkRectNative(&ret, (ImGuiViewportP*)pself);
				return ret;
			}
		}

		public static void ImGuiViewportPGetWorkRect(ImRectPtr output, ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPGetWorkRectNative(output, (ImGuiViewportP*)pself);
			}
		}

		public static void ImGuiViewportPGetWorkRect(ref ImRect output, ref ImGuiViewportP self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPGetWorkRectNative((ImRect*)poutput, (ImGuiViewportP*)pself);
				}
			}
		}

		internal static void ImGuiViewportPGetBuildWorkRectNative(ImRect* output, ImGuiViewportP* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiViewportP*, void>)vt[929])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[929])((nint)output, (nint)self);
			#endif
		}

		public static ImRect ImGuiViewportPGetBuildWorkRect(ImGuiViewportPPtr self)
		{
			ImRect ret;
			ImGuiViewportPGetBuildWorkRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiViewportPGetBuildWorkRect(ImRectPtr output, ImGuiViewportPPtr self)
		{
			ImGuiViewportPGetBuildWorkRectNative(output, self);
		}

		public static void ImGuiViewportPGetBuildWorkRect(ref ImRect output, ImGuiViewportPPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiViewportPGetBuildWorkRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiViewportPGetBuildWorkRect(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImRect ret;
				ImGuiViewportPGetBuildWorkRectNative(&ret, (ImGuiViewportP*)pself);
				return ret;
			}
		}

		public static void ImGuiViewportPGetBuildWorkRect(ImRectPtr output, ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPGetBuildWorkRectNative(output, (ImGuiViewportP*)pself);
			}
		}

		public static void ImGuiViewportPGetBuildWorkRect(ref ImRect output, ref ImGuiViewportP self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPGetBuildWorkRectNative((ImRect*)poutput, (ImGuiViewportP*)pself);
				}
			}
		}

		internal static ImGuiWindowSettings* ImGuiWindowSettingsImGuiWindowSettingsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindowSettings*>)vt[930])();
			#else
			return (ImGuiWindowSettings*)((delegate* unmanaged[Cdecl]<nint>)vt[930])();
			#endif
		}

		public static ImGuiWindowSettingsPtr ImGuiWindowSettingsImGuiWindowSettings()
		{
			ImGuiWindowSettingsPtr ret = ImGuiWindowSettingsImGuiWindowSettingsNative();
			return ret;
		}

		internal static void ImGuiWindowSettingsDestroyNative(ImGuiWindowSettings* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowSettings*, void>)vt[931])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[931])((nint)self);
			#endif
		}

		public static void ImGuiWindowSettingsDestroy(ImGuiWindowSettingsPtr self)
		{
			ImGuiWindowSettingsDestroyNative(self);
		}

		public static void ImGuiWindowSettingsDestroy(ref ImGuiWindowSettings self)
		{
			fixed (ImGuiWindowSettings* pself = &self)
			{
				ImGuiWindowSettingsDestroyNative((ImGuiWindowSettings*)pself);
			}
		}

		internal static byte* ImGuiWindowSettingsGetNameNative(ImGuiWindowSettings* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindowSettings*, byte*>)vt[932])(self);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[932])((nint)self);
			#endif
		}

		public static byte* ImGuiWindowSettingsGetName(ImGuiWindowSettingsPtr self)
		{
			byte* ret = ImGuiWindowSettingsGetNameNative(self);
			return ret;
		}

		public static string ImGuiWindowSettingsGetNameS(ImGuiWindowSettingsPtr self)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiWindowSettingsGetNameNative(self));
			return ret;
		}

		public static byte* ImGuiWindowSettingsGetName(ref ImGuiWindowSettings self)
		{
			fixed (ImGuiWindowSettings* pself = &self)
			{
				byte* ret = ImGuiWindowSettingsGetNameNative((ImGuiWindowSettings*)pself);
				return ret;
			}
		}

		public static string ImGuiWindowSettingsGetNameS(ref ImGuiWindowSettings self)
		{
			fixed (ImGuiWindowSettings* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiWindowSettingsGetNameNative((ImGuiWindowSettings*)pself));
				return ret;
			}
		}

		internal static ImGuiSettingsHandler* ImGuiSettingsHandlerImGuiSettingsHandlerNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiSettingsHandler*>)vt[933])();
			#else
			return (ImGuiSettingsHandler*)((delegate* unmanaged[Cdecl]<nint>)vt[933])();
			#endif
		}

		public static ImGuiSettingsHandlerPtr ImGuiSettingsHandlerImGuiSettingsHandler()
		{
			ImGuiSettingsHandlerPtr ret = ImGuiSettingsHandlerImGuiSettingsHandlerNative();
			return ret;
		}

		internal static void ImGuiSettingsHandlerDestroyNative(ImGuiSettingsHandler* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSettingsHandler*, void>)vt[934])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[934])((nint)self);
			#endif
		}

		public static void ImGuiSettingsHandlerDestroy(ImGuiSettingsHandlerPtr self)
		{
			ImGuiSettingsHandlerDestroyNative(self);
		}

		public static void ImGuiSettingsHandlerDestroy(ref ImGuiSettingsHandler self)
		{
			fixed (ImGuiSettingsHandler* pself = &self)
			{
				ImGuiSettingsHandlerDestroyNative((ImGuiSettingsHandler*)pself);
			}
		}

		internal static ImGuiDebugAllocInfo* ImGuiDebugAllocInfoImGuiDebugAllocInfoNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDebugAllocInfo*>)vt[935])();
			#else
			return (ImGuiDebugAllocInfo*)((delegate* unmanaged[Cdecl]<nint>)vt[935])();
			#endif
		}

		public static ImGuiDebugAllocInfoPtr ImGuiDebugAllocInfoImGuiDebugAllocInfo()
		{
			ImGuiDebugAllocInfoPtr ret = ImGuiDebugAllocInfoImGuiDebugAllocInfoNative();
			return ret;
		}

		internal static void ImGuiDebugAllocInfoDestroyNative(ImGuiDebugAllocInfo* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDebugAllocInfo*, void>)vt[936])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[936])((nint)self);
			#endif
		}

		public static void ImGuiDebugAllocInfoDestroy(ImGuiDebugAllocInfoPtr self)
		{
			ImGuiDebugAllocInfoDestroyNative(self);
		}

		public static void ImGuiDebugAllocInfoDestroy(ref ImGuiDebugAllocInfo self)
		{
			fixed (ImGuiDebugAllocInfo* pself = &self)
			{
				ImGuiDebugAllocInfoDestroyNative((ImGuiDebugAllocInfo*)pself);
			}
		}

		internal static ImGuiStackLevelInfo* ImGuiStackLevelInfoImGuiStackLevelInfoNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStackLevelInfo*>)vt[937])();
			#else
			return (ImGuiStackLevelInfo*)((delegate* unmanaged[Cdecl]<nint>)vt[937])();
			#endif
		}

		public static ImGuiStackLevelInfoPtr ImGuiStackLevelInfoImGuiStackLevelInfo()
		{
			ImGuiStackLevelInfoPtr ret = ImGuiStackLevelInfoImGuiStackLevelInfoNative();
			return ret;
		}

		internal static void ImGuiStackLevelInfoDestroyNative(ImGuiStackLevelInfo* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStackLevelInfo*, void>)vt[938])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[938])((nint)self);
			#endif
		}

		public static void ImGuiStackLevelInfoDestroy(ImGuiStackLevelInfoPtr self)
		{
			ImGuiStackLevelInfoDestroyNative(self);
		}
	}
}
