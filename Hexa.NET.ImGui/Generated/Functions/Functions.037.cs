// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		public static void CalcTextSize(Vector2* output, byte* text, ref byte textEnd, bool hideTextAfterDoubleHash)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				CalcTextSizeNative(output, text, (byte*)ptextEnd, hideTextAfterDoubleHash ? (byte)1 : (byte)0, (float)(-1.0f));
			}
		}

		public static void CalcTextSize(Vector2* output, byte* text, ref byte textEnd, float wrapWidth)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				CalcTextSizeNative(output, text, (byte*)ptextEnd, (byte)(0), wrapWidth);
			}
		}

		public static void CalcTextSize(Vector2* output, byte* text, string textEnd, bool hideTextAfterDoubleHash, float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			CalcTextSizeNative(output, text, pStr0, hideTextAfterDoubleHash ? (byte)1 : (byte)0, wrapWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void CalcTextSize(Vector2* output, byte* text, string textEnd, bool hideTextAfterDoubleHash)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			CalcTextSizeNative(output, text, pStr0, hideTextAfterDoubleHash ? (byte)1 : (byte)0, (float)(-1.0f));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void CalcTextSize(Vector2* output, byte* text, string textEnd, float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			CalcTextSizeNative(output, text, pStr0, (byte)(0), wrapWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void CalcTextSize(Vector2* output, byte* text, ReadOnlySpan<byte> textEnd, bool hideTextAfterDoubleHash, float wrapWidth)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				CalcTextSizeNative(output, text, (byte*)ptextEnd, hideTextAfterDoubleHash ? (byte)1 : (byte)0, wrapWidth);
			}
		}

		public static void CalcTextSize(Vector2* output, byte* text, ReadOnlySpan<byte> textEnd, bool hideTextAfterDoubleHash)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				CalcTextSizeNative(output, text, (byte*)ptextEnd, hideTextAfterDoubleHash ? (byte)1 : (byte)0, (float)(-1.0f));
			}
		}

		public static void CalcTextSize(Vector2* output, byte* text, ReadOnlySpan<byte> textEnd, float wrapWidth)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				CalcTextSizeNative(output, text, (byte*)ptextEnd, (byte)(0), wrapWidth);
			}
		}

		public static void CalcTextSize(Vector2* output, ref byte text, ref byte textEnd, bool hideTextAfterDoubleHash, float wrapWidth)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					CalcTextSizeNative(output, (byte*)ptext, (byte*)ptextEnd, hideTextAfterDoubleHash ? (byte)1 : (byte)0, wrapWidth);
				}
			}
		}

		public static void CalcTextSize(Vector2* output, ref byte text, ref byte textEnd, bool hideTextAfterDoubleHash)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					CalcTextSizeNative(output, (byte*)ptext, (byte*)ptextEnd, hideTextAfterDoubleHash ? (byte)1 : (byte)0, (float)(-1.0f));
				}
			}
		}

		public static void CalcTextSize(Vector2* output, ref byte text, ref byte textEnd, float wrapWidth)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					CalcTextSizeNative(output, (byte*)ptext, (byte*)ptextEnd, (byte)(0), wrapWidth);
				}
			}
		}

		public static void CalcTextSize(Vector2* output, string text, string textEnd, bool hideTextAfterDoubleHash, float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			CalcTextSizeNative(output, pStr0, pStr1, hideTextAfterDoubleHash ? (byte)1 : (byte)0, wrapWidth);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void CalcTextSize(Vector2* output, string text, string textEnd, bool hideTextAfterDoubleHash)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			CalcTextSizeNative(output, pStr0, pStr1, hideTextAfterDoubleHash ? (byte)1 : (byte)0, (float)(-1.0f));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void CalcTextSize(Vector2* output, string text, string textEnd, float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			CalcTextSizeNative(output, pStr0, pStr1, (byte)(0), wrapWidth);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void CalcTextSize(Vector2* output, ReadOnlySpan<byte> text, ReadOnlySpan<byte> textEnd, bool hideTextAfterDoubleHash, float wrapWidth)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					CalcTextSizeNative(output, (byte*)ptext, (byte*)ptextEnd, hideTextAfterDoubleHash ? (byte)1 : (byte)0, wrapWidth);
				}
			}
		}

		public static void CalcTextSize(Vector2* output, ReadOnlySpan<byte> text, ReadOnlySpan<byte> textEnd, bool hideTextAfterDoubleHash)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					CalcTextSizeNative(output, (byte*)ptext, (byte*)ptextEnd, hideTextAfterDoubleHash ? (byte)1 : (byte)0, (float)(-1.0f));
				}
			}
		}

		public static void CalcTextSize(Vector2* output, ReadOnlySpan<byte> text, ReadOnlySpan<byte> textEnd, float wrapWidth)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					CalcTextSizeNative(output, (byte*)ptext, (byte*)ptextEnd, (byte)(0), wrapWidth);
				}
			}
		}

		internal static void ColorConvertU32ToFloat4Native(Vector4* output, uint input)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, uint, void>)vt[356])(output, input);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)vt[356])((nint)output, input);
			#endif
		}

		public static Vector4 ColorConvertU32ToFloat4(uint input)
		{
			Vector4 ret;
			ColorConvertU32ToFloat4Native(&ret, input);
			return ret;
		}

		public static void ColorConvertU32ToFloat4(Vector4* output, uint input)
		{
			ColorConvertU32ToFloat4Native(output, input);
		}

		public static void ColorConvertU32ToFloat4(ref Vector4 output, uint input)
		{
			fixed (Vector4* poutput = &output)
			{
				ColorConvertU32ToFloat4Native((Vector4*)poutput, input);
			}
		}

		internal static uint ColorConvertFloat4ToU32Native(Vector4 input)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4, uint>)vt[357])(input);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<Vector4, uint>)vt[357])(input);
			#endif
		}

		public static uint ColorConvertFloat4ToU32(Vector4 input)
		{
			uint ret = ColorConvertFloat4ToU32Native(input);
			return ret;
		}

		internal static void ColorConvertRGBtoHSVNative(float r, float g, float b, float* outH, float* outS, float* outV)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float*, float*, float*, void>)vt[358])(r, g, b, outH, outS, outV);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, nint, nint, nint, void>)vt[358])(r, g, b, (nint)outH, (nint)outS, (nint)outV);
			#endif
		}

		public static void ColorConvertRGBtoHSV(float r, float g, float b, float* outH, float* outS, float* outV)
		{
			ColorConvertRGBtoHSVNative(r, g, b, outH, outS, outV);
		}

		public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float outH, float* outS, float* outV)
		{
			fixed (float* poutH = &outH)
			{
				ColorConvertRGBtoHSVNative(r, g, b, (float*)poutH, outS, outV);
			}
		}

		public static void ColorConvertRGBtoHSV(float r, float g, float b, float* outH, ref float outS, float* outV)
		{
			fixed (float* poutS = &outS)
			{
				ColorConvertRGBtoHSVNative(r, g, b, outH, (float*)poutS, outV);
			}
		}

		public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float outH, ref float outS, float* outV)
		{
			fixed (float* poutH = &outH)
			{
				fixed (float* poutS = &outS)
				{
					ColorConvertRGBtoHSVNative(r, g, b, (float*)poutH, (float*)poutS, outV);
				}
			}
		}

		public static void ColorConvertRGBtoHSV(float r, float g, float b, float* outH, float* outS, ref float outV)
		{
			fixed (float* poutV = &outV)
			{
				ColorConvertRGBtoHSVNative(r, g, b, outH, outS, (float*)poutV);
			}
		}

		public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float outH, float* outS, ref float outV)
		{
			fixed (float* poutH = &outH)
			{
				fixed (float* poutV = &outV)
				{
					ColorConvertRGBtoHSVNative(r, g, b, (float*)poutH, outS, (float*)poutV);
				}
			}
		}

		public static void ColorConvertRGBtoHSV(float r, float g, float b, float* outH, ref float outS, ref float outV)
		{
			fixed (float* poutS = &outS)
			{
				fixed (float* poutV = &outV)
				{
					ColorConvertRGBtoHSVNative(r, g, b, outH, (float*)poutS, (float*)poutV);
				}
			}
		}

		public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float outH, ref float outS, ref float outV)
		{
			fixed (float* poutH = &outH)
			{
				fixed (float* poutS = &outS)
				{
					fixed (float* poutV = &outV)
					{
						ColorConvertRGBtoHSVNative(r, g, b, (float*)poutH, (float*)poutS, (float*)poutV);
					}
				}
			}
		}

		internal static void ColorConvertHSVtoRGBNative(float h, float s, float v, float* outR, float* outG, float* outB)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float*, float*, float*, void>)vt[359])(h, s, v, outR, outG, outB);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, nint, nint, nint, void>)vt[359])(h, s, v, (nint)outR, (nint)outG, (nint)outB);
			#endif
		}

		public static void ColorConvertHSVtoRGB(float h, float s, float v, float* outR, float* outG, float* outB)
		{
			ColorConvertHSVtoRGBNative(h, s, v, outR, outG, outB);
		}

		public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float outR, float* outG, float* outB)
		{
			fixed (float* poutR = &outR)
			{
				ColorConvertHSVtoRGBNative(h, s, v, (float*)poutR, outG, outB);
			}
		}

		public static void ColorConvertHSVtoRGB(float h, float s, float v, float* outR, ref float outG, float* outB)
		{
			fixed (float* poutG = &outG)
			{
				ColorConvertHSVtoRGBNative(h, s, v, outR, (float*)poutG, outB);
			}
		}

		public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float outR, ref float outG, float* outB)
		{
			fixed (float* poutR = &outR)
			{
				fixed (float* poutG = &outG)
				{
					ColorConvertHSVtoRGBNative(h, s, v, (float*)poutR, (float*)poutG, outB);
				}
			}
		}

		public static void ColorConvertHSVtoRGB(float h, float s, float v, float* outR, float* outG, ref float outB)
		{
			fixed (float* poutB = &outB)
			{
				ColorConvertHSVtoRGBNative(h, s, v, outR, outG, (float*)poutB);
			}
		}

		public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float outR, float* outG, ref float outB)
		{
			fixed (float* poutR = &outR)
			{
				fixed (float* poutB = &outB)
				{
					ColorConvertHSVtoRGBNative(h, s, v, (float*)poutR, outG, (float*)poutB);
				}
			}
		}

		public static void ColorConvertHSVtoRGB(float h, float s, float v, float* outR, ref float outG, ref float outB)
		{
			fixed (float* poutG = &outG)
			{
				fixed (float* poutB = &outB)
				{
					ColorConvertHSVtoRGBNative(h, s, v, outR, (float*)poutG, (float*)poutB);
				}
			}
		}

		public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float outR, ref float outG, ref float outB)
		{
			fixed (float* poutR = &outR)
			{
				fixed (float* poutG = &outG)
				{
					fixed (float* poutB = &outB)
					{
						ColorConvertHSVtoRGBNative(h, s, v, (float*)poutR, (float*)poutG, (float*)poutB);
					}
				}
			}
		}

		internal static byte IsKeyDownNative(ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[360])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[360])(key);
			#endif
		}

		public static bool IsKeyDown(ImGuiKey key)
		{
			byte ret = IsKeyDownNative(key);
			return ret != 0;
		}

		internal static byte IsKeyPressedNative(ImGuiKey key, byte repeat)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte, byte>)vt[361])(key, repeat);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte, byte>)vt[361])(key, repeat);
			#endif
		}

		public static bool IsKeyPressed(ImGuiKey key, bool repeat)
		{
			byte ret = IsKeyPressedNative(key, repeat ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool IsKeyPressed(ImGuiKey key)
		{
			byte ret = IsKeyPressedNative(key, (byte)(1));
			return ret != 0;
		}

		internal static byte IsKeyReleasedNative(ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[362])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[362])(key);
			#endif
		}

		public static bool IsKeyReleased(ImGuiKey key)
		{
			byte ret = IsKeyReleasedNative(key);
			return ret != 0;
		}

		internal static byte IsKeyChordPressedNative(int keyChord)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[363])(keyChord);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[363])(keyChord);
			#endif
		}

		public static bool IsKeyChordPressed(int keyChord)
		{
			byte ret = IsKeyChordPressedNative(keyChord);
			return ret != 0;
		}

		internal static int GetKeyPressedAmountNative(ImGuiKey key, float repeatDelay, float rate)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, float, float, int>)vt[364])(key, repeatDelay, rate);
			#else
			return (int)((delegate* unmanaged[Cdecl]<ImGuiKey, float, float, int>)vt[364])(key, repeatDelay, rate);
			#endif
		}

		public static int GetKeyPressedAmount(ImGuiKey key, float repeatDelay, float rate)
		{
			int ret = GetKeyPressedAmountNative(key, repeatDelay, rate);
			return ret;
		}

		internal static byte* GetKeyNameNative(ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte*>)vt[365])(key);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<ImGuiKey, nint>)vt[365])(key);
			#endif
		}

		public static byte* GetKeyName(ImGuiKey key)
		{
			byte* ret = GetKeyNameNative(key);
			return ret;
		}

		public static string GetKeyNameS(ImGuiKey key)
		{
			string ret = Utils.DecodeStringUTF8(GetKeyNameNative(key));
			return ret;
		}

		internal static void SetNextFrameWantCaptureKeyboardNative(byte wantCaptureKeyboard)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)vt[366])(wantCaptureKeyboard);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)vt[366])(wantCaptureKeyboard);
			#endif
		}

		public static void SetNextFrameWantCaptureKeyboard(bool wantCaptureKeyboard)
		{
			SetNextFrameWantCaptureKeyboardNative(wantCaptureKeyboard ? (byte)1 : (byte)0);
		}

		internal static byte ShortcutNative(int keyChord, ImGuiInputFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, byte>)vt[367])(keyChord, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, byte>)vt[367])(keyChord, flags);
			#endif
		}

		public static bool Shortcut(int keyChord, ImGuiInputFlags flags)
		{
			byte ret = ShortcutNative(keyChord, flags);
			return ret != 0;
		}

		public static bool Shortcut(int keyChord)
		{
			byte ret = ShortcutNative(keyChord, (ImGuiInputFlags)(0));
			return ret != 0;
		}

		internal static void SetNextItemShortcutNative(int keyChord, ImGuiInputFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, void>)vt[368])(keyChord, flags);
			#else
			((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, void>)vt[368])(keyChord, flags);
			#endif
		}

		public static void SetNextItemShortcut(int keyChord, ImGuiInputFlags flags)
		{
			SetNextItemShortcutNative(keyChord, flags);
		}

		public static void SetNextItemShortcut(int keyChord)
		{
			SetNextItemShortcutNative(keyChord, (ImGuiInputFlags)(0));
		}

		internal static void SetItemKeyOwnerNative(ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiKey, void>)vt[369])(key);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiKey, void>)vt[369])(key);
			#endif
		}

		public static void SetItemKeyOwner(ImGuiKey key)
		{
			SetItemKeyOwnerNative(key);
		}

		internal static byte IsMouseDownNative(ImGuiMouseButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, byte>)vt[370])(button);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, byte>)vt[370])(button);
			#endif
		}

		public static bool IsMouseDown(ImGuiMouseButton button)
		{
			byte ret = IsMouseDownNative(button);
			return ret != 0;
		}

		internal static byte IsMouseClickedNative(ImGuiMouseButton button, byte repeat)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, byte, byte>)vt[371])(button, repeat);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, byte, byte>)vt[371])(button, repeat);
			#endif
		}

		public static bool IsMouseClicked(ImGuiMouseButton button, bool repeat)
		{
			byte ret = IsMouseClickedNative(button, repeat ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool IsMouseClicked(ImGuiMouseButton button)
		{
			byte ret = IsMouseClickedNative(button, (byte)(0));
			return ret != 0;
		}

		internal static byte IsMouseReleasedNative(ImGuiMouseButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, byte>)vt[372])(button);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, byte>)vt[372])(button);
			#endif
		}

		public static bool IsMouseReleased(ImGuiMouseButton button)
		{
			byte ret = IsMouseReleasedNative(button);
			return ret != 0;
		}

		internal static byte IsMouseDoubleClickedNative(ImGuiMouseButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, byte>)vt[373])(button);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, byte>)vt[373])(button);
			#endif
		}

		public static bool IsMouseDoubleClicked(ImGuiMouseButton button)
		{
			byte ret = IsMouseDoubleClickedNative(button);
			return ret != 0;
		}

		internal static int GetMouseClickedCountNative(ImGuiMouseButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, int>)vt[374])(button);
			#else
			return (int)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, int>)vt[374])(button);
			#endif
		}

		public static int GetMouseClickedCount(ImGuiMouseButton button)
		{
			int ret = GetMouseClickedCountNative(button);
			return ret;
		}

		internal static byte IsMouseHoveringRectNative(Vector2 rMin, Vector2 rMax, byte clip)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, byte, byte>)vt[375])(rMin, rMax, clip);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Vector2, Vector2, byte, byte>)vt[375])(rMin, rMax, clip);
			#endif
		}

		public static bool IsMouseHoveringRect(Vector2 rMin, Vector2 rMax, bool clip)
		{
			byte ret = IsMouseHoveringRectNative(rMin, rMax, clip ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool IsMouseHoveringRect(Vector2 rMin, Vector2 rMax)
		{
			byte ret = IsMouseHoveringRectNative(rMin, rMax, (byte)(1));
			return ret != 0;
		}

		internal static byte IsMousePosValidNative(Vector2* mousePos)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2*, byte>)vt[376])(mousePos);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[376])((nint)mousePos);
			#endif
		}

		public static bool IsMousePosValid(Vector2* mousePos)
		{
			byte ret = IsMousePosValidNative(mousePos);
			return ret != 0;
		}

		public static bool IsMousePosValid()
		{
			byte ret = IsMousePosValidNative((Vector2*)(default));
			return ret != 0;
		}

		public static bool IsMousePosValid(ref Vector2 mousePos)
		{
			fixed (Vector2* pmousePos = &mousePos)
			{
				byte ret = IsMousePosValidNative((Vector2*)pmousePos);
				return ret != 0;
			}
		}

		internal static byte IsAnyMouseDownNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[377])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[377])();
			#endif
		}

		public static bool IsAnyMouseDown()
		{
			byte ret = IsAnyMouseDownNative();
			return ret != 0;
		}

		internal static void GetMousePosNative(Vector2* output)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[378])(output);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[378])((nint)output);
			#endif
		}

		public static Vector2 GetMousePos()
		{
			Vector2 ret;
			GetMousePosNative(&ret);
			return ret;
		}

		public static void GetMousePos(Vector2* output)
		{
			GetMousePosNative(output);
		}

		public static void GetMousePos(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetMousePosNative((Vector2*)poutput);
			}
		}

		internal static void GetMousePosOnOpeningCurrentPopupNative(Vector2* output)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[379])(output);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[379])((nint)output);
			#endif
		}

		public static Vector2 GetMousePosOnOpeningCurrentPopup()
		{
			Vector2 ret;
			GetMousePosOnOpeningCurrentPopupNative(&ret);
			return ret;
		}

		public static void GetMousePosOnOpeningCurrentPopup(Vector2* output)
		{
			GetMousePosOnOpeningCurrentPopupNative(output);
		}

		public static void GetMousePosOnOpeningCurrentPopup(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetMousePosOnOpeningCurrentPopupNative((Vector2*)poutput);
			}
		}

		internal static byte IsMouseDraggingNative(ImGuiMouseButton button, float lockThreshold)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, float, byte>)vt[380])(button, lockThreshold);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, float, byte>)vt[380])(button, lockThreshold);
			#endif
		}

		public static bool IsMouseDragging(ImGuiMouseButton button, float lockThreshold)
		{
			byte ret = IsMouseDraggingNative(button, lockThreshold);
			return ret != 0;
		}

		public static bool IsMouseDragging(ImGuiMouseButton button)
		{
			byte ret = IsMouseDraggingNative(button, (float)(-1.0f));
			return ret != 0;
		}

		internal static void GetMouseDragDeltaNative(Vector2* output, ImGuiMouseButton button, float lockThreshold)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiMouseButton, float, void>)vt[381])(output, button, lockThreshold);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiMouseButton, float, void>)vt[381])((nint)output, button, lockThreshold);
			#endif
		}

		public static Vector2 GetMouseDragDelta()
		{
			Vector2 ret;
			GetMouseDragDeltaNative(&ret, (ImGuiMouseButton)(0), (float)(-1.0f));
			return ret;
		}

		public static Vector2 GetMouseDragDelta(ImGuiMouseButton button)
		{
			Vector2 ret;
			GetMouseDragDeltaNative(&ret, button, (float)(-1.0f));
			return ret;
		}

		public static void GetMouseDragDelta(Vector2* output)
		{
			GetMouseDragDeltaNative(output, (ImGuiMouseButton)(0), (float)(-1.0f));
		}

		public static Vector2 GetMouseDragDelta(float lockThreshold)
		{
			Vector2 ret;
			GetMouseDragDeltaNative(&ret, (ImGuiMouseButton)(0), lockThreshold);
			return ret;
		}

		public static Vector2 GetMouseDragDelta(ImGuiMouseButton button, float lockThreshold)
		{
			Vector2 ret;
			GetMouseDragDeltaNative(&ret, button, lockThreshold);
			return ret;
		}

		public static void GetMouseDragDelta(Vector2* output, ImGuiMouseButton button, float lockThreshold)
		{
			GetMouseDragDeltaNative(output, button, lockThreshold);
		}

		public static void GetMouseDragDelta(Vector2* output, ImGuiMouseButton button)
		{
			GetMouseDragDeltaNative(output, button, (float)(-1.0f));
		}

		public static void GetMouseDragDelta(Vector2* output, float lockThreshold)
		{
			GetMouseDragDeltaNative(output, (ImGuiMouseButton)(0), lockThreshold);
		}

		public static void GetMouseDragDelta(ref Vector2 output, ImGuiMouseButton button, float lockThreshold)
		{
			fixed (Vector2* poutput = &output)
			{
				GetMouseDragDeltaNative((Vector2*)poutput, button, lockThreshold);
			}
		}

		public static void GetMouseDragDelta(ref Vector2 output, ImGuiMouseButton button)
		{
			fixed (Vector2* poutput = &output)
			{
				GetMouseDragDeltaNative((Vector2*)poutput, button, (float)(-1.0f));
			}
		}

		public static void GetMouseDragDelta(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetMouseDragDeltaNative((Vector2*)poutput, (ImGuiMouseButton)(0), (float)(-1.0f));
			}
		}

		public static void GetMouseDragDelta(ref Vector2 output, float lockThreshold)
		{
			fixed (Vector2* poutput = &output)
			{
				GetMouseDragDeltaNative((Vector2*)poutput, (ImGuiMouseButton)(0), lockThreshold);
			}
		}

		internal static void ResetMouseDragDeltaNative(ImGuiMouseButton button)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMouseButton, void>)vt[382])(button);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiMouseButton, void>)vt[382])(button);
			#endif
		}

		public static void ResetMouseDragDelta(ImGuiMouseButton button)
		{
			ResetMouseDragDeltaNative(button);
		}

		public static void ResetMouseDragDelta()
		{
			ResetMouseDragDeltaNative((ImGuiMouseButton)(0));
		}

		internal static ImGuiMouseCursor GetMouseCursorNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseCursor>)vt[383])();
			#else
			return (ImGuiMouseCursor)((delegate* unmanaged[Cdecl]<ImGuiMouseCursor>)vt[383])();
			#endif
		}

		public static ImGuiMouseCursor GetMouseCursor()
		{
			ImGuiMouseCursor ret = GetMouseCursorNative();
			return ret;
		}

		internal static void SetMouseCursorNative(ImGuiMouseCursor cursorType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMouseCursor, void>)vt[384])(cursorType);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiMouseCursor, void>)vt[384])(cursorType);
			#endif
		}

		public static void SetMouseCursor(ImGuiMouseCursor cursorType)
		{
			SetMouseCursorNative(cursorType);
		}

		internal static void SetNextFrameWantCaptureMouseNative(byte wantCaptureMouse)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)vt[385])(wantCaptureMouse);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)vt[385])(wantCaptureMouse);
			#endif
		}

		public static void SetNextFrameWantCaptureMouse(bool wantCaptureMouse)
		{
			SetNextFrameWantCaptureMouseNative(wantCaptureMouse ? (byte)1 : (byte)0);
		}

		internal static byte* GetClipboardTextNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*>)vt[386])();
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint>)vt[386])();
			#endif
		}

		public static byte* GetClipboardText()
		{
			byte* ret = GetClipboardTextNative();
			return ret;
		}

		public static string GetClipboardTextS()
		{
			string ret = Utils.DecodeStringUTF8(GetClipboardTextNative());
			return ret;
		}

		internal static void SetClipboardTextNative(byte* text)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[387])(text);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[387])((nint)text);
			#endif
		}

		public static void SetClipboardText(byte* text)
		{
			SetClipboardTextNative(text);
		}

		public static void SetClipboardText(ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				SetClipboardTextNative((byte*)ptext);
			}
		}

		public static void SetClipboardText(string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetClipboardTextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void SetClipboardText(ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				SetClipboardTextNative((byte*)ptext);
			}
		}

		internal static void LoadIniSettingsFromDiskNative(byte* iniFilename)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[388])(iniFilename);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[388])((nint)iniFilename);
			#endif
		}

		public static void LoadIniSettingsFromDisk(byte* iniFilename)
		{
			LoadIniSettingsFromDiskNative(iniFilename);
		}

		public static void LoadIniSettingsFromDisk(ref byte iniFilename)
		{
			fixed (byte* piniFilename = &iniFilename)
			{
				LoadIniSettingsFromDiskNative((byte*)piniFilename);
			}
		}

		public static void LoadIniSettingsFromDisk(string iniFilename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (iniFilename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(iniFilename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(iniFilename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadIniSettingsFromDiskNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LoadIniSettingsFromDisk(ReadOnlySpan<byte> iniFilename)
		{
			fixed (byte* piniFilename = iniFilename)
			{
				LoadIniSettingsFromDiskNative((byte*)piniFilename);
			}
		}

		internal static void LoadIniSettingsFromMemoryNative(byte* iniData, nuint iniSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, nuint, void>)vt[389])(iniData, iniSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, nuint, void>)vt[389])((nint)iniData, iniSize);
			#endif
		}

		public static void LoadIniSettingsFromMemory(byte* iniData, nuint iniSize)
		{
			LoadIniSettingsFromMemoryNative(iniData, iniSize);
		}

		public static void LoadIniSettingsFromMemory(byte* iniData)
		{
			LoadIniSettingsFromMemoryNative(iniData, (nuint)(0));
		}

		public static void LoadIniSettingsFromMemory(ref byte iniData, nuint iniSize)
		{
			fixed (byte* piniData = &iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, iniSize);
			}
		}

		public static void LoadIniSettingsFromMemory(ref byte iniData)
		{
			fixed (byte* piniData = &iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, (nuint)(0));
			}
		}

		public static void LoadIniSettingsFromMemory(string iniData, nuint iniSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (iniData != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(iniData);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(iniData, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadIniSettingsFromMemoryNative(pStr0, iniSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LoadIniSettingsFromMemory(string iniData)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (iniData != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(iniData);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(iniData, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadIniSettingsFromMemoryNative(pStr0, (nuint)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LoadIniSettingsFromMemory(ReadOnlySpan<byte> iniData, nuint iniSize)
		{
			fixed (byte* piniData = iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, iniSize);
			}
		}

		public static void LoadIniSettingsFromMemory(ReadOnlySpan<byte> iniData)
		{
			fixed (byte* piniData = iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, (nuint)(0));
			}
		}

		internal static void SaveIniSettingsToDiskNative(byte* iniFilename)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[390])(iniFilename);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[390])((nint)iniFilename);
			#endif
		}

		public static void SaveIniSettingsToDisk(byte* iniFilename)
		{
			SaveIniSettingsToDiskNative(iniFilename);
		}

		public static void SaveIniSettingsToDisk(ref byte iniFilename)
		{
			fixed (byte* piniFilename = &iniFilename)
			{
				SaveIniSettingsToDiskNative((byte*)piniFilename);
			}
		}

		public static void SaveIniSettingsToDisk(string iniFilename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (iniFilename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(iniFilename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(iniFilename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SaveIniSettingsToDiskNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void SaveIniSettingsToDisk(ReadOnlySpan<byte> iniFilename)
		{
			fixed (byte* piniFilename = iniFilename)
			{
				SaveIniSettingsToDiskNative((byte*)piniFilename);
			}
		}

		internal static byte* SaveIniSettingsToMemoryNative(nuint* outIniSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint*, byte*>)vt[391])(outIniSize);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[391])((nint)outIniSize);
			#endif
		}

		public static byte* SaveIniSettingsToMemory(nuint* outIniSize)
		{
			byte* ret = SaveIniSettingsToMemoryNative(outIniSize);
			return ret;
		}

		public static byte* SaveIniSettingsToMemory()
		{
			byte* ret = SaveIniSettingsToMemoryNative((nuint*)(default));
			return ret;
		}

		public static string SaveIniSettingsToMemoryS()
		{
			string ret = Utils.DecodeStringUTF8(SaveIniSettingsToMemoryNative((nuint*)(default)));
			return ret;
		}

		public static string SaveIniSettingsToMemoryS(nuint* outIniSize)
		{
			string ret = Utils.DecodeStringUTF8(SaveIniSettingsToMemoryNative(outIniSize));
			return ret;
		}

		public static byte* SaveIniSettingsToMemory(ref nuint outIniSize)
		{
			fixed (nuint* poutIniSize = &outIniSize)
			{
				byte* ret = SaveIniSettingsToMemoryNative((nuint*)poutIniSize);
				return ret;
			}
		}

		public static string SaveIniSettingsToMemoryS(ref nuint outIniSize)
		{
			fixed (nuint* poutIniSize = &outIniSize)
			{
				string ret = Utils.DecodeStringUTF8(SaveIniSettingsToMemoryNative((nuint*)poutIniSize));
				return ret;
			}
		}

		internal static void DebugTextEncodingNative(byte* text)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[392])(text);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[392])((nint)text);
			#endif
		}

		public static void DebugTextEncoding(byte* text)
		{
			DebugTextEncodingNative(text);
		}

		public static void DebugTextEncoding(ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				DebugTextEncodingNative((byte*)ptext);
			}
		}

		public static void DebugTextEncoding(string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugTextEncodingNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void DebugTextEncoding(ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				DebugTextEncodingNative((byte*)ptext);
			}
		}

		internal static void DebugFlashStyleColorNative(ImGuiCol idx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiCol, void>)vt[393])(idx);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiCol, void>)vt[393])(idx);
			#endif
		}

		public static void DebugFlashStyleColor(ImGuiCol idx)
		{
			DebugFlashStyleColorNative(idx);
		}

		internal static void DebugStartItemPickerNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[394])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[394])();
			#endif
		}

		public static void DebugStartItemPicker()
		{
			DebugStartItemPickerNative();
		}

		internal static byte DebugCheckVersionAndDataLayoutNative(byte* versionStr, nuint szIo, nuint szStyle, nuint szVec2, nuint szVec4, nuint szDrawvert, nuint szDrawidx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, nuint, nuint, nuint, nuint, nuint, nuint, byte>)vt[395])(versionStr, szIo, szStyle, szVec2, szVec4, szDrawvert, szDrawidx);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nuint, nuint, nuint, nuint, nuint, nuint, byte>)vt[395])((nint)versionStr, szIo, szStyle, szVec2, szVec4, szDrawvert, szDrawidx);
			#endif
		}

		public static bool DebugCheckVersionAndDataLayout(byte* versionStr, nuint szIo, nuint szStyle, nuint szVec2, nuint szVec4, nuint szDrawvert, nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szVec2, szVec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		public static bool DebugCheckVersionAndDataLayout(ref byte versionStr, nuint szIo, nuint szStyle, nuint szVec2, nuint szVec4, nuint szDrawvert, nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szVec2, szVec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		public static bool DebugCheckVersionAndDataLayout(string versionStr, nuint szIo, nuint szStyle, nuint szVec2, nuint szVec4, nuint szDrawvert, nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szVec2, szVec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool DebugCheckVersionAndDataLayout(ReadOnlySpan<byte> versionStr, nuint szIo, nuint szStyle, nuint szVec2, nuint szVec4, nuint szDrawvert, nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szVec2, szVec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		internal static void DebugLogNative(byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[396])(fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[396])((nint)fmt);
			#endif
		}

		public static void DebugLog(byte* fmt)
		{
			DebugLogNative(fmt);
		}

		public static void DebugLog(ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				DebugLogNative((byte*)pfmt);
			}
		}

		public static void DebugLog(string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugLogNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void DebugLog(ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				DebugLogNative((byte*)pfmt);
			}
		}

		internal static void DebugLogVNative(byte* fmt, nuint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, nuint, void>)vt[397])(fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nuint, void>)vt[397])((nint)fmt, args);
			#endif
		}

		public static void DebugLogV(byte* fmt, nuint args)
		{
			DebugLogVNative(fmt, args);
		}

		public static void DebugLogV(ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				DebugLogVNative((byte*)pfmt, args);
			}
		}

		public static void DebugLogV(string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugLogVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void DebugLogV(ReadOnlySpan<byte> fmt, nuint args)
		{
			fixed (byte* pfmt = fmt)
			{
				DebugLogVNative((byte*)pfmt, args);
			}
		}

		internal static void SetAllocatorFunctionsNative(ImGuiMemAllocFunc allocFunc, ImGuiMemFreeFunc freeFunc, void* userData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<nuint, void*, void*>, delegate*<void*, void*, void>, void*, void>)vt[398])((delegate*<nuint, void*, void*>)Utils.GetFunctionPointerForDelegate(allocFunc), (delegate*<void*, void*, void>)Utils.GetFunctionPointerForDelegate(freeFunc), userData);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[398])((nint)Utils.GetFunctionPointerForDelegate(allocFunc), (nint)Utils.GetFunctionPointerForDelegate(freeFunc), (nint)userData);
			#endif
		}

		public static void SetAllocatorFunctions(ImGuiMemAllocFunc allocFunc, ImGuiMemFreeFunc freeFunc, void* userData)
		{
			SetAllocatorFunctionsNative(allocFunc, freeFunc, userData);
		}

		public static void SetAllocatorFunctions(ImGuiMemAllocFunc allocFunc, ImGuiMemFreeFunc freeFunc)
		{
			SetAllocatorFunctionsNative(allocFunc, freeFunc, (void*)(default));
		}

		internal static void GetAllocatorFunctionsNative(ImGuiMemAllocFunc pAllocFunc, ImGuiMemFreeFunc pFreeFunc, void** pUserData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<nuint, void*, void*>*, delegate*<void*, void*, void>*, void**, void>)vt[399])((delegate*<nuint, void*, void*>*)Utils.GetFunctionPointerForDelegate(pAllocFunc), (delegate*<void*, void*, void>*)Utils.GetFunctionPointerForDelegate(pFreeFunc), pUserData);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[399])((nint)Utils.GetFunctionPointerForDelegate(pAllocFunc), (nint)Utils.GetFunctionPointerForDelegate(pFreeFunc), (nint)pUserData);
			#endif
		}

		public static void GetAllocatorFunctions(ImGuiMemAllocFunc pAllocFunc, ImGuiMemFreeFunc pFreeFunc, void** pUserData)
		{
			GetAllocatorFunctionsNative(pAllocFunc, pFreeFunc, pUserData);
		}

		internal static void* MemAllocNative(nuint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, void*>)vt[400])(size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nuint, nint>)vt[400])(size);
			#endif
		}

		public static void* MemAlloc(nuint size)
		{
			void* ret = MemAllocNative(size);
			return ret;
		}

		internal static void MemFreeNative(void* ptr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)vt[401])(ptr);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[401])((nint)ptr);
			#endif
		}

		public static void MemFree(void* ptr)
		{
			MemFreeNative(ptr);
		}

		internal static ImGuiPlatformIO* GetPlatformIONative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPlatformIO*>)vt[402])();
			#else
			return (ImGuiPlatformIO*)((delegate* unmanaged[Cdecl]<nint>)vt[402])();
			#endif
		}

		public static ImGuiPlatformIOPtr GetPlatformIO()
		{
			ImGuiPlatformIOPtr ret = GetPlatformIONative();
			return ret;
		}

		internal static void UpdatePlatformWindowsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[403])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[403])();
			#endif
		}

		public static void UpdatePlatformWindows()
		{
			UpdatePlatformWindowsNative();
		}

		internal static void RenderPlatformWindowsDefaultNative(void* platformRenderArg, void* rendererRenderArg)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void*, void>)vt[404])(platformRenderArg, rendererRenderArg);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[404])((nint)platformRenderArg, (nint)rendererRenderArg);
			#endif
		}

		public static void RenderPlatformWindowsDefault(void* platformRenderArg, void* rendererRenderArg)
		{
			RenderPlatformWindowsDefaultNative(platformRenderArg, rendererRenderArg);
		}

		public static void RenderPlatformWindowsDefault(void* platformRenderArg)
		{
			RenderPlatformWindowsDefaultNative(platformRenderArg, (void*)(default));
		}

		public static void RenderPlatformWindowsDefault()
		{
			RenderPlatformWindowsDefaultNative((void*)(default), (void*)(default));
		}

		internal static void DestroyPlatformWindowsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[405])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[405])();
			#endif
		}

		public static void DestroyPlatformWindows()
		{
			DestroyPlatformWindowsNative();
		}

		internal static ImGuiViewport* FindViewportByIDNative(int id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiViewport*>)vt[406])(id);
			#else
			return (ImGuiViewport*)((delegate* unmanaged[Cdecl]<int, nint>)vt[406])(id);
			#endif
		}

		public static ImGuiViewportPtr FindViewportByID(int id)
		{
			ImGuiViewportPtr ret = FindViewportByIDNative(id);
			return ret;
		}

		internal static ImGuiViewport* FindViewportByPlatformHandleNative(void* platformHandle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ImGuiViewport*>)vt[407])(platformHandle);
			#else
			return (ImGuiViewport*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[407])((nint)platformHandle);
			#endif
		}

		public static ImGuiViewportPtr FindViewportByPlatformHandle(void* platformHandle)
		{
			ImGuiViewportPtr ret = FindViewportByPlatformHandleNative(platformHandle);
			return ret;
		}

		internal static ImGuiTableSortSpecs* ImGuiTableSortSpecsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableSortSpecs*>)vt[408])();
			#else
			return (ImGuiTableSortSpecs*)((delegate* unmanaged[Cdecl]<nint>)vt[408])();
			#endif
		}

		public static ImGuiTableSortSpecsPtr ImGuiTableSortSpecs()
		{
			ImGuiTableSortSpecsPtr ret = ImGuiTableSortSpecsNative();
			return ret;
		}

		internal static void DestroyNative(ImGuiTableSortSpecs* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableSortSpecs*, void>)vt[409])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[409])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiTableSortSpecsPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiTableSortSpecs self)
		{
			fixed (ImGuiTableSortSpecs* pself = &self)
			{
				DestroyNative((ImGuiTableSortSpecs*)pself);
			}
		}

		internal static ImGuiTableColumnSortSpecs* ImGuiTableColumnSortSpecsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableColumnSortSpecs*>)vt[410])();
			#else
			return (ImGuiTableColumnSortSpecs*)((delegate* unmanaged[Cdecl]<nint>)vt[410])();
			#endif
		}

		public static ImGuiTableColumnSortSpecsPtr ImGuiTableColumnSortSpecs()
		{
			ImGuiTableColumnSortSpecsPtr ret = ImGuiTableColumnSortSpecsNative();
			return ret;
		}

		internal static void DestroyNative(ImGuiTableColumnSortSpecs* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableColumnSortSpecs*, void>)vt[411])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[411])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiTableColumnSortSpecsPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiTableColumnSortSpecs self)
		{
			fixed (ImGuiTableColumnSortSpecs* pself = &self)
			{
				DestroyNative((ImGuiTableColumnSortSpecs*)pself);
			}
		}

		internal static ImGuiStyle* ImGuiStyleNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyle*>)vt[412])();
			#else
			return (ImGuiStyle*)((delegate* unmanaged[Cdecl]<nint>)vt[412])();
			#endif
		}

		public static ImGuiStylePtr ImGuiStyle()
		{
			ImGuiStylePtr ret = ImGuiStyleNative();
			return ret;
		}

		internal static void DestroyNative(ImGuiStyle* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStyle*, void>)vt[413])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[413])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiStylePtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiStyle self)
		{
			fixed (ImGuiStyle* pself = &self)
			{
				DestroyNative((ImGuiStyle*)pself);
			}
		}

		internal static void ScaleAllSizesNative(ImGuiStyle* self, float scaleFactor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStyle*, float, void>)vt[414])(self, scaleFactor);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[414])((nint)self, scaleFactor);
			#endif
		}

		public static void ScaleAllSizes(ImGuiStylePtr self, float scaleFactor)
		{
			ScaleAllSizesNative(self, scaleFactor);
		}

		public static void ScaleAllSizes(ref ImGuiStyle self, float scaleFactor)
		{
			fixed (ImGuiStyle* pself = &self)
			{
				ScaleAllSizesNative((ImGuiStyle*)pself, scaleFactor);
			}
		}

		internal static void AddKeyEventNative(ImGuiIO* self, ImGuiKey key, byte down)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, ImGuiKey, byte, void>)vt[415])(self, key, down);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiKey, byte, void>)vt[415])((nint)self, key, down);
			#endif
		}

		public static void AddKeyEvent(ImGuiIOPtr self, ImGuiKey key, bool down)
		{
			AddKeyEventNative(self, key, down ? (byte)1 : (byte)0);
		}

		public static void AddKeyEvent(ref ImGuiIO self, ImGuiKey key, bool down)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddKeyEventNative((ImGuiIO*)pself, key, down ? (byte)1 : (byte)0);
			}
		}

		internal static void AddKeyAnalogEventNative(ImGuiIO* self, ImGuiKey key, byte down, float v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, ImGuiKey, byte, float, void>)vt[416])(self, key, down, v);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiKey, byte, float, void>)vt[416])((nint)self, key, down, v);
			#endif
		}

		public static void AddKeyAnalogEvent(ImGuiIOPtr self, ImGuiKey key, bool down, float v)
		{
			AddKeyAnalogEventNative(self, key, down ? (byte)1 : (byte)0, v);
		}

		public static void AddKeyAnalogEvent(ref ImGuiIO self, ImGuiKey key, bool down, float v)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddKeyAnalogEventNative((ImGuiIO*)pself, key, down ? (byte)1 : (byte)0, v);
			}
		}

		internal static void AddMousePosEventNative(ImGuiIO* self, float x, float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, float, float, void>)vt[417])(self, x, y);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)vt[417])((nint)self, x, y);
			#endif
		}

		public static void AddMousePosEvent(ImGuiIOPtr self, float x, float y)
		{
			AddMousePosEventNative(self, x, y);
		}

		public static void AddMousePosEvent(ref ImGuiIO self, float x, float y)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMousePosEventNative((ImGuiIO*)pself, x, y);
			}
		}

		internal static void AddMouseButtonEventNative(ImGuiIO* self, int button, byte down)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, int, byte, void>)vt[418])(self, button, down);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, byte, void>)vt[418])((nint)self, button, down);
			#endif
		}

		public static void AddMouseButtonEvent(ImGuiIOPtr self, int button, bool down)
		{
			AddMouseButtonEventNative(self, button, down ? (byte)1 : (byte)0);
		}

		public static void AddMouseButtonEvent(ref ImGuiIO self, int button, bool down)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMouseButtonEventNative((ImGuiIO*)pself, button, down ? (byte)1 : (byte)0);
			}
		}

		internal static void AddMouseWheelEventNative(ImGuiIO* self, float wheelX, float wheelY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, float, float, void>)vt[419])(self, wheelX, wheelY);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)vt[419])((nint)self, wheelX, wheelY);
			#endif
		}

		public static void AddMouseWheelEvent(ImGuiIOPtr self, float wheelX, float wheelY)
		{
			AddMouseWheelEventNative(self, wheelX, wheelY);
		}

		public static void AddMouseWheelEvent(ref ImGuiIO self, float wheelX, float wheelY)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMouseWheelEventNative((ImGuiIO*)pself, wheelX, wheelY);
			}
		}

		internal static void AddMouseSourceEventNative(ImGuiIO* self, ImGuiMouseSource source)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, ImGuiMouseSource, void>)vt[420])(self, source);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiMouseSource, void>)vt[420])((nint)self, source);
			#endif
		}

		public static void AddMouseSourceEvent(ImGuiIOPtr self, ImGuiMouseSource source)
		{
			AddMouseSourceEventNative(self, source);
		}

		public static void AddMouseSourceEvent(ref ImGuiIO self, ImGuiMouseSource source)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMouseSourceEventNative((ImGuiIO*)pself, source);
			}
		}

		internal static void AddMouseViewportEventNative(ImGuiIO* self, int id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, int, void>)vt[421])(self, id);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[421])((nint)self, id);
			#endif
		}

		public static void AddMouseViewportEvent(ImGuiIOPtr self, int id)
		{
			AddMouseViewportEventNative(self, id);
		}

		public static void AddMouseViewportEvent(ref ImGuiIO self, int id)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMouseViewportEventNative((ImGuiIO*)pself, id);
			}
		}

		internal static void AddFocusEventNative(ImGuiIO* self, byte focused)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, byte, void>)vt[422])(self, focused);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[422])((nint)self, focused);
			#endif
		}

		public static void AddFocusEvent(ImGuiIOPtr self, bool focused)
		{
			AddFocusEventNative(self, focused ? (byte)1 : (byte)0);
		}

		public static void AddFocusEvent(ref ImGuiIO self, bool focused)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddFocusEventNative((ImGuiIO*)pself, focused ? (byte)1 : (byte)0);
			}
		}

		internal static void AddInputCharacterNative(ImGuiIO* self, uint c)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, uint, void>)vt[423])(self, c);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)vt[423])((nint)self, c);
			#endif
		}

		public static void AddInputCharacter(ImGuiIOPtr self, uint c)
		{
			AddInputCharacterNative(self, c);
		}

		public static void AddInputCharacter(ref ImGuiIO self, uint c)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddInputCharacterNative((ImGuiIO*)pself, c);
			}
		}

		internal static void AddInputCharacterUTF16Native(ImGuiIO* self, char c)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, char, void>)vt[424])(self, c);
			#else
			((delegate* unmanaged[Cdecl]<nint, char, void>)vt[424])((nint)self, c);
			#endif
		}

		public static void AddInputCharacterUTF16(ImGuiIOPtr self, char c)
		{
			AddInputCharacterUTF16Native(self, c);
		}

		public static void AddInputCharacterUTF16(ref ImGuiIO self, char c)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddInputCharacterUTF16Native((ImGuiIO*)pself, c);
			}
		}

		internal static void AddInputCharactersUTF8Native(ImGuiIO* self, byte* str)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, byte*, void>)vt[425])(self, str);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[425])((nint)self, (nint)str);
			#endif
		}

		public static void AddInputCharactersUTF8(ImGuiIOPtr self, byte* str)
		{
			AddInputCharactersUTF8Native(self, str);
		}

		public static void AddInputCharactersUTF8(ref ImGuiIO self, byte* str)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddInputCharactersUTF8Native((ImGuiIO*)pself, str);
			}
		}

		public static void AddInputCharactersUTF8(ImGuiIOPtr self, ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				AddInputCharactersUTF8Native(self, (byte*)pstr);
			}
		}

		public static void AddInputCharactersUTF8(ImGuiIOPtr self, string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddInputCharactersUTF8Native(self, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void AddInputCharactersUTF8(ImGuiIOPtr self, ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				AddInputCharactersUTF8Native(self, (byte*)pstr);
			}
		}

		public static void AddInputCharactersUTF8(ref ImGuiIO self, ref byte str)
		{
			fixed (ImGuiIO* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					AddInputCharactersUTF8Native((ImGuiIO*)pself, (byte*)pstr);
				}
			}
		}

		public static void AddInputCharactersUTF8(ref ImGuiIO self, string str)
		{
			fixed (ImGuiIO* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddInputCharactersUTF8Native((ImGuiIO*)pself, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void AddInputCharactersUTF8(ref ImGuiIO self, ReadOnlySpan<byte> str)
		{
			fixed (ImGuiIO* pself = &self)
			{
				fixed (byte* pstr = str)
				{
					AddInputCharactersUTF8Native((ImGuiIO*)pself, (byte*)pstr);
				}
			}
		}

		internal static void SetKeyEventNativeDataNative(ImGuiIO* self, ImGuiKey key, int nativeKeycode, int nativeScancode, int nativeLegacyIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, ImGuiKey, int, int, int, void>)vt[426])(self, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiKey, int, int, int, void>)vt[426])((nint)self, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
			#endif
		}

		public static void SetKeyEventNativeData(ImGuiIOPtr self, ImGuiKey key, int nativeKeycode, int nativeScancode, int nativeLegacyIndex)
		{
			SetKeyEventNativeDataNative(self, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
		}

		public static void SetKeyEventNativeData(ImGuiIOPtr self, ImGuiKey key, int nativeKeycode, int nativeScancode)
		{
			SetKeyEventNativeDataNative(self, key, nativeKeycode, nativeScancode, (int)(-1));
		}

		public static void SetKeyEventNativeData(ref ImGuiIO self, ImGuiKey key, int nativeKeycode, int nativeScancode, int nativeLegacyIndex)
		{
			fixed (ImGuiIO* pself = &self)
			{
				SetKeyEventNativeDataNative((ImGuiIO*)pself, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
			}
		}

		public static void SetKeyEventNativeData(ref ImGuiIO self, ImGuiKey key, int nativeKeycode, int nativeScancode)
		{
			fixed (ImGuiIO* pself = &self)
			{
				SetKeyEventNativeDataNative((ImGuiIO*)pself, key, nativeKeycode, nativeScancode, (int)(-1));
			}
		}

		internal static void SetAppAcceptingEventsNative(ImGuiIO* self, byte acceptingEvents)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, byte, void>)vt[427])(self, acceptingEvents);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[427])((nint)self, acceptingEvents);
			#endif
		}

		public static void SetAppAcceptingEvents(ImGuiIOPtr self, bool acceptingEvents)
		{
			SetAppAcceptingEventsNative(self, acceptingEvents ? (byte)1 : (byte)0);
		}

		public static void SetAppAcceptingEvents(ref ImGuiIO self, bool acceptingEvents)
		{
			fixed (ImGuiIO* pself = &self)
			{
				SetAppAcceptingEventsNative((ImGuiIO*)pself, acceptingEvents ? (byte)1 : (byte)0);
			}
		}

		internal static void ClearEventsQueueNative(ImGuiIO* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, void>)vt[428])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[428])((nint)self);
			#endif
		}

		public static void ClearEventsQueue(ImGuiIOPtr self)
		{
			ClearEventsQueueNative(self);
		}

		public static void ClearEventsQueue(ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ClearEventsQueueNative((ImGuiIO*)pself);
			}
		}

		internal static void ClearInputKeysNative(ImGuiIO* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, void>)vt[429])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[429])((nint)self);
			#endif
		}

		public static void ClearInputKeys(ImGuiIOPtr self)
		{
			ClearInputKeysNative(self);
		}

		public static void ClearInputKeys(ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ClearInputKeysNative((ImGuiIO*)pself);
			}
		}

		internal static void ClearInputMouseNative(ImGuiIO* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, void>)vt[430])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[430])((nint)self);
			#endif
		}

		public static void ClearInputMouse(ImGuiIOPtr self)
		{
			ClearInputMouseNative(self);
		}

		public static void ClearInputMouse(ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ClearInputMouseNative((ImGuiIO*)pself);
			}
		}

		internal static ImGuiIO* ImGuiIONative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiIO*>)vt[431])();
			#else
			return (ImGuiIO*)((delegate* unmanaged[Cdecl]<nint>)vt[431])();
			#endif
		}

		public static ImGuiIOPtr ImGuiIO()
		{
			ImGuiIOPtr ret = ImGuiIONative();
			return ret;
		}

		internal static void DestroyNative(ImGuiIO* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, void>)vt[432])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[432])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiIOPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				DestroyNative((ImGuiIO*)pself);
			}
		}

		internal static ImGuiInputTextCallbackData* ImGuiInputTextCallbackDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*>)vt[433])();
			#else
			return (ImGuiInputTextCallbackData*)((delegate* unmanaged[Cdecl]<nint>)vt[433])();
			#endif
		}

		public static ImGuiInputTextCallbackDataPtr ImGuiInputTextCallbackData()
		{
			ImGuiInputTextCallbackDataPtr ret = ImGuiInputTextCallbackDataNative();
			return ret;
		}

		internal static void DestroyNative(ImGuiInputTextCallbackData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, void>)vt[434])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[434])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiInputTextCallbackDataPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				DestroyNative((ImGuiInputTextCallbackData*)pself);
			}
		}

		internal static void DeleteCharsNative(ImGuiInputTextCallbackData* self, int pos, int bytesCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, int, int, void>)vt[435])(self, pos, bytesCount);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[435])((nint)self, pos, bytesCount);
			#endif
		}

		public static void DeleteChars(ImGuiInputTextCallbackDataPtr self, int pos, int bytesCount)
		{
			DeleteCharsNative(self, pos, bytesCount);
		}

		public static void DeleteChars(ref ImGuiInputTextCallbackData self, int pos, int bytesCount)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				DeleteCharsNative((ImGuiInputTextCallbackData*)pself, pos, bytesCount);
			}
		}

		internal static void InsertCharsNative(ImGuiInputTextCallbackData* self, int pos, byte* text, byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, int, byte*, byte*, void>)vt[436])(self, pos, text, textEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, nint, void>)vt[436])((nint)self, pos, (nint)text, (nint)textEnd);
			#endif
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, byte* text, byte* textEnd)
		{
			InsertCharsNative(self, pos, text, textEnd);
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, byte* text)
		{
			InsertCharsNative(self, pos, text, (byte*)(default));
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, byte* text, byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, textEnd);
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, byte* text)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, (byte*)(default));
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, ref byte text, byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				InsertCharsNative(self, pos, (byte*)ptext, textEnd);
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				InsertCharsNative(self, pos, (byte*)ptext, (byte*)(default));
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, string text, byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			InsertCharsNative(self, pos, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			InsertCharsNative(self, pos, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, ReadOnlySpan<byte> text, byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				InsertCharsNative(self, pos, (byte*)ptext, textEnd);
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				InsertCharsNative(self, pos, (byte*)ptext, (byte*)(default));
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, ref byte text, byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, textEnd);
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, ref byte text)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, (byte*)(default));
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, string text, byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, string text)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, ReadOnlySpan<byte> text, byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, textEnd);
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, ReadOnlySpan<byte> text)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, (byte*)(default));
				}
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, byte* text, ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				InsertCharsNative(self, pos, text, (byte*)ptextEnd);
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, byte* text, string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			InsertCharsNative(self, pos, text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, byte* text, ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				InsertCharsNative(self, pos, text, (byte*)ptextEnd);
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, byte* text, ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, (byte*)ptextEnd);
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, byte* text, string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, byte* text, ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, (byte*)ptextEnd);
				}
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, ref byte text, ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					InsertCharsNative(self, pos, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, string text, string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			InsertCharsNative(self, pos, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void InsertChars(ImGuiInputTextCallbackDataPtr self, int pos, ReadOnlySpan<byte> text, ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					InsertCharsNative(self, pos, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, ref byte text, ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, string text, string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void InsertChars(ref ImGuiInputTextCallbackData self, int pos, ReadOnlySpan<byte> text, ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		internal static void SelectAllNative(ImGuiInputTextCallbackData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, void>)vt[437])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[437])((nint)self);
			#endif
		}

		public static void SelectAll(ImGuiInputTextCallbackDataPtr self)
		{
			SelectAllNative(self);
		}

		public static void SelectAll(ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				SelectAllNative((ImGuiInputTextCallbackData*)pself);
			}
		}

		internal static void ClearSelectionNative(ImGuiInputTextCallbackData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, void>)vt[438])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[438])((nint)self);
			#endif
		}

		public static void ClearSelection(ImGuiInputTextCallbackDataPtr self)
		{
			ClearSelectionNative(self);
		}

		public static void ClearSelection(ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				ClearSelectionNative((ImGuiInputTextCallbackData*)pself);
			}
		}

		internal static byte HasSelectionNative(ImGuiInputTextCallbackData* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, byte>)vt[439])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[439])((nint)self);
			#endif
		}

		public static bool HasSelection(ImGuiInputTextCallbackDataPtr self)
		{
			byte ret = HasSelectionNative(self);
			return ret != 0;
		}

		public static bool HasSelection(ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte ret = HasSelectionNative((ImGuiInputTextCallbackData*)pself);
				return ret != 0;
			}
		}

		internal static ImGuiWindowClass* ImGuiWindowClassNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindowClass*>)vt[440])();
			#else
			return (ImGuiWindowClass*)((delegate* unmanaged[Cdecl]<nint>)vt[440])();
			#endif
		}

		public static ImGuiWindowClassPtr ImGuiWindowClass()
		{
			ImGuiWindowClassPtr ret = ImGuiWindowClassNative();
			return ret;
		}

		internal static void DestroyNative(ImGuiWindowClass* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowClass*, void>)vt[441])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[441])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiWindowClassPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiWindowClass self)
		{
			fixed (ImGuiWindowClass* pself = &self)
			{
				DestroyNative((ImGuiWindowClass*)pself);
			}
		}

		internal static ImGuiPayload* ImGuiPayloadNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPayload*>)vt[442])();
			#else
			return (ImGuiPayload*)((delegate* unmanaged[Cdecl]<nint>)vt[442])();
			#endif
		}

		public static ImGuiPayloadPtr ImGuiPayload()
		{
			ImGuiPayloadPtr ret = ImGuiPayloadNative();
			return ret;
		}

		internal static void DestroyNative(ImGuiPayload* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPayload*, void>)vt[443])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[443])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiPayloadPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				DestroyNative((ImGuiPayload*)pself);
			}
		}

		internal static void ClearNative(ImGuiPayload* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPayload*, void>)vt[444])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[444])((nint)self);
			#endif
		}

		public static void Clear(ImGuiPayloadPtr self)
		{
			ClearNative(self);
		}

		public static void Clear(ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				ClearNative((ImGuiPayload*)pself);
			}
		}

		internal static byte IsDataTypeNative(ImGuiPayload* self, byte* type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPayload*, byte*, byte>)vt[445])(self, type);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[445])((nint)self, (nint)type);
			#endif
		}

		public static bool IsDataType(ImGuiPayloadPtr self, byte* type)
		{
			byte ret = IsDataTypeNative(self, type);
			return ret != 0;
		}

		public static bool IsDataType(ref ImGuiPayload self, byte* type)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte ret = IsDataTypeNative((ImGuiPayload*)pself, type);
				return ret != 0;
			}
		}

		public static bool IsDataType(ImGuiPayloadPtr self, ref byte type)
		{
			fixed (byte* ptype = &type)
			{
				byte ret = IsDataTypeNative(self, (byte*)ptype);
				return ret != 0;
			}
		}

		public static bool IsDataType(ImGuiPayloadPtr self, string type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (type != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(type);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(type, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = IsDataTypeNative(self, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool IsDataType(ImGuiPayloadPtr self, ReadOnlySpan<byte> type)
		{
			fixed (byte* ptype = type)
			{
				byte ret = IsDataTypeNative(self, (byte*)ptype);
				return ret != 0;
			}
		}

		public static bool IsDataType(ref ImGuiPayload self, ref byte type)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				fixed (byte* ptype = &type)
				{
					byte ret = IsDataTypeNative((ImGuiPayload*)pself, (byte*)ptype);
					return ret != 0;
				}
			}
		}

		public static bool IsDataType(ref ImGuiPayload self, string type)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (type != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(type);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(type, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = IsDataTypeNative((ImGuiPayload*)pself, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool IsDataType(ref ImGuiPayload self, ReadOnlySpan<byte> type)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				fixed (byte* ptype = type)
				{
					byte ret = IsDataTypeNative((ImGuiPayload*)pself, (byte*)ptype);
					return ret != 0;
				}
			}
		}

		internal static byte IsPreviewNative(ImGuiPayload* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPayload*, byte>)vt[446])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[446])((nint)self);
			#endif
		}

		public static bool IsPreview(ImGuiPayloadPtr self)
		{
			byte ret = IsPreviewNative(self);
			return ret != 0;
		}

		public static bool IsPreview(ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte ret = IsPreviewNative((ImGuiPayload*)pself);
				return ret != 0;
			}
		}

		internal static byte IsDeliveryNative(ImGuiPayload* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPayload*, byte>)vt[447])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[447])((nint)self);
			#endif
		}

		public static bool IsDelivery(ImGuiPayloadPtr self)
		{
			byte ret = IsDeliveryNative(self);
			return ret != 0;
		}

		public static bool IsDelivery(ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte ret = IsDeliveryNative((ImGuiPayload*)pself);
				return ret != 0;
			}
		}

		internal static ImGuiOnceUponAFrame* ImGuiOnceUponAFrameNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiOnceUponAFrame*>)vt[448])();
			#else
			return (ImGuiOnceUponAFrame*)((delegate* unmanaged[Cdecl]<nint>)vt[448])();
			#endif
		}

		public static ImGuiOnceUponAFramePtr ImGuiOnceUponAFrame()
		{
			ImGuiOnceUponAFramePtr ret = ImGuiOnceUponAFrameNative();
			return ret;
		}

		internal static void DestroyNative(ImGuiOnceUponAFrame* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiOnceUponAFrame*, void>)vt[449])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[449])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiOnceUponAFramePtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiOnceUponAFrame self)
		{
			fixed (ImGuiOnceUponAFrame* pself = &self)
			{
				DestroyNative((ImGuiOnceUponAFrame*)pself);
			}
		}

		internal static ImGuiTextFilter* ImGuiTextFilterNative(byte* defaultFilter)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiTextFilter*>)vt[450])(defaultFilter);
			#else
			return (ImGuiTextFilter*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[450])((nint)defaultFilter);
			#endif
		}

		public static ImGuiTextFilterPtr ImGuiTextFilter(byte* defaultFilter)
		{
			ImGuiTextFilterPtr ret = ImGuiTextFilterNative(defaultFilter);
			return ret;
		}

		public static ImGuiTextFilterPtr ImGuiTextFilter()
		{
			ImGuiTextFilterPtr ret = ImGuiTextFilter((string)"");
			return ret;
		}

		public static ImGuiTextFilterPtr ImGuiTextFilter(ref byte defaultFilter)
		{
			fixed (byte* pdefaultFilter = &defaultFilter)
			{
				ImGuiTextFilterPtr ret = ImGuiTextFilterNative((byte*)pdefaultFilter);
				return ret;
			}
		}

		public static ImGuiTextFilterPtr ImGuiTextFilter(string defaultFilter)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (defaultFilter != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(defaultFilter);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(defaultFilter, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextFilterPtr ret = ImGuiTextFilterNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImGuiTextFilterPtr ImGuiTextFilter(ReadOnlySpan<byte> defaultFilter)
		{
			fixed (byte* pdefaultFilter = defaultFilter)
			{
				ImGuiTextFilterPtr ret = ImGuiTextFilterNative((byte*)pdefaultFilter);
				return ret;
			}
		}

		internal static void DestroyNative(ImGuiTextFilter* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, void>)vt[451])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[451])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiTextFilterPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				DestroyNative((ImGuiTextFilter*)pself);
			}
		}

		internal static byte DrawNative(ImGuiTextFilter* self, byte* label, float width)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, byte*, float, byte>)vt[452])(self, label, width);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, float, byte>)vt[452])((nint)self, (nint)label, width);
			#endif
		}

		public static bool Draw(ImGuiTextFilterPtr self, byte* label, float width)
		{
			byte ret = DrawNative(self, label, width);
			return ret != 0;
		}

		public static bool Draw(ImGuiTextFilterPtr self, byte* label)
		{
			byte ret = DrawNative(self, label, (float)(0.0f));
			return ret != 0;
		}

		public static bool Draw(ImGuiTextFilterPtr self)
		{
			bool ret = Draw(self, (string)"Filter(inc,-exc)", (float)(0.0f));
			return ret;
		}

		public static bool Draw(ImGuiTextFilterPtr self, float width)
		{
			bool ret = Draw(self, (string)"Filter(inc,-exc)", width);
			return ret;
		}

		public static bool Draw(ref ImGuiTextFilter self, byte* label, float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = DrawNative((ImGuiTextFilter*)pself, label, width);
				return ret != 0;
			}
		}

		public static bool Draw(ref ImGuiTextFilter self, byte* label)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = DrawNative((ImGuiTextFilter*)pself, label, (float)(0.0f));
				return ret != 0;
			}
		}

		public static bool Draw(ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				bool ret = Draw((ImGuiTextFilter*)pself, (string)"Filter(inc,-exc)", (float)(0.0f));
				return ret;
			}
		}

		public static bool Draw(ref ImGuiTextFilter self, float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				bool ret = Draw((ImGuiTextFilter*)pself, (string)"Filter(inc,-exc)", width);
				return ret;
			}
		}

		public static bool Draw(ImGuiTextFilterPtr self, ref byte label, float width)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DrawNative(self, (byte*)plabel, width);
				return ret != 0;
			}
		}

		public static bool Draw(ImGuiTextFilterPtr self, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DrawNative(self, (byte*)plabel, (float)(0.0f));
				return ret != 0;
			}
		}

		public static bool Draw(ImGuiTextFilterPtr self, string label, float width)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DrawNative(self, pStr0, width);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool Draw(ImGuiTextFilterPtr self, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DrawNative(self, pStr0, (float)(0.0f));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool Draw(ImGuiTextFilterPtr self, ReadOnlySpan<byte> label, float width)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DrawNative(self, (byte*)plabel, width);
				return ret != 0;
			}
		}

		public static bool Draw(ImGuiTextFilterPtr self, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DrawNative(self, (byte*)plabel, (float)(0.0f));
				return ret != 0;
			}
		}

		public static bool Draw(ref ImGuiTextFilter self, ref byte label, float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* plabel = &label)
				{
					byte ret = DrawNative((ImGuiTextFilter*)pself, (byte*)plabel, width);
					return ret != 0;
				}
			}
		}

		public static bool Draw(ref ImGuiTextFilter self, ref byte label)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* plabel = &label)
				{
					byte ret = DrawNative((ImGuiTextFilter*)pself, (byte*)plabel, (float)(0.0f));
					return ret != 0;
				}
			}
		}

		public static bool Draw(ref ImGuiTextFilter self, string label, float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DrawNative((ImGuiTextFilter*)pself, pStr0, width);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool Draw(ref ImGuiTextFilter self, string label)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DrawNative((ImGuiTextFilter*)pself, pStr0, (float)(0.0f));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool Draw(ref ImGuiTextFilter self, ReadOnlySpan<byte> label, float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* plabel = label)
				{
					byte ret = DrawNative((ImGuiTextFilter*)pself, (byte*)plabel, width);
					return ret != 0;
				}
			}
		}

		public static bool Draw(ref ImGuiTextFilter self, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* plabel = label)
				{
					byte ret = DrawNative((ImGuiTextFilter*)pself, (byte*)plabel, (float)(0.0f));
					return ret != 0;
				}
			}
		}

		internal static byte PassFilterNative(ImGuiTextFilter* self, byte* text, byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, byte*, byte*, byte>)vt[453])(self, text, textEnd);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)vt[453])((nint)self, (nint)text, (nint)textEnd);
			#endif
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, byte* text, byte* textEnd)
		{
			byte ret = PassFilterNative(self, text, textEnd);
			return ret != 0;
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, byte* text)
		{
			byte ret = PassFilterNative(self, text, (byte*)(default));
			return ret != 0;
		}

		public static bool PassFilter(ref ImGuiTextFilter self, byte* text, byte* textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, textEnd);
				return ret != 0;
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, byte* text)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, (byte*)(default));
				return ret != 0;
			}
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, ref byte text, byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				byte ret = PassFilterNative(self, (byte*)ptext, textEnd);
				return ret != 0;
			}
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				byte ret = PassFilterNative(self, (byte*)ptext, (byte*)(default));
				return ret != 0;
			}
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, string text, byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = PassFilterNative(self, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = PassFilterNative(self, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, ReadOnlySpan<byte> text, byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				byte ret = PassFilterNative(self, (byte*)ptext, textEnd);
				return ret != 0;
			}
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				byte ret = PassFilterNative(self, (byte*)ptext, (byte*)(default));
				return ret != 0;
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, ref byte text, byte* textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, textEnd);
					return ret != 0;
				}
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, ref byte text)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, (byte*)(default));
					return ret != 0;
				}
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, string text, byte* textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, string text)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, ReadOnlySpan<byte> text, byte* textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, textEnd);
					return ret != 0;
				}
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, ReadOnlySpan<byte> text)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, (byte*)(default));
					return ret != 0;
				}
			}
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, byte* text, ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				byte ret = PassFilterNative(self, text, (byte*)ptextEnd);
				return ret != 0;
			}
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, byte* text, string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = PassFilterNative(self, text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, byte* text, ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				byte ret = PassFilterNative(self, text, (byte*)ptextEnd);
				return ret != 0;
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, byte* text, ref byte textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, byte* text, string textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, byte* text, ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, ref byte text, ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte ret = PassFilterNative(self, (byte*)ptext, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, string text, string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = PassFilterNative(self, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool PassFilter(ImGuiTextFilterPtr self, ReadOnlySpan<byte> text, ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					byte ret = PassFilterNative(self, (byte*)ptext, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, ref byte text, ref byte textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, (byte*)ptextEnd);
						return ret != 0;
					}
				}
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, string text, string textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool PassFilter(ref ImGuiTextFilter self, ReadOnlySpan<byte> text, ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, (byte*)ptextEnd);
						return ret != 0;
					}
				}
			}
		}

		internal static void BuildNative(ImGuiTextFilter* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, void>)vt[454])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[454])((nint)self);
			#endif
		}

		public static void Build(ImGuiTextFilterPtr self)
		{
			BuildNative(self);
		}

		public static void Build(ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				BuildNative((ImGuiTextFilter*)pself);
			}
		}

		internal static void ClearNative(ImGuiTextFilter* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, void>)vt[455])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[455])((nint)self);
			#endif
		}

		public static void Clear(ImGuiTextFilterPtr self)
		{
			ClearNative(self);
		}

		public static void Clear(ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				ClearNative((ImGuiTextFilter*)pself);
			}
		}

		internal static byte IsActiveNative(ImGuiTextFilter* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, byte>)vt[456])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[456])((nint)self);
			#endif
		}

		public static bool IsActive(ImGuiTextFilterPtr self)
		{
			byte ret = IsActiveNative(self);
			return ret != 0;
		}

		public static bool IsActive(ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = IsActiveNative((ImGuiTextFilter*)pself);
				return ret != 0;
			}
		}

		internal static ImGuiTextRange* ImGuiTextRangeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextRange*>)vt[457])();
			#else
			return (ImGuiTextRange*)((delegate* unmanaged[Cdecl]<nint>)vt[457])();
			#endif
		}

		public static ImGuiTextRangePtr ImGuiTextRange()
		{
			ImGuiTextRangePtr ret = ImGuiTextRangeNative();
			return ret;
		}

		internal static void DestroyNative(ImGuiTextRange* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextRange*, void>)vt[458])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[458])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiTextRangePtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiTextRange self)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				DestroyNative((ImGuiTextRange*)pself);
			}
		}

		internal static ImGuiTextRange* ImGuiTextRangeNative(byte* b, byte* e)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, ImGuiTextRange*>)vt[459])(b, e);
			#else
			return (ImGuiTextRange*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[459])((nint)b, (nint)e);
			#endif
		}

		public static ImGuiTextRangePtr ImGuiTextRange(byte* b, byte* e)
		{
			ImGuiTextRangePtr ret = ImGuiTextRangeNative(b, e);
			return ret;
		}

		public static ImGuiTextRangePtr ImGuiTextRange(ref byte b, byte* e)
		{
			fixed (byte* pb = &b)
			{
				ImGuiTextRangePtr ret = ImGuiTextRangeNative((byte*)pb, e);
				return ret;
			}
		}

		public static ImGuiTextRangePtr ImGuiTextRange(string b, byte* e)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (b != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(b);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(b, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextRangePtr ret = ImGuiTextRangeNative(pStr0, e);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImGuiTextRangePtr ImGuiTextRange(ReadOnlySpan<byte> b, byte* e)
		{
			fixed (byte* pb = b)
			{
				ImGuiTextRangePtr ret = ImGuiTextRangeNative((byte*)pb, e);
				return ret;
			}
		}

		public static ImGuiTextRangePtr ImGuiTextRange(byte* b, ref byte e)
		{
			fixed (byte* pe = &e)
			{
				ImGuiTextRangePtr ret = ImGuiTextRangeNative(b, (byte*)pe);
				return ret;
			}
		}

		public static ImGuiTextRangePtr ImGuiTextRange(byte* b, string e)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (e != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(e);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(e, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextRangePtr ret = ImGuiTextRangeNative(b, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImGuiTextRangePtr ImGuiTextRange(byte* b, ReadOnlySpan<byte> e)
		{
			fixed (byte* pe = e)
			{
				ImGuiTextRangePtr ret = ImGuiTextRangeNative(b, (byte*)pe);
				return ret;
			}
		}

		public static ImGuiTextRangePtr ImGuiTextRange(ref byte b, ref byte e)
		{
			fixed (byte* pb = &b)
			{
				fixed (byte* pe = &e)
				{
					ImGuiTextRangePtr ret = ImGuiTextRangeNative((byte*)pb, (byte*)pe);
					return ret;
				}
			}
		}

		public static ImGuiTextRangePtr ImGuiTextRange(string b, string e)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (b != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(b);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(b, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (e != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(e);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(e, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ImGuiTextRangePtr ret = ImGuiTextRangeNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImGuiTextRangePtr ImGuiTextRange(ReadOnlySpan<byte> b, ReadOnlySpan<byte> e)
		{
			fixed (byte* pb = b)
			{
				fixed (byte* pe = e)
				{
					ImGuiTextRangePtr ret = ImGuiTextRangeNative((byte*)pb, (byte*)pe);
					return ret;
				}
			}
		}

		internal static byte emptyNative(ImGuiTextRange* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextRange*, byte>)vt[460])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[460])((nint)self);
			#endif
		}

		public static bool empty(ImGuiTextRangePtr self)
		{
			byte ret = emptyNative(self);
			return ret != 0;
		}

		public static bool empty(ref ImGuiTextRange self)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				byte ret = emptyNative((ImGuiTextRange*)pself);
				return ret != 0;
			}
		}

		internal static void splitNative(ImGuiTextRange* self, byte separator, ImVectorImGuiTextRange* output)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextRange*, byte, ImVectorImGuiTextRange*, void>)vt[461])(self, separator, output);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, nint, void>)vt[461])((nint)self, separator, (nint)output);
			#endif
		}

		public static void split(ImGuiTextRangePtr self, byte separator, ImVectorImGuiTextRangePtr output)
		{
			splitNative(self, separator, output);
		}

		public static void split(ref ImGuiTextRange self, byte separator, ImVectorImGuiTextRangePtr output)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				splitNative((ImGuiTextRange*)pself, separator, output);
			}
		}

		public static void split(ImGuiTextRangePtr self, byte separator, ref ImVectorImGuiTextRange output)
		{
			fixed (ImVectorImGuiTextRange* poutput = &output)
			{
				splitNative(self, separator, (ImVectorImGuiTextRange*)poutput);
			}
		}

		public static void split(ref ImGuiTextRange self, byte separator, ref ImVectorImGuiTextRange output)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				fixed (ImVectorImGuiTextRange* poutput = &output)
				{
					splitNative((ImGuiTextRange*)pself, separator, (ImVectorImGuiTextRange*)poutput);
				}
			}
		}

		internal static ImGuiTextBuffer* ImGuiTextBufferNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*>)vt[462])();
			#else
			return (ImGuiTextBuffer*)((delegate* unmanaged[Cdecl]<nint>)vt[462])();
			#endif
		}

		public static ImGuiTextBufferPtr ImGuiTextBuffer()
		{
			ImGuiTextBufferPtr ret = ImGuiTextBufferNative();
			return ret;
		}

		internal static void DestroyNative(ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, void>)vt[463])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[463])((nint)self);
			#endif
		}

		public static void Destroy(ImGuiTextBufferPtr self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				DestroyNative((ImGuiTextBuffer*)pself);
			}
		}

		internal static byte* beginNative(ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*>)vt[464])(self);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[464])((nint)self);
			#endif
		}

		public static byte* begin(ImGuiTextBufferPtr self)
		{
			byte* ret = beginNative(self);
			return ret;
		}

		public static string beginS(ImGuiTextBufferPtr self)
		{
			string ret = Utils.DecodeStringUTF8(beginNative(self));
			return ret;
		}

		public static byte* begin(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* ret = beginNative((ImGuiTextBuffer*)pself);
				return ret;
			}
		}

		public static string beginS(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(beginNative((ImGuiTextBuffer*)pself));
				return ret;
			}
		}

		internal static byte* endNative(ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*>)vt[465])(self);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[465])((nint)self);
			#endif
		}

		public static byte* end(ImGuiTextBufferPtr self)
		{
			byte* ret = endNative(self);
			return ret;
		}

		public static string endS(ImGuiTextBufferPtr self)
		{
			string ret = Utils.DecodeStringUTF8(endNative(self));
			return ret;
		}

		public static byte* end(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* ret = endNative((ImGuiTextBuffer*)pself);
				return ret;
			}
		}

		public static string endS(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(endNative((ImGuiTextBuffer*)pself));
				return ret;
			}
		}

		internal static int sizeNative(ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, int>)vt[466])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[466])((nint)self);
			#endif
		}

		public static int size(ImGuiTextBufferPtr self)
		{
			int ret = sizeNative(self);
			return ret;
		}

		public static int size(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				int ret = sizeNative((ImGuiTextBuffer*)pself);
				return ret;
			}
		}

		internal static byte emptyNative(ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte>)vt[467])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[467])((nint)self);
			#endif
		}

		public static bool empty(ImGuiTextBufferPtr self)
		{
			byte ret = emptyNative(self);
			return ret != 0;
		}

		public static bool empty(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte ret = emptyNative((ImGuiTextBuffer*)pself);
				return ret != 0;
			}
		}

		internal static void clearNative(ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, void>)vt[468])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[468])((nint)self);
			#endif
		}

		public static void clear(ImGuiTextBufferPtr self)
		{
			clearNative(self);
		}

		public static void clear(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				clearNative((ImGuiTextBuffer*)pself);
			}
		}

		internal static void reserveNative(ImGuiTextBuffer* self, int capacity)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, int, void>)vt[469])(self, capacity);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[469])((nint)self, capacity);
			#endif
		}

		public static void reserve(ImGuiTextBufferPtr self, int capacity)
		{
			reserveNative(self, capacity);
		}

		public static void reserve(ref ImGuiTextBuffer self, int capacity)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				reserveNative((ImGuiTextBuffer*)pself, capacity);
			}
		}

		internal static byte* c_strNative(ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*>)vt[470])(self);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[470])((nint)self);
			#endif
		}

		public static byte* c_str(ImGuiTextBufferPtr self)
		{
			byte* ret = c_strNative(self);
			return ret;
		}

		public static string c_strS(ImGuiTextBufferPtr self)
		{
			string ret = Utils.DecodeStringUTF8(c_strNative(self));
			return ret;
		}

		public static byte* c_str(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* ret = c_strNative((ImGuiTextBuffer*)pself);
				return ret;
			}
		}

		public static string c_strS(ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(c_strNative((ImGuiTextBuffer*)pself));
				return ret;
			}
		}

		internal static void appendNative(ImGuiTextBuffer* self, byte* str, byte* strEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*, byte*, void>)vt[471])(self, str, strEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[471])((nint)self, (nint)str, (nint)strEnd);
			#endif
		}

		public static void append(ImGuiTextBufferPtr self, byte* str, byte* strEnd)
		{
			appendNative(self, str, strEnd);
		}

		public static void append(ImGuiTextBufferPtr self, byte* str)
		{
			appendNative(self, str, (byte*)(default));
		}

		public static void append(ref ImGuiTextBuffer self, byte* str, byte* strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				appendNative((ImGuiTextBuffer*)pself, str, strEnd);
			}
		}

		public static void append(ref ImGuiTextBuffer self, byte* str)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				appendNative((ImGuiTextBuffer*)pself, str, (byte*)(default));
			}
		}

		public static void append(ImGuiTextBufferPtr self, ref byte str, byte* strEnd)
		{
			fixed (byte* pstr = &str)
			{
				appendNative(self, (byte*)pstr, strEnd);
			}
		}

		public static void append(ImGuiTextBufferPtr self, ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				appendNative(self, (byte*)pstr, (byte*)(default));
			}
		}

		public static void append(ImGuiTextBufferPtr self, string str, byte* strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			appendNative(self, pStr0, strEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void append(ImGuiTextBufferPtr self, string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			appendNative(self, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void append(ImGuiTextBufferPtr self, ReadOnlySpan<byte> str, byte* strEnd)
		{
			fixed (byte* pstr = str)
			{
				appendNative(self, (byte*)pstr, strEnd);
			}
		}

		public static void append(ImGuiTextBufferPtr self, ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				appendNative(self, (byte*)pstr, (byte*)(default));
			}
		}

		public static void append(ref ImGuiTextBuffer self, ref byte str, byte* strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					appendNative((ImGuiTextBuffer*)pself, (byte*)pstr, strEnd);
				}
			}
		}

		public static void append(ref ImGuiTextBuffer self, ref byte str)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					appendNative((ImGuiTextBuffer*)pself, (byte*)pstr, (byte*)(default));
				}
			}
		}

		public static void append(ref ImGuiTextBuffer self, string str, byte* strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				appendNative((ImGuiTextBuffer*)pself, pStr0, strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void append(ref ImGuiTextBuffer self, string str)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				appendNative((ImGuiTextBuffer*)pself, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}
	}
}
