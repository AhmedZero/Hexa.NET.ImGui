// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		public static int ImTextCharFromUtf8(uint* outChar, byte* inText, ref byte inTextEnd)
		{
			fixed (byte* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCharFromUtf8Native(outChar, inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		public static int ImTextCharFromUtf8(uint* outChar, byte* inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCharFromUtf8Native(outChar, inText, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImTextCharFromUtf8(ref uint outChar, byte* inText, ref byte inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCharFromUtf8Native((uint*)poutChar, inText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		public static int ImTextCharFromUtf8(ref uint outChar, byte* inText, string inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inTextEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImTextCharFromUtf8Native((uint*)poutChar, inText, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static int ImTextCharFromUtf8(uint* outChar, ref byte inText, ref byte inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCharFromUtf8Native(outChar, (byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		public static int ImTextCharFromUtf8(uint* outChar, string inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImTextCharFromUtf8Native(outChar, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImTextCharFromUtf8(ref uint outChar, ref byte inText, ref byte inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				fixed (byte* pinText = &inText)
				{
					fixed (byte* pinTextEnd = &inTextEnd)
					{
						int ret = ImTextCharFromUtf8Native((uint*)poutChar, (byte*)pinText, (byte*)pinTextEnd);
						return ret;
					}
				}
			}
		}

		public static int ImTextCharFromUtf8(ref uint outChar, string inText, string inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inText != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inText);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (inTextEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ImTextCharFromUtf8Native((uint*)poutChar, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		internal static int ImTextCountCharsFromUtf8Native(byte* inText, byte* inTextEnd)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)vt[710])(inText, inTextEnd);
		}

		public static int ImTextCountCharsFromUtf8(byte* inText, byte* inTextEnd)
		{
			int ret = ImTextCountCharsFromUtf8Native(inText, inTextEnd);
			return ret;
		}

		public static int ImTextCountCharsFromUtf8(ref byte inText, byte* inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				int ret = ImTextCountCharsFromUtf8Native((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		public static int ImTextCountCharsFromUtf8(string inText, byte* inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountCharsFromUtf8Native(pStr0, inTextEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImTextCountCharsFromUtf8(byte* inText, ref byte inTextEnd)
		{
			fixed (byte* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCountCharsFromUtf8Native(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		public static int ImTextCountCharsFromUtf8(byte* inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountCharsFromUtf8Native(inText, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImTextCountCharsFromUtf8(ref byte inText, ref byte inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCountCharsFromUtf8Native((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		public static int ImTextCountCharsFromUtf8(string inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImTextCountCharsFromUtf8Native(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		internal static int ImTextCountUtf8BytesFromCharNative(byte* inText, byte* inTextEnd)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)vt[711])(inText, inTextEnd);
		}

		public static int ImTextCountUtf8BytesFromChar(byte* inText, byte* inTextEnd)
		{
			int ret = ImTextCountUtf8BytesFromCharNative(inText, inTextEnd);
			return ret;
		}

		public static int ImTextCountUtf8BytesFromChar(ref byte inText, byte* inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				int ret = ImTextCountUtf8BytesFromCharNative((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		public static int ImTextCountUtf8BytesFromChar(string inText, byte* inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountUtf8BytesFromCharNative(pStr0, inTextEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImTextCountUtf8BytesFromChar(byte* inText, ref byte inTextEnd)
		{
			fixed (byte* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCountUtf8BytesFromCharNative(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		public static int ImTextCountUtf8BytesFromChar(byte* inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountUtf8BytesFromCharNative(inText, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImTextCountUtf8BytesFromChar(ref byte inText, ref byte inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCountUtf8BytesFromCharNative((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		public static int ImTextCountUtf8BytesFromChar(string inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImTextCountUtf8BytesFromCharNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		internal static int ImTextCountUtf8BytesFromNative(char* inText, char* inTextEnd)
		{
			return ((delegate* unmanaged[Cdecl]<char*, char*, int>)vt[712])(inText, inTextEnd);
		}

		public static int ImTextCountUtf8BytesFrom(char* inText, char* inTextEnd)
		{
			int ret = ImTextCountUtf8BytesFromNative(inText, inTextEnd);
			return ret;
		}

		public static int ImTextCountUtf8BytesFrom(ref char inText, char* inTextEnd)
		{
			fixed (char* pinText = &inText)
			{
				int ret = ImTextCountUtf8BytesFromNative((char*)pinText, inTextEnd);
				return ret;
			}
		}

		public static int ImTextCountUtf8BytesFrom(char* inText, ref char inTextEnd)
		{
			fixed (char* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCountUtf8BytesFromNative(inText, (char*)pinTextEnd);
				return ret;
			}
		}

		public static int ImTextCountUtf8BytesFrom(ref char inText, ref char inTextEnd)
		{
			fixed (char* pinText = &inText)
			{
				fixed (char* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCountUtf8BytesFromNative((char*)pinText, (char*)pinTextEnd);
					return ret;
				}
			}
		}

		internal static byte* ImTextFindPreviousUtf8CodepointNative(byte* inTextStart, byte* inTextCurr)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*>)vt[713])(inTextStart, inTextCurr);
		}

		public static byte* ImTextFindPreviousUtf8Codepoint(byte* inTextStart, byte* inTextCurr)
		{
			byte* ret = ImTextFindPreviousUtf8CodepointNative(inTextStart, inTextCurr);
			return ret;
		}

		public static string ImTextFindPreviousUtf8CodepointS(byte* inTextStart, byte* inTextCurr)
		{
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(inTextStart, inTextCurr));
			return ret;
		}

		public static byte* ImTextFindPreviousUtf8Codepoint(ref byte inTextStart, byte* inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				byte* ret = ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, inTextCurr);
				return ret;
			}
		}

		public static string ImTextFindPreviousUtf8CodepointS(ref byte inTextStart, byte* inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, inTextCurr));
				return ret;
			}
		}

		public static byte* ImTextFindPreviousUtf8Codepoint(string inTextStart, byte* inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImTextFindPreviousUtf8CodepointNative(pStr0, inTextCurr);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static string ImTextFindPreviousUtf8CodepointS(string inTextStart, byte* inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(pStr0, inTextCurr));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static byte* ImTextFindPreviousUtf8Codepoint(byte* inTextStart, ref byte inTextCurr)
		{
			fixed (byte* pinTextCurr = &inTextCurr)
			{
				byte* ret = ImTextFindPreviousUtf8CodepointNative(inTextStart, (byte*)pinTextCurr);
				return ret;
			}
		}

		public static string ImTextFindPreviousUtf8CodepointS(byte* inTextStart, ref byte inTextCurr)
		{
			fixed (byte* pinTextCurr = &inTextCurr)
			{
				string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(inTextStart, (byte*)pinTextCurr));
				return ret;
			}
		}

		public static byte* ImTextFindPreviousUtf8Codepoint(byte* inTextStart, string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextCurr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextCurr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImTextFindPreviousUtf8CodepointNative(inTextStart, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static string ImTextFindPreviousUtf8CodepointS(byte* inTextStart, string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextCurr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextCurr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(inTextStart, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static byte* ImTextFindPreviousUtf8Codepoint(ref byte inTextStart, ref byte inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				fixed (byte* pinTextCurr = &inTextCurr)
				{
					byte* ret = ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr);
					return ret;
				}
			}
		}

		public static string ImTextFindPreviousUtf8CodepointS(ref byte inTextStart, ref byte inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				fixed (byte* pinTextCurr = &inTextCurr)
				{
					string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr));
					return ret;
				}
			}
		}

		public static byte* ImTextFindPreviousUtf8Codepoint(string inTextStart, string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextCurr != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextCurr, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = ImTextFindPreviousUtf8CodepointNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static string ImTextFindPreviousUtf8CodepointS(string inTextStart, string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextCurr != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextCurr, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(pStr0, pStr1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		internal static int ImTextCountLinesNative(byte* inText, byte* inTextEnd)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)vt[714])(inText, inTextEnd);
		}

		public static int ImTextCountLines(byte* inText, byte* inTextEnd)
		{
			int ret = ImTextCountLinesNative(inText, inTextEnd);
			return ret;
		}

		public static int ImTextCountLines(ref byte inText, byte* inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				int ret = ImTextCountLinesNative((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		public static int ImTextCountLines(string inText, byte* inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountLinesNative(pStr0, inTextEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImTextCountLines(byte* inText, ref byte inTextEnd)
		{
			fixed (byte* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCountLinesNative(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		public static int ImTextCountLines(byte* inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountLinesNative(inText, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImTextCountLines(ref byte inText, ref byte inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCountLinesNative((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		public static int ImTextCountLines(string inText, string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImTextCountLinesNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		internal static ImFileHandle ImFileOpenNative(byte* filename, byte* mode)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, ImFileHandle>)vt[715])(filename, mode);
		}

		public static ImFileHandle ImFileOpen(byte* filename, byte* mode)
		{
			ImFileHandle ret = ImFileOpenNative(filename, mode);
			return ret;
		}

		public static ImFileHandle ImFileOpen(ref byte filename, byte* mode)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFileHandle ret = ImFileOpenNative((byte*)pfilename, mode);
				return ret;
			}
		}

		public static ImFileHandle ImFileOpen(string filename, byte* mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFileHandle ret = ImFileOpenNative(pStr0, mode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFileHandle ImFileOpen(byte* filename, ref byte mode)
		{
			fixed (byte* pmode = &mode)
			{
				ImFileHandle ret = ImFileOpenNative(filename, (byte*)pmode);
				return ret;
			}
		}

		public static ImFileHandle ImFileOpen(byte* filename, string mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFileHandle ret = ImFileOpenNative(filename, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImFileHandle ImFileOpen(ref byte filename, ref byte mode)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (byte* pmode = &mode)
				{
					ImFileHandle ret = ImFileOpenNative((byte*)pfilename, (byte*)pmode);
					return ret;
				}
			}
		}

		public static ImFileHandle ImFileOpen(string filename, string mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (mode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(mode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(mode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ImFileHandle ret = ImFileOpenNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		internal static byte ImFileCloseNative(ImFileHandle file)
		{
			return ((delegate* unmanaged[Cdecl]<ImFileHandle, byte>)vt[716])(file);
		}

		public static bool ImFileClose(ImFileHandle file)
		{
			byte ret = ImFileCloseNative(file);
			return ret != 0;
		}

		internal static ulong ImFileGetSizeNative(ImFileHandle file)
		{
			return ((delegate* unmanaged[Cdecl]<ImFileHandle, ulong>)vt[717])(file);
		}

		public static ulong ImFileGetSize(ImFileHandle file)
		{
			ulong ret = ImFileGetSizeNative(file);
			return ret;
		}

		internal static ulong ImFileReadNative(void* data, ulong size, ulong count, ImFileHandle file)
		{
			return ((delegate* unmanaged[Cdecl]<void*, ulong, ulong, ImFileHandle, ulong>)vt[718])(data, size, count, file);
		}

		public static ulong ImFileRead(void* data, ulong size, ulong count, ImFileHandle file)
		{
			ulong ret = ImFileReadNative(data, size, count, file);
			return ret;
		}

		internal static ulong ImFileWriteNative(void* data, ulong size, ulong count, ImFileHandle file)
		{
			return ((delegate* unmanaged[Cdecl]<void*, ulong, ulong, ImFileHandle, ulong>)vt[719])(data, size, count, file);
		}

		public static ulong ImFileWrite(void* data, ulong size, ulong count, ImFileHandle file)
		{
			ulong ret = ImFileWriteNative(data, size, count, file);
			return ret;
		}

		internal static void* ImFileLoadToMemoryNative(byte* filename, byte* mode, nuint* outFileSize, int paddingBytes)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint*, int, void*>)vt[720])(filename, mode, outFileSize, paddingBytes);
		}

		public static void* ImFileLoadToMemory(byte* filename, byte* mode, nuint* outFileSize, int paddingBytes)
		{
			void* ret = ImFileLoadToMemoryNative(filename, mode, outFileSize, paddingBytes);
			return ret;
		}

		public static void* ImFileLoadToMemory(ref byte filename, byte* mode, nuint* outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, outFileSize, paddingBytes);
				return ret;
			}
		}

		public static void* ImFileLoadToMemory(string filename, byte* mode, nuint* outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = ImFileLoadToMemoryNative(pStr0, mode, outFileSize, paddingBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static void* ImFileLoadToMemory(byte* filename, ref byte mode, nuint* outFileSize, int paddingBytes)
		{
			fixed (byte* pmode = &mode)
			{
				void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, outFileSize, paddingBytes);
				return ret;
			}
		}

		public static void* ImFileLoadToMemory(byte* filename, string mode, nuint* outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = ImFileLoadToMemoryNative(filename, pStr0, outFileSize, paddingBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static void* ImFileLoadToMemory(ref byte filename, ref byte mode, nuint* outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (byte* pmode = &mode)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, outFileSize, paddingBytes);
					return ret;
				}
			}
		}

		public static void* ImFileLoadToMemory(string filename, string mode, nuint* outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (mode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(mode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(mode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			void* ret = ImFileLoadToMemoryNative(pStr0, pStr1, outFileSize, paddingBytes);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static void* ImFileLoadToMemory(byte* filename, byte* mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(filename, mode, (nuint*)poutFileSize, paddingBytes);
				return ret;
			}
		}

		public static void* ImFileLoadToMemory(ref byte filename, byte* mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, (nuint*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		public static void* ImFileLoadToMemory(string filename, byte* mode, ref nuint outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(pStr0, mode, (nuint*)poutFileSize, paddingBytes);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static void* ImFileLoadToMemory(byte* filename, ref byte mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (byte* pmode = &mode)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, (nuint*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		public static void* ImFileLoadToMemory(byte* filename, string mode, ref nuint outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(filename, pStr0, (nuint*)poutFileSize, paddingBytes);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static void* ImFileLoadToMemory(ref byte filename, ref byte mode, ref nuint outFileSize, int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (byte* pmode = &mode)
				{
					fixed (nuint* poutFileSize = &outFileSize)
					{
						void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, (nuint*)poutFileSize, paddingBytes);
						return ret;
					}
				}
			}
		}

		public static void* ImFileLoadToMemory(string filename, string mode, ref nuint outFileSize, int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (mode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(mode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(mode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(pStr0, pStr1, (nuint*)poutFileSize, paddingBytes);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		internal static float ImPowFloatNative(float x, float y)
		{
			return ((delegate* unmanaged[Cdecl]<float, float, float>)vt[721])(x, y);
		}

		public static float ImPowFloat(float x, float y)
		{
			float ret = ImPowFloatNative(x, y);
			return ret;
		}

		internal static double ImPowDoubleNative(double x, double y)
		{
			return ((delegate* unmanaged[Cdecl]<double, double, double>)vt[722])(x, y);
		}

		public static double ImPowDouble(double x, double y)
		{
			double ret = ImPowDoubleNative(x, y);
			return ret;
		}

		internal static float ImLogFloatNative(float x)
		{
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[723])(x);
		}

		public static float ImLogFloat(float x)
		{
			float ret = ImLogFloatNative(x);
			return ret;
		}

		internal static double ImLogDoubleNative(double x)
		{
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[724])(x);
		}

		public static double ImLogDouble(double x)
		{
			double ret = ImLogDoubleNative(x);
			return ret;
		}

		internal static int ImAbsIntNative(int x)
		{
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[725])(x);
		}

		public static int ImAbsInt(int x)
		{
			int ret = ImAbsIntNative(x);
			return ret;
		}

		internal static float ImAbsFloatNative(float x)
		{
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[726])(x);
		}

		public static float ImAbsFloat(float x)
		{
			float ret = ImAbsFloatNative(x);
			return ret;
		}

		internal static double ImAbsDoubleNative(double x)
		{
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[727])(x);
		}

		public static double ImAbsDouble(double x)
		{
			double ret = ImAbsDoubleNative(x);
			return ret;
		}

		internal static float ImSignFloatNative(float x)
		{
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[728])(x);
		}

		public static float ImSignFloat(float x)
		{
			float ret = ImSignFloatNative(x);
			return ret;
		}

		internal static double ImSignDoubleNative(double x)
		{
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[729])(x);
		}

		public static double ImSignDouble(double x)
		{
			double ret = ImSignDoubleNative(x);
			return ret;
		}

		internal static float ImRsqrtFloatNative(float x)
		{
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[730])(x);
		}

		public static float ImRsqrtFloat(float x)
		{
			float ret = ImRsqrtFloatNative(x);
			return ret;
		}

		internal static double ImRsqrtDoubleNative(double x)
		{
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[731])(x);
		}

		public static double ImRsqrtDouble(double x)
		{
			double ret = ImRsqrtDoubleNative(x);
			return ret;
		}

		internal static void ImMinNative(Vector2* output, Vector2 lhs, Vector2 rhs)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, void>)vt[732])(output, lhs, rhs);
		}

		public static Vector2 ImMin(Vector2 lhs, Vector2 rhs)
		{
			Vector2 ret;
			ImMinNative(&ret, lhs, rhs);
			return ret;
		}

		public static void ImMin(Vector2* output, Vector2 lhs, Vector2 rhs)
		{
			ImMinNative(output, lhs, rhs);
		}

		public static void ImMin(ref Vector2 output, Vector2 lhs, Vector2 rhs)
		{
			fixed (Vector2* poutput = &output)
			{
				ImMinNative((Vector2*)poutput, lhs, rhs);
			}
		}

		internal static void ImMaxNative(Vector2* output, Vector2 lhs, Vector2 rhs)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, void>)vt[733])(output, lhs, rhs);
		}

		public static Vector2 ImMax(Vector2 lhs, Vector2 rhs)
		{
			Vector2 ret;
			ImMaxNative(&ret, lhs, rhs);
			return ret;
		}

		public static void ImMax(Vector2* output, Vector2 lhs, Vector2 rhs)
		{
			ImMaxNative(output, lhs, rhs);
		}

		public static void ImMax(ref Vector2 output, Vector2 lhs, Vector2 rhs)
		{
			fixed (Vector2* poutput = &output)
			{
				ImMaxNative((Vector2*)poutput, lhs, rhs);
			}
		}

		internal static void ImClampNative(Vector2* output, Vector2 v, Vector2 mn, Vector2 mx)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[734])(output, v, mn, mx);
		}

		public static Vector2 ImClamp(Vector2 v, Vector2 mn, Vector2 mx)
		{
			Vector2 ret;
			ImClampNative(&ret, v, mn, mx);
			return ret;
		}

		public static void ImClamp(Vector2* output, Vector2 v, Vector2 mn, Vector2 mx)
		{
			ImClampNative(output, v, mn, mx);
		}

		public static void ImClamp(ref Vector2 output, Vector2 v, Vector2 mn, Vector2 mx)
		{
			fixed (Vector2* poutput = &output)
			{
				ImClampNative((Vector2*)poutput, v, mn, mx);
			}
		}

		internal static void ImLerpVec2FloatNative(Vector2* output, Vector2 a, Vector2 b, float t)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, float, void>)vt[735])(output, a, b, t);
		}

		public static Vector2 ImLerpVec2Float(Vector2 a, Vector2 b, float t)
		{
			Vector2 ret;
			ImLerpVec2FloatNative(&ret, a, b, t);
			return ret;
		}

		public static void ImLerpVec2Float(Vector2* output, Vector2 a, Vector2 b, float t)
		{
			ImLerpVec2FloatNative(output, a, b, t);
		}

		public static void ImLerpVec2Float(ref Vector2 output, Vector2 a, Vector2 b, float t)
		{
			fixed (Vector2* poutput = &output)
			{
				ImLerpVec2FloatNative((Vector2*)poutput, a, b, t);
			}
		}

		internal static void ImLerpVec2Vec2Native(Vector2* output, Vector2 a, Vector2 b, Vector2 t)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[736])(output, a, b, t);
		}

		public static Vector2 ImLerpVec2Vec2(Vector2 a, Vector2 b, Vector2 t)
		{
			Vector2 ret;
			ImLerpVec2Vec2Native(&ret, a, b, t);
			return ret;
		}

		public static void ImLerpVec2Vec2(Vector2* output, Vector2 a, Vector2 b, Vector2 t)
		{
			ImLerpVec2Vec2Native(output, a, b, t);
		}

		public static void ImLerpVec2Vec2(ref Vector2 output, Vector2 a, Vector2 b, Vector2 t)
		{
			fixed (Vector2* poutput = &output)
			{
				ImLerpVec2Vec2Native((Vector2*)poutput, a, b, t);
			}
		}

		internal static void ImLerpVec4Native(Vector4* output, Vector4 a, Vector4 b, float t)
		{
			((delegate* unmanaged[Cdecl]<Vector4*, Vector4, Vector4, float, void>)vt[737])(output, a, b, t);
		}

		public static Vector4 ImLerpVec4(Vector4 a, Vector4 b, float t)
		{
			Vector4 ret;
			ImLerpVec4Native(&ret, a, b, t);
			return ret;
		}

		public static void ImLerpVec4(Vector4* output, Vector4 a, Vector4 b, float t)
		{
			ImLerpVec4Native(output, a, b, t);
		}

		public static void ImLerpVec4(ref Vector4 output, Vector4 a, Vector4 b, float t)
		{
			fixed (Vector4* poutput = &output)
			{
				ImLerpVec4Native((Vector4*)poutput, a, b, t);
			}
		}

		internal static float ImSaturateNative(float f)
		{
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[738])(f);
		}

		public static float ImSaturate(float f)
		{
			float ret = ImSaturateNative(f);
			return ret;
		}

		internal static float ImLengthSqrVec2Native(Vector2 lhs)
		{
			return ((delegate* unmanaged[Cdecl]<Vector2, float>)vt[739])(lhs);
		}

		public static float ImLengthSqrVec2(Vector2 lhs)
		{
			float ret = ImLengthSqrVec2Native(lhs);
			return ret;
		}

		internal static float ImLengthSqrVec4Native(Vector4 lhs)
		{
			return ((delegate* unmanaged[Cdecl]<Vector4, float>)vt[740])(lhs);
		}

		public static float ImLengthSqrVec4(Vector4 lhs)
		{
			float ret = ImLengthSqrVec4Native(lhs);
			return ret;
		}

		internal static float ImInvLengthNative(Vector2 lhs, float failValue)
		{
			return ((delegate* unmanaged[Cdecl]<Vector2, float, float>)vt[741])(lhs, failValue);
		}

		public static float ImInvLength(Vector2 lhs, float failValue)
		{
			float ret = ImInvLengthNative(lhs, failValue);
			return ret;
		}

		internal static float ImTruncFloatNative(float f)
		{
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[742])(f);
		}

		public static float ImTruncFloat(float f)
		{
			float ret = ImTruncFloatNative(f);
			return ret;
		}

		internal static void ImTruncVec2Native(Vector2* output, Vector2 v)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, void>)vt[743])(output, v);
		}

		public static Vector2 ImTruncVec2(Vector2 v)
		{
			Vector2 ret;
			ImTruncVec2Native(&ret, v);
			return ret;
		}

		public static void ImTruncVec2(Vector2* output, Vector2 v)
		{
			ImTruncVec2Native(output, v);
		}

		public static void ImTruncVec2(ref Vector2 output, Vector2 v)
		{
			fixed (Vector2* poutput = &output)
			{
				ImTruncVec2Native((Vector2*)poutput, v);
			}
		}

		internal static float ImFloorFloatNative(float f)
		{
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[744])(f);
		}

		public static float ImFloorFloat(float f)
		{
			float ret = ImFloorFloatNative(f);
			return ret;
		}

		internal static void ImFloorVec2Native(Vector2* output, Vector2 v)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, void>)vt[745])(output, v);
		}

		public static Vector2 ImFloorVec2(Vector2 v)
		{
			Vector2 ret;
			ImFloorVec2Native(&ret, v);
			return ret;
		}

		public static void ImFloorVec2(Vector2* output, Vector2 v)
		{
			ImFloorVec2Native(output, v);
		}

		public static void ImFloorVec2(ref Vector2 output, Vector2 v)
		{
			fixed (Vector2* poutput = &output)
			{
				ImFloorVec2Native((Vector2*)poutput, v);
			}
		}

		internal static int ImModPositiveNative(int a, int b)
		{
			return ((delegate* unmanaged[Cdecl]<int, int, int>)vt[746])(a, b);
		}

		public static int ImModPositive(int a, int b)
		{
			int ret = ImModPositiveNative(a, b);
			return ret;
		}

		internal static float ImDotNative(Vector2 a, Vector2 b)
		{
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, float>)vt[747])(a, b);
		}

		public static float ImDot(Vector2 a, Vector2 b)
		{
			float ret = ImDotNative(a, b);
			return ret;
		}

		internal static void ImRotateNative(Vector2* output, Vector2 v, float cosA, float sinA)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, float, float, void>)vt[748])(output, v, cosA, sinA);
		}

		public static Vector2 ImRotate(Vector2 v, float cosA, float sinA)
		{
			Vector2 ret;
			ImRotateNative(&ret, v, cosA, sinA);
			return ret;
		}

		public static void ImRotate(Vector2* output, Vector2 v, float cosA, float sinA)
		{
			ImRotateNative(output, v, cosA, sinA);
		}

		public static void ImRotate(ref Vector2 output, Vector2 v, float cosA, float sinA)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRotateNative((Vector2*)poutput, v, cosA, sinA);
			}
		}

		internal static float ImLinearSweepNative(float current, float target, float speed)
		{
			return ((delegate* unmanaged[Cdecl]<float, float, float, float>)vt[749])(current, target, speed);
		}

		public static float ImLinearSweep(float current, float target, float speed)
		{
			float ret = ImLinearSweepNative(current, target, speed);
			return ret;
		}

		internal static float ImLinearRemapClampNative(float s0, float s1, float d0, float d1, float x)
		{
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float>)vt[750])(s0, s1, d0, d1, x);
		}

		public static float ImLinearRemapClamp(float s0, float s1, float d0, float d1, float x)
		{
			float ret = ImLinearRemapClampNative(s0, s1, d0, d1, x);
			return ret;
		}

		internal static void ImMulNative(Vector2* output, Vector2 lhs, Vector2 rhs)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, void>)vt[751])(output, lhs, rhs);
		}

		public static Vector2 ImMul(Vector2 lhs, Vector2 rhs)
		{
			Vector2 ret;
			ImMulNative(&ret, lhs, rhs);
			return ret;
		}

		public static void ImMul(Vector2* output, Vector2 lhs, Vector2 rhs)
		{
			ImMulNative(output, lhs, rhs);
		}

		public static void ImMul(ref Vector2 output, Vector2 lhs, Vector2 rhs)
		{
			fixed (Vector2* poutput = &output)
			{
				ImMulNative((Vector2*)poutput, lhs, rhs);
			}
		}

		internal static byte ImIsFloatAboveGuaranteedIntegerPrecisionNative(float f)
		{
			return ((delegate* unmanaged[Cdecl]<float, byte>)vt[752])(f);
		}

		public static bool ImIsFloatAboveGuaranteedIntegerPrecision(float f)
		{
			byte ret = ImIsFloatAboveGuaranteedIntegerPrecisionNative(f);
			return ret != 0;
		}

		internal static float ImExponentialMovingAverageNative(float avg, float sample, int n)
		{
			return ((delegate* unmanaged[Cdecl]<float, float, int, float>)vt[753])(avg, sample, n);
		}

		public static float ImExponentialMovingAverage(float avg, float sample, int n)
		{
			float ret = ImExponentialMovingAverageNative(avg, sample, n);
			return ret;
		}

		internal static void ImBezierCubicCalcNative(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, float, void>)vt[754])(output, p1, p2, p3, p4, t);
		}

		public static Vector2 ImBezierCubicCalc(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			Vector2 ret;
			ImBezierCubicCalcNative(&ret, p1, p2, p3, p4, t);
			return ret;
		}

		public static void ImBezierCubicCalc(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			ImBezierCubicCalcNative(output, p1, p2, p3, p4, t);
		}

		public static void ImBezierCubicCalc(ref Vector2 output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
		{
			fixed (Vector2* poutput = &output)
			{
				ImBezierCubicCalcNative((Vector2*)poutput, p1, p2, p3, p4, t);
			}
		}

		internal static void ImBezierCubicClosestPointNative(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, Vector2, int, void>)vt[755])(output, p1, p2, p3, p4, p, numSegments);
		}

		public static Vector2 ImBezierCubicClosestPoint(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			Vector2 ret;
			ImBezierCubicClosestPointNative(&ret, p1, p2, p3, p4, p, numSegments);
			return ret;
		}

		public static void ImBezierCubicClosestPoint(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			ImBezierCubicClosestPointNative(output, p1, p2, p3, p4, p, numSegments);
		}

		public static void ImBezierCubicClosestPoint(ref Vector2 output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int numSegments)
		{
			fixed (Vector2* poutput = &output)
			{
				ImBezierCubicClosestPointNative((Vector2*)poutput, p1, p2, p3, p4, p, numSegments);
			}
		}

		internal static void ImBezierCubicClosestPointCasteljauNative(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, Vector2, float, void>)vt[756])(output, p1, p2, p3, p4, p, tessTol);
		}

		public static Vector2 ImBezierCubicClosestPointCasteljau(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			Vector2 ret;
			ImBezierCubicClosestPointCasteljauNative(&ret, p1, p2, p3, p4, p, tessTol);
			return ret;
		}

		public static void ImBezierCubicClosestPointCasteljau(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			ImBezierCubicClosestPointCasteljauNative(output, p1, p2, p3, p4, p, tessTol);
		}

		public static void ImBezierCubicClosestPointCasteljau(ref Vector2 output, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tessTol)
		{
			fixed (Vector2* poutput = &output)
			{
				ImBezierCubicClosestPointCasteljauNative((Vector2*)poutput, p1, p2, p3, p4, p, tessTol);
			}
		}

		internal static void ImBezierQuadraticCalcNative(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, float, void>)vt[757])(output, p1, p2, p3, t);
		}

		public static Vector2 ImBezierQuadraticCalc(Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			Vector2 ret;
			ImBezierQuadraticCalcNative(&ret, p1, p2, p3, t);
			return ret;
		}

		public static void ImBezierQuadraticCalc(Vector2* output, Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			ImBezierQuadraticCalcNative(output, p1, p2, p3, t);
		}

		public static void ImBezierQuadraticCalc(ref Vector2 output, Vector2 p1, Vector2 p2, Vector2 p3, float t)
		{
			fixed (Vector2* poutput = &output)
			{
				ImBezierQuadraticCalcNative((Vector2*)poutput, p1, p2, p3, t);
			}
		}

		internal static void ImLineClosestPointNative(Vector2* output, Vector2 a, Vector2 b, Vector2 p)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[758])(output, a, b, p);
		}

		public static Vector2 ImLineClosestPoint(Vector2 a, Vector2 b, Vector2 p)
		{
			Vector2 ret;
			ImLineClosestPointNative(&ret, a, b, p);
			return ret;
		}

		public static void ImLineClosestPoint(Vector2* output, Vector2 a, Vector2 b, Vector2 p)
		{
			ImLineClosestPointNative(output, a, b, p);
		}

		public static void ImLineClosestPoint(ref Vector2 output, Vector2 a, Vector2 b, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				ImLineClosestPointNative((Vector2*)poutput, a, b, p);
			}
		}

		internal static byte ImTriangleContainsPointNative(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, byte>)vt[759])(a, b, c, p);
		}

		public static bool ImTriangleContainsPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			byte ret = ImTriangleContainsPointNative(a, b, c, p);
			return ret != 0;
		}

		internal static void ImTriangleClosestPointNative(Vector2* output, Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, void>)vt[760])(output, a, b, c, p);
		}

		public static Vector2 ImTriangleClosestPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			Vector2 ret;
			ImTriangleClosestPointNative(&ret, a, b, c, p);
			return ret;
		}

		public static void ImTriangleClosestPoint(Vector2* output, Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			ImTriangleClosestPointNative(output, a, b, c, p);
		}

		public static void ImTriangleClosestPoint(ref Vector2 output, Vector2 a, Vector2 b, Vector2 c, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				ImTriangleClosestPointNative((Vector2*)poutput, a, b, c, p);
			}
		}

		internal static void ImTriangleBarycentricCoordsNative(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, float* outV, float* outW)
		{
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, float*, float*, float*, void>)vt[761])(a, b, c, p, outU, outV, outW);
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, float* outV, float* outW)
		{
			ImTriangleBarycentricCoordsNative(a, b, c, p, outU, outV, outW);
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, float* outV, float* outW)
		{
			fixed (float* poutU = &outU)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, outV, outW);
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, ref float outV, float* outW)
		{
			fixed (float* poutV = &outV)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, outU, (float*)poutV, outW);
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, ref float outV, float* outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutV = &outV)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, (float*)poutV, outW);
				}
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, float* outV, ref float outW)
		{
			fixed (float* poutW = &outW)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, outU, outV, (float*)poutW);
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, float* outV, ref float outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutW = &outW)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, outV, (float*)poutW);
				}
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* outU, ref float outV, ref float outW)
		{
			fixed (float* poutV = &outV)
			{
				fixed (float* poutW = &outW)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, outU, (float*)poutV, (float*)poutW);
				}
			}
		}

		public static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, ref float outU, ref float outV, ref float outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutV = &outV)
				{
					fixed (float* poutW = &outW)
					{
						ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, (float*)poutV, (float*)poutW);
					}
				}
			}
		}

		internal static float ImTriangleAreaNative(Vector2 a, Vector2 b, Vector2 c)
		{
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, float>)vt[762])(a, b, c);
		}

		public static float ImTriangleArea(Vector2 a, Vector2 b, Vector2 c)
		{
			float ret = ImTriangleAreaNative(a, b, c);
			return ret;
		}

		internal static byte ImTriangleIsClockwiseNative(Vector2 a, Vector2 b, Vector2 c)
		{
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, byte>)vt[763])(a, b, c);
		}

		public static bool ImTriangleIsClockwise(Vector2 a, Vector2 b, Vector2 c)
		{
			byte ret = ImTriangleIsClockwiseNative(a, b, c);
			return ret != 0;
		}

		internal static ImVec1* ImVec1ImVec1NilNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImVec1*>)vt[764])();
		}

		public static ImVec1Ptr ImVec1ImVec1Nil()
		{
			ImVec1Ptr ret = ImVec1ImVec1NilNative();
			return ret;
		}

		internal static void ImVec1DestroyNative(ImVec1* self)
		{
			((delegate* unmanaged[Cdecl]<ImVec1*, void>)vt[765])(self);
		}

		public static void ImVec1Destroy(ImVec1Ptr self)
		{
			ImVec1DestroyNative(self);
		}

		public static void ImVec1Destroy(ref ImVec1 self)
		{
			fixed (ImVec1* pself = &self)
			{
				ImVec1DestroyNative((ImVec1*)pself);
			}
		}

		internal static ImVec1* ImVec1ImVec1FloatNative(float x)
		{
			return ((delegate* unmanaged[Cdecl]<float, ImVec1*>)vt[766])(x);
		}

		public static ImVec1Ptr ImVec1ImVec1Float(float x)
		{
			ImVec1Ptr ret = ImVec1ImVec1FloatNative(x);
			return ret;
		}

		internal static ImVec2ih* ImVec2ihImVec2ihNilNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImVec2ih*>)vt[767])();
		}

		public static ImVec2ihPtr ImVec2ihImVec2ihNil()
		{
			ImVec2ihPtr ret = ImVec2ihImVec2ihNilNative();
			return ret;
		}

		internal static void ImVec2ihDestroyNative(ImVec2ih* self)
		{
			((delegate* unmanaged[Cdecl]<ImVec2ih*, void>)vt[768])(self);
		}

		public static void ImVec2ihDestroy(ImVec2ihPtr self)
		{
			ImVec2ihDestroyNative(self);
		}

		public static void ImVec2ihDestroy(ref ImVec2ih self)
		{
			fixed (ImVec2ih* pself = &self)
			{
				ImVec2ihDestroyNative((ImVec2ih*)pself);
			}
		}

		internal static ImVec2ih* ImVec2ihImVec2ihShortNative(short x, short y)
		{
			return ((delegate* unmanaged[Cdecl]<short, short, ImVec2ih*>)vt[769])(x, y);
		}

		public static ImVec2ihPtr ImVec2ihImVec2ihShort(short x, short y)
		{
			ImVec2ihPtr ret = ImVec2ihImVec2ihShortNative(x, y);
			return ret;
		}

		internal static ImVec2ih* ImVec2ihImVec2ihVec2Native(Vector2 rhs)
		{
			return ((delegate* unmanaged[Cdecl]<Vector2, ImVec2ih*>)vt[770])(rhs);
		}

		public static ImVec2ihPtr ImVec2ihImVec2ihVec2(Vector2 rhs)
		{
			ImVec2ihPtr ret = ImVec2ihImVec2ihVec2Native(rhs);
			return ret;
		}

		internal static ImRect* ImRectImRectNilNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImRect*>)vt[771])();
		}

		public static ImRectPtr ImRectImRectNil()
		{
			ImRectPtr ret = ImRectImRectNilNative();
			return ret;
		}

		internal static void ImRectDestroyNative(ImRect* self)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, void>)vt[772])(self);
		}

		public static void ImRectDestroy(ImRectPtr self)
		{
			ImRectDestroyNative(self);
		}

		public static void ImRectDestroy(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectDestroyNative((ImRect*)pself);
			}
		}

		internal static ImRect* ImRectImRectVec2Native(Vector2 min, Vector2 max)
		{
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, ImRect*>)vt[773])(min, max);
		}

		public static ImRectPtr ImRectImRectVec2(Vector2 min, Vector2 max)
		{
			ImRectPtr ret = ImRectImRectVec2Native(min, max);
			return ret;
		}

		internal static ImRect* ImRectImRectVec4Native(Vector4 v)
		{
			return ((delegate* unmanaged[Cdecl]<Vector4, ImRect*>)vt[774])(v);
		}

		public static ImRectPtr ImRectImRectVec4(Vector4 v)
		{
			ImRectPtr ret = ImRectImRectVec4Native(v);
			return ret;
		}

		internal static ImRect* ImRectImRectFloatNative(float x1, float y1, float x2, float y2)
		{
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, ImRect*>)vt[775])(x1, y1, x2, y2);
		}

		public static ImRectPtr ImRectImRectFloat(float x1, float y1, float x2, float y2)
		{
			ImRectPtr ret = ImRectImRectFloatNative(x1, y1, x2, y2);
			return ret;
		}

		internal static void ImRectGetCenterNative(Vector2* output, ImRect* self)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[776])(output, self);
		}

		public static Vector2 ImRectGetCenter(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetCenterNative(&ret, self);
			return ret;
		}

		public static void ImRectGetCenter(Vector2* output, ImRectPtr self)
		{
			ImRectGetCenterNative(output, self);
		}

		public static void ImRectGetCenter(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetCenterNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetCenter(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetCenterNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetCenter(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetCenterNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetCenter(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetCenterNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static void ImRectGetSizeNative(Vector2* output, ImRect* self)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[777])(output, self);
		}

		public static Vector2 ImRectGetSize(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetSizeNative(&ret, self);
			return ret;
		}

		public static void ImRectGetSize(Vector2* output, ImRectPtr self)
		{
			ImRectGetSizeNative(output, self);
		}

		public static void ImRectGetSize(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetSizeNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetSize(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetSizeNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetSize(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetSizeNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetSize(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetSizeNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static float ImRectGetWidthNative(ImRect* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[778])(self);
		}

		public static float ImRectGetWidth(ImRectPtr self)
		{
			float ret = ImRectGetWidthNative(self);
			return ret;
		}

		public static float ImRectGetWidth(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetWidthNative((ImRect*)pself);
				return ret;
			}
		}

		internal static float ImRectGetHeightNative(ImRect* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[779])(self);
		}

		public static float ImRectGetHeight(ImRectPtr self)
		{
			float ret = ImRectGetHeightNative(self);
			return ret;
		}

		public static float ImRectGetHeight(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetHeightNative((ImRect*)pself);
				return ret;
			}
		}

		internal static float ImRectGetAreaNative(ImRect* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[780])(self);
		}

		public static float ImRectGetArea(ImRectPtr self)
		{
			float ret = ImRectGetAreaNative(self);
			return ret;
		}

		public static float ImRectGetArea(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetAreaNative((ImRect*)pself);
				return ret;
			}
		}

		internal static void ImRectGetTLNative(Vector2* output, ImRect* self)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[781])(output, self);
		}

		public static Vector2 ImRectGetTL(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetTLNative(&ret, self);
			return ret;
		}

		public static void ImRectGetTL(Vector2* output, ImRectPtr self)
		{
			ImRectGetTLNative(output, self);
		}

		public static void ImRectGetTL(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetTLNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetTL(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetTL(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTLNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetTL(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTLNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static void ImRectGetTRNative(Vector2* output, ImRect* self)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[782])(output, self);
		}

		public static Vector2 ImRectGetTR(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetTRNative(&ret, self);
			return ret;
		}

		public static void ImRectGetTR(Vector2* output, ImRectPtr self)
		{
			ImRectGetTRNative(output, self);
		}

		public static void ImRectGetTR(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetTRNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetTR(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetTR(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTRNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetTR(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTRNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static void ImRectGetBLNative(Vector2* output, ImRect* self)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[783])(output, self);
		}

		public static Vector2 ImRectGetBL(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetBLNative(&ret, self);
			return ret;
		}

		public static void ImRectGetBL(Vector2* output, ImRectPtr self)
		{
			ImRectGetBLNative(output, self);
		}

		public static void ImRectGetBL(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetBLNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetBL(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetBL(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBLNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetBL(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBLNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static void ImRectGetBRNative(Vector2* output, ImRect* self)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[784])(output, self);
		}

		public static Vector2 ImRectGetBR(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetBRNative(&ret, self);
			return ret;
		}

		public static void ImRectGetBR(Vector2* output, ImRectPtr self)
		{
			ImRectGetBRNative(output, self);
		}

		public static void ImRectGetBR(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetBRNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetBR(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetBR(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBRNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetBR(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBRNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static byte ImRectContainsVec2Native(ImRect* self, Vector2 p)
		{
			return ((delegate* unmanaged[Cdecl]<ImRect*, Vector2, byte>)vt[785])(self, p);
		}

		public static bool ImRectContainsVec2(ImRectPtr self, Vector2 p)
		{
			byte ret = ImRectContainsVec2Native(self, p);
			return ret != 0;
		}

		public static bool ImRectContainsVec2(ref ImRect self, Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsVec2Native((ImRect*)pself, p);
				return ret != 0;
			}
		}

		internal static byte ImRectContainsRectNative(ImRect* self, ImRect r)
		{
			return ((delegate* unmanaged[Cdecl]<ImRect*, ImRect, byte>)vt[786])(self, r);
		}

		public static bool ImRectContainsRect(ImRectPtr self, ImRect r)
		{
			byte ret = ImRectContainsRectNative(self, r);
			return ret != 0;
		}

		public static bool ImRectContainsRect(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsRectNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		internal static byte ImRectContainsWithPadNative(ImRect* self, Vector2 p, Vector2 pad)
		{
			return ((delegate* unmanaged[Cdecl]<ImRect*, Vector2, Vector2, byte>)vt[787])(self, p, pad);
		}

		public static bool ImRectContainsWithPad(ImRectPtr self, Vector2 p, Vector2 pad)
		{
			byte ret = ImRectContainsWithPadNative(self, p, pad);
			return ret != 0;
		}

		public static bool ImRectContainsWithPad(ref ImRect self, Vector2 p, Vector2 pad)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsWithPadNative((ImRect*)pself, p, pad);
				return ret != 0;
			}
		}

		internal static byte ImRectOverlapsNative(ImRect* self, ImRect r)
		{
			return ((delegate* unmanaged[Cdecl]<ImRect*, ImRect, byte>)vt[788])(self, r);
		}

		public static bool ImRectOverlaps(ImRectPtr self, ImRect r)
		{
			byte ret = ImRectOverlapsNative(self, r);
			return ret != 0;
		}

		public static bool ImRectOverlaps(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectOverlapsNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		internal static void ImRectAddVec2Native(ImRect* self, Vector2 p)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[789])(self, p);
		}

		public static void ImRectAddVec2(ImRectPtr self, Vector2 p)
		{
			ImRectAddVec2Native(self, p);
		}

		public static void ImRectAddVec2(ref ImRect self, Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddVec2Native((ImRect*)pself, p);
			}
		}

		internal static void ImRectAddRectNative(ImRect* self, ImRect r)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[790])(self, r);
		}

		public static void ImRectAddRect(ImRectPtr self, ImRect r)
		{
			ImRectAddRectNative(self, r);
		}

		public static void ImRectAddRect(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddRectNative((ImRect*)pself, r);
			}
		}

		internal static void ImRectExpandFloatNative(ImRect* self, float amount)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[791])(self, amount);
		}

		public static void ImRectExpandFloat(ImRectPtr self, float amount)
		{
			ImRectExpandFloatNative(self, amount);
		}

		public static void ImRectExpandFloat(ref ImRect self, float amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandFloatNative((ImRect*)pself, amount);
			}
		}

		internal static void ImRectExpandVec2Native(ImRect* self, Vector2 amount)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[792])(self, amount);
		}

		public static void ImRectExpandVec2(ImRectPtr self, Vector2 amount)
		{
			ImRectExpandVec2Native(self, amount);
		}

		public static void ImRectExpandVec2(ref ImRect self, Vector2 amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandVec2Native((ImRect*)pself, amount);
			}
		}

		internal static void ImRectTranslateNative(ImRect* self, Vector2 d)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[793])(self, d);
		}

		public static void ImRectTranslate(ImRectPtr self, Vector2 d)
		{
			ImRectTranslateNative(self, d);
		}

		public static void ImRectTranslate(ref ImRect self, Vector2 d)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateNative((ImRect*)pself, d);
			}
		}

		internal static void ImRectTranslateXNative(ImRect* self, float dx)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[794])(self, dx);
		}

		public static void ImRectTranslateX(ImRectPtr self, float dx)
		{
			ImRectTranslateXNative(self, dx);
		}

		public static void ImRectTranslateX(ref ImRect self, float dx)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateXNative((ImRect*)pself, dx);
			}
		}

		internal static void ImRectTranslateYNative(ImRect* self, float dy)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[795])(self, dy);
		}

		public static void ImRectTranslateY(ImRectPtr self, float dy)
		{
			ImRectTranslateYNative(self, dy);
		}

		public static void ImRectTranslateY(ref ImRect self, float dy)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateYNative((ImRect*)pself, dy);
			}
		}

		internal static void ImRectClipWithNative(ImRect* self, ImRect r)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[796])(self, r);
		}

		public static void ImRectClipWith(ImRectPtr self, ImRect r)
		{
			ImRectClipWithNative(self, r);
		}

		public static void ImRectClipWith(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithNative((ImRect*)pself, r);
			}
		}

		internal static void ImRectClipWithFullNative(ImRect* self, ImRect r)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[797])(self, r);
		}

		public static void ImRectClipWithFull(ImRectPtr self, ImRect r)
		{
			ImRectClipWithFullNative(self, r);
		}

		public static void ImRectClipWithFull(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithFullNative((ImRect*)pself, r);
			}
		}

		internal static void ImRectFloorNative(ImRect* self)
		{
			((delegate* unmanaged[Cdecl]<ImRect*, void>)vt[798])(self);
		}

		public static void ImRectFloor(ImRectPtr self)
		{
			ImRectFloorNative(self);
		}

		public static void ImRectFloor(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectFloorNative((ImRect*)pself);
			}
		}

		internal static byte ImRectIsInvertedNative(ImRect* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImRect*, byte>)vt[799])(self);
		}

		public static bool ImRectIsInverted(ImRectPtr self)
		{
			byte ret = ImRectIsInvertedNative(self);
			return ret != 0;
		}

		public static bool ImRectIsInverted(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectIsInvertedNative((ImRect*)pself);
				return ret != 0;
			}
		}

		internal static void ImRectToVec4Native(Vector4* output, ImRect* self)
		{
			((delegate* unmanaged[Cdecl]<Vector4*, ImRect*, void>)vt[800])(output, self);
		}

		public static Vector4 ImRectToVec4(ImRectPtr self)
		{
			Vector4 ret;
			ImRectToVec4Native(&ret, self);
			return ret;
		}

		public static void ImRectToVec4(Vector4* output, ImRectPtr self)
		{
			ImRectToVec4Native(output, self);
		}

		public static void ImRectToVec4(ref Vector4 output, ImRectPtr self)
		{
			fixed (Vector4* poutput = &output)
			{
				ImRectToVec4Native((Vector4*)poutput, self);
			}
		}

		public static Vector4 ImRectToVec4(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector4 ret;
				ImRectToVec4Native(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectToVec4(Vector4* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectToVec4Native(output, (ImRect*)pself);
			}
		}

		public static void ImRectToVec4(ref Vector4 output, ref ImRect self)
		{
			fixed (Vector4* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectToVec4Native((Vector4*)poutput, (ImRect*)pself);
				}
			}
		}

		internal static nuint ImBitArrayGetStorageSizeInBytesNative(int bitcount)
		{
			return ((delegate* unmanaged[Cdecl]<int, nuint>)vt[801])(bitcount);
		}

		public static nuint ImBitArrayGetStorageSizeInBytes(int bitcount)
		{
			nuint ret = ImBitArrayGetStorageSizeInBytesNative(bitcount);
			return ret;
		}

		internal static void ImBitArrayClearAllBitsNative(uint* arr, int bitcount)
		{
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[802])(arr, bitcount);
		}

		public static void ImBitArrayClearAllBits(uint* arr, int bitcount)
		{
			ImBitArrayClearAllBitsNative(arr, bitcount);
		}

		public static void ImBitArrayClearAllBits(ref uint arr, int bitcount)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearAllBitsNative((uint*)parr, bitcount);
			}
		}

		internal static byte ImBitArrayTestBitNative(uint* arr, int n)
		{
			return ((delegate* unmanaged[Cdecl]<uint*, int, byte>)vt[803])(arr, n);
		}

		public static bool ImBitArrayTestBit(uint* arr, int n)
		{
			byte ret = ImBitArrayTestBitNative(arr, n);
			return ret != 0;
		}

		public static bool ImBitArrayTestBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				byte ret = ImBitArrayTestBitNative((uint*)parr, n);
				return ret != 0;
			}
		}

		internal static void ImBitArrayClearBitNative(uint* arr, int n)
		{
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[804])(arr, n);
		}

		public static void ImBitArrayClearBit(uint* arr, int n)
		{
			ImBitArrayClearBitNative(arr, n);
		}

		public static void ImBitArrayClearBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearBitNative((uint*)parr, n);
			}
		}

		internal static void ImBitArraySetBitNative(uint* arr, int n)
		{
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[805])(arr, n);
		}

		public static void ImBitArraySetBit(uint* arr, int n)
		{
			ImBitArraySetBitNative(arr, n);
		}

		public static void ImBitArraySetBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitNative((uint*)parr, n);
			}
		}

		internal static void ImBitArraySetBitRangeNative(uint* arr, int n, int n2)
		{
			((delegate* unmanaged[Cdecl]<uint*, int, int, void>)vt[806])(arr, n, n2);
		}

		public static void ImBitArraySetBitRange(uint* arr, int n, int n2)
		{
			ImBitArraySetBitRangeNative(arr, n, n2);
		}

		public static void ImBitArraySetBitRange(ref uint arr, int n, int n2)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitRangeNative((uint*)parr, n, n2);
			}
		}

		internal static void ImBitVectorCreateNative(ImBitVector* self, int sz)
		{
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[807])(self, sz);
		}

		public static void ImBitVectorCreate(ImBitVectorPtr self, int sz)
		{
			ImBitVectorCreateNative(self, sz);
		}

		public static void ImBitVectorCreate(ref ImBitVector self, int sz)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorCreateNative((ImBitVector*)pself, sz);
			}
		}

		internal static void ImBitVectorClearNative(ImBitVector* self)
		{
			((delegate* unmanaged[Cdecl]<ImBitVector*, void>)vt[808])(self);
		}

		public static void ImBitVectorClear(ImBitVectorPtr self)
		{
			ImBitVectorClearNative(self);
		}

		public static void ImBitVectorClear(ref ImBitVector self)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearNative((ImBitVector*)pself);
			}
		}

		internal static byte ImBitVectorTestBitNative(ImBitVector* self, int n)
		{
			return ((delegate* unmanaged[Cdecl]<ImBitVector*, int, byte>)vt[809])(self, n);
		}

		public static bool ImBitVectorTestBit(ImBitVectorPtr self, int n)
		{
			byte ret = ImBitVectorTestBitNative(self, n);
			return ret != 0;
		}

		public static bool ImBitVectorTestBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				byte ret = ImBitVectorTestBitNative((ImBitVector*)pself, n);
				return ret != 0;
			}
		}

		internal static void ImBitVectorSetBitNative(ImBitVector* self, int n)
		{
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[810])(self, n);
		}

		public static void ImBitVectorSetBit(ImBitVectorPtr self, int n)
		{
			ImBitVectorSetBitNative(self, n);
		}

		public static void ImBitVectorSetBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorSetBitNative((ImBitVector*)pself, n);
			}
		}

		internal static void ImBitVectorClearBitNative(ImBitVector* self, int n)
		{
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[811])(self, n);
		}

		public static void ImBitVectorClearBit(ImBitVectorPtr self, int n)
		{
			ImBitVectorClearBitNative(self, n);
		}

		public static void ImBitVectorClearBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearBitNative((ImBitVector*)pself, n);
			}
		}

		internal static void ImGuiTextIndexClearNative(ImGuiTextIndex* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, void>)vt[812])(self);
		}

		public static void ImGuiTextIndexClear(ImGuiTextIndexPtr self)
		{
			ImGuiTextIndexClearNative(self);
		}

		public static void ImGuiTextIndexClear(ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexClearNative((ImGuiTextIndex*)pself);
			}
		}

		internal static int ImGuiTextIndexSizeNative(ImGuiTextIndex* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, int>)vt[813])(self);
		}

		public static int ImGuiTextIndexSize(ImGuiTextIndexPtr self)
		{
			int ret = ImGuiTextIndexSizeNative(self);
			return ret;
		}

		public static int ImGuiTextIndexSize(ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				int ret = ImGuiTextIndexSizeNative((ImGuiTextIndex*)pself);
				return ret;
			}
		}

		internal static byte* ImGuiTextIndexGetLineBeginNative(ImGuiTextIndex* self, byte* baseValue, int n)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, byte*>)vt[814])(self, baseValue, n);
		}

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, baseValue, n);
			return ret;
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, baseValue, n));
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		internal static byte* ImGuiTextIndexGetLineEndNative(ImGuiTextIndex* self, byte* baseValue, int n)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, byte*>)vt[815])(self, baseValue, n);
		}

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			byte* ret = ImGuiTextIndexGetLineEndNative(self, baseValue, n);
			return ret;
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, baseValue, n));
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineEndNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		internal static void ImGuiTextIndexAppendNative(ImGuiTextIndex* self, byte* baseValue, int oldSize, int newSize)
		{
			((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, int, void>)vt[816])(self, baseValue, oldSize, newSize);
		}

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, byte* baseValue, int oldSize, int newSize)
		{
			ImGuiTextIndexAppendNative(self, baseValue, oldSize, newSize);
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, byte* baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, baseValue, oldSize, newSize);
			}
		}

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, ref byte baseValue, int oldSize, int newSize)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				ImGuiTextIndexAppendNative(self, (byte*)pbaseValue, oldSize, newSize);
			}
		}

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, string baseValue, int oldSize, int newSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextIndexAppendNative(self, pStr0, oldSize, newSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, ref byte baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, string baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, pStr0, oldSize, newSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		internal static ImGuiStoragePair* ImLowerBoundNative(ImGuiStoragePair* inBegin, ImGuiStoragePair* inEnd, int key)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiStoragePair*, ImGuiStoragePair*, int, ImGuiStoragePair*>)vt[817])(inBegin, inEnd, key);
		}

		public static ImGuiStoragePairPtr ImLowerBound(ImGuiStoragePairPtr inBegin, ImGuiStoragePairPtr inEnd, int key)
		{
			ImGuiStoragePairPtr ret = ImLowerBoundNative(inBegin, inEnd, key);
			return ret;
		}

		public static ImGuiStoragePairPtr ImLowerBound(ref ImGuiStoragePair inBegin, ImGuiStoragePairPtr inEnd, int key)
		{
			fixed (ImGuiStoragePair* pinBegin = &inBegin)
			{
				ImGuiStoragePairPtr ret = ImLowerBoundNative((ImGuiStoragePair*)pinBegin, inEnd, key);
				return ret;
			}
		}

		public static ImGuiStoragePairPtr ImLowerBound(ImGuiStoragePairPtr inBegin, ref ImGuiStoragePair inEnd, int key)
		{
			fixed (ImGuiStoragePair* pinEnd = &inEnd)
			{
				ImGuiStoragePairPtr ret = ImLowerBoundNative(inBegin, (ImGuiStoragePair*)pinEnd, key);
				return ret;
			}
		}

		public static ImGuiStoragePairPtr ImLowerBound(ref ImGuiStoragePair inBegin, ref ImGuiStoragePair inEnd, int key)
		{
			fixed (ImGuiStoragePair* pinBegin = &inBegin)
			{
				fixed (ImGuiStoragePair* pinEnd = &inEnd)
				{
					ImGuiStoragePairPtr ret = ImLowerBoundNative((ImGuiStoragePair*)pinBegin, (ImGuiStoragePair*)pinEnd, key);
					return ret;
				}
			}
		}

		internal static ImDrawListSharedData* ImDrawListSharedDataImDrawListSharedDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImDrawListSharedData*>)vt[818])();
		}

		public static ImDrawListSharedDataPtr ImDrawListSharedDataImDrawListSharedData()
		{
			ImDrawListSharedDataPtr ret = ImDrawListSharedDataImDrawListSharedDataNative();
			return ret;
		}

		internal static void ImDrawListSharedDataDestroyNative(ImDrawListSharedData* self)
		{
			((delegate* unmanaged[Cdecl]<ImDrawListSharedData*, void>)vt[819])(self);
		}

		public static void ImDrawListSharedDataDestroy(ImDrawListSharedDataPtr self)
		{
			ImDrawListSharedDataDestroyNative(self);
		}

		public static void ImDrawListSharedDataDestroy(ref ImDrawListSharedData self)
		{
			fixed (ImDrawListSharedData* pself = &self)
			{
				ImDrawListSharedDataDestroyNative((ImDrawListSharedData*)pself);
			}
		}

		internal static void ImDrawListSharedDataSetCircleTessellationMaxErrorNative(ImDrawListSharedData* self, float maxError)
		{
			((delegate* unmanaged[Cdecl]<ImDrawListSharedData*, float, void>)vt[820])(self, maxError);
		}

		public static void ImDrawListSharedDataSetCircleTessellationMaxError(ImDrawListSharedDataPtr self, float maxError)
		{
			ImDrawListSharedDataSetCircleTessellationMaxErrorNative(self, maxError);
		}

		public static void ImDrawListSharedDataSetCircleTessellationMaxError(ref ImDrawListSharedData self, float maxError)
		{
			fixed (ImDrawListSharedData* pself = &self)
			{
				ImDrawListSharedDataSetCircleTessellationMaxErrorNative((ImDrawListSharedData*)pself, maxError);
			}
		}

		internal static ImDrawDataBuilder* ImDrawDataBuilderImDrawDataBuilderNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImDrawDataBuilder*>)vt[821])();
		}

		public static ImDrawDataBuilderPtr ImDrawDataBuilderImDrawDataBuilder()
		{
			ImDrawDataBuilderPtr ret = ImDrawDataBuilderImDrawDataBuilderNative();
			return ret;
		}

		internal static void ImDrawDataBuilderDestroyNative(ImDrawDataBuilder* self)
		{
			((delegate* unmanaged[Cdecl]<ImDrawDataBuilder*, void>)vt[822])(self);
		}

		public static void ImDrawDataBuilderDestroy(ImDrawDataBuilderPtr self)
		{
			ImDrawDataBuilderDestroyNative(self);
		}

		public static void ImDrawDataBuilderDestroy(ref ImDrawDataBuilder self)
		{
			fixed (ImDrawDataBuilder* pself = &self)
			{
				ImDrawDataBuilderDestroyNative((ImDrawDataBuilder*)pself);
			}
		}

		internal static void* ImGuiDataVarInfoGetVarPtrNative(ImGuiDataVarInfo* self, void* parent)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiDataVarInfo*, void*, void*>)vt[823])(self, parent);
		}

		public static void* ImGuiDataVarInfoGetVarPtr(ImGuiDataVarInfoPtr self, void* parent)
		{
			void* ret = ImGuiDataVarInfoGetVarPtrNative(self, parent);
			return ret;
		}

		public static void* ImGuiDataVarInfoGetVarPtr(ref ImGuiDataVarInfo self, void* parent)
		{
			fixed (ImGuiDataVarInfo* pself = &self)
			{
				void* ret = ImGuiDataVarInfoGetVarPtrNative((ImGuiDataVarInfo*)pself, parent);
				return ret;
			}
		}

		internal static ImGuiStyleMod* ImGuiStyleModImGuiStyleModIntNative(ImGuiStyleVar idx, int v)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, int, ImGuiStyleMod*>)vt[824])(idx, v);
		}

		public static ImGuiStyleModPtr ImGuiStyleModImGuiStyleModInt(ImGuiStyleVar idx, int v)
		{
			ImGuiStyleModPtr ret = ImGuiStyleModImGuiStyleModIntNative(idx, v);
			return ret;
		}

		internal static void ImGuiStyleModDestroyNative(ImGuiStyleMod* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStyleMod*, void>)vt[825])(self);
		}

		public static void ImGuiStyleModDestroy(ImGuiStyleModPtr self)
		{
			ImGuiStyleModDestroyNative(self);
		}

		public static void ImGuiStyleModDestroy(ref ImGuiStyleMod self)
		{
			fixed (ImGuiStyleMod* pself = &self)
			{
				ImGuiStyleModDestroyNative((ImGuiStyleMod*)pself);
			}
		}

		internal static ImGuiStyleMod* ImGuiStyleModImGuiStyleModFloatNative(ImGuiStyleVar idx, float v)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, float, ImGuiStyleMod*>)vt[826])(idx, v);
		}

		public static ImGuiStyleModPtr ImGuiStyleModImGuiStyleModFloat(ImGuiStyleVar idx, float v)
		{
			ImGuiStyleModPtr ret = ImGuiStyleModImGuiStyleModFloatNative(idx, v);
			return ret;
		}

		internal static ImGuiStyleMod* ImGuiStyleModImGuiStyleModVec2Native(ImGuiStyleVar idx, Vector2 v)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, Vector2, ImGuiStyleMod*>)vt[827])(idx, v);
		}

		public static ImGuiStyleModPtr ImGuiStyleModImGuiStyleModVec2(ImGuiStyleVar idx, Vector2 v)
		{
			ImGuiStyleModPtr ret = ImGuiStyleModImGuiStyleModVec2Native(idx, v);
			return ret;
		}

		internal static ImGuiComboPreviewData* ImGuiComboPreviewDataImGuiComboPreviewDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiComboPreviewData*>)vt[828])();
		}

		public static ImGuiComboPreviewDataPtr ImGuiComboPreviewDataImGuiComboPreviewData()
		{
			ImGuiComboPreviewDataPtr ret = ImGuiComboPreviewDataImGuiComboPreviewDataNative();
			return ret;
		}

		internal static void ImGuiComboPreviewDataDestroyNative(ImGuiComboPreviewData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiComboPreviewData*, void>)vt[829])(self);
		}

		public static void ImGuiComboPreviewDataDestroy(ImGuiComboPreviewDataPtr self)
		{
			ImGuiComboPreviewDataDestroyNative(self);
		}

		public static void ImGuiComboPreviewDataDestroy(ref ImGuiComboPreviewData self)
		{
			fixed (ImGuiComboPreviewData* pself = &self)
			{
				ImGuiComboPreviewDataDestroyNative((ImGuiComboPreviewData*)pself);
			}
		}

		internal static ImGuiMenuColumns* ImGuiMenuColumnsImGuiMenuColumnsNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*>)vt[830])();
		}

		public static ImGuiMenuColumnsPtr ImGuiMenuColumnsImGuiMenuColumns()
		{
			ImGuiMenuColumnsPtr ret = ImGuiMenuColumnsImGuiMenuColumnsNative();
			return ret;
		}

		internal static void ImGuiMenuColumnsDestroyNative(ImGuiMenuColumns* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, void>)vt[831])(self);
		}

		public static void ImGuiMenuColumnsDestroy(ImGuiMenuColumnsPtr self)
		{
			ImGuiMenuColumnsDestroyNative(self);
		}

		public static void ImGuiMenuColumnsDestroy(ref ImGuiMenuColumns self)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsDestroyNative((ImGuiMenuColumns*)pself);
			}
		}

		internal static void ImGuiMenuColumnsUpdateNative(ImGuiMenuColumns* self, float spacing, byte windowReappearing)
		{
			((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, float, byte, void>)vt[832])(self, spacing, windowReappearing);
		}

		public static void ImGuiMenuColumnsUpdate(ImGuiMenuColumnsPtr self, float spacing, bool windowReappearing)
		{
			ImGuiMenuColumnsUpdateNative(self, spacing, windowReappearing ? (byte)1 : (byte)0);
		}

		public static void ImGuiMenuColumnsUpdate(ref ImGuiMenuColumns self, float spacing, bool windowReappearing)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsUpdateNative((ImGuiMenuColumns*)pself, spacing, windowReappearing ? (byte)1 : (byte)0);
			}
		}

		internal static float ImGuiMenuColumnsDeclColumnsNative(ImGuiMenuColumns* self, float wIcon, float wLabel, float wShortcut, float wMark)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, float, float, float, float, float>)vt[833])(self, wIcon, wLabel, wShortcut, wMark);
		}

		public static float ImGuiMenuColumnsDeclColumns(ImGuiMenuColumnsPtr self, float wIcon, float wLabel, float wShortcut, float wMark)
		{
			float ret = ImGuiMenuColumnsDeclColumnsNative(self, wIcon, wLabel, wShortcut, wMark);
			return ret;
		}

		public static float ImGuiMenuColumnsDeclColumns(ref ImGuiMenuColumns self, float wIcon, float wLabel, float wShortcut, float wMark)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				float ret = ImGuiMenuColumnsDeclColumnsNative((ImGuiMenuColumns*)pself, wIcon, wLabel, wShortcut, wMark);
				return ret;
			}
		}

		internal static void ImGuiMenuColumnsCalcNextTotalWidthNative(ImGuiMenuColumns* self, byte updateOffsets)
		{
			((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, byte, void>)vt[834])(self, updateOffsets);
		}

		public static void ImGuiMenuColumnsCalcNextTotalWidth(ImGuiMenuColumnsPtr self, bool updateOffsets)
		{
			ImGuiMenuColumnsCalcNextTotalWidthNative(self, updateOffsets ? (byte)1 : (byte)0);
		}

		public static void ImGuiMenuColumnsCalcNextTotalWidth(ref ImGuiMenuColumns self, bool updateOffsets)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsCalcNextTotalWidthNative((ImGuiMenuColumns*)pself, updateOffsets ? (byte)1 : (byte)0);
			}
		}

		internal static ImGuiInputTextDeactivatedState* ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedStateNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextDeactivatedState*>)vt[835])();
		}

		public static ImGuiInputTextDeactivatedStatePtr ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedState()
		{
			ImGuiInputTextDeactivatedStatePtr ret = ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedStateNative();
			return ret;
		}

		internal static void ImGuiInputTextDeactivatedStateDestroyNative(ImGuiInputTextDeactivatedState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextDeactivatedState*, void>)vt[836])(self);
		}

		public static void ImGuiInputTextDeactivatedStateDestroy(ImGuiInputTextDeactivatedStatePtr self)
		{
			ImGuiInputTextDeactivatedStateDestroyNative(self);
		}

		public static void ImGuiInputTextDeactivatedStateDestroy(ref ImGuiInputTextDeactivatedState self)
		{
			fixed (ImGuiInputTextDeactivatedState* pself = &self)
			{
				ImGuiInputTextDeactivatedStateDestroyNative((ImGuiInputTextDeactivatedState*)pself);
			}
		}

		internal static void ImGuiInputTextDeactivatedStateClearFreeMemoryNative(ImGuiInputTextDeactivatedState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextDeactivatedState*, void>)vt[837])(self);
		}

		public static void ImGuiInputTextDeactivatedStateClearFreeMemory(ImGuiInputTextDeactivatedStatePtr self)
		{
			ImGuiInputTextDeactivatedStateClearFreeMemoryNative(self);
		}

		public static void ImGuiInputTextDeactivatedStateClearFreeMemory(ref ImGuiInputTextDeactivatedState self)
		{
			fixed (ImGuiInputTextDeactivatedState* pself = &self)
			{
				ImGuiInputTextDeactivatedStateClearFreeMemoryNative((ImGuiInputTextDeactivatedState*)pself);
			}
		}

		internal static ImGuiInputTextState* ImGuiInputTextStateImGuiInputTextStateNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*>)vt[838])();
		}

		public static ImGuiInputTextStatePtr ImGuiInputTextStateImGuiInputTextState()
		{
			ImGuiInputTextStatePtr ret = ImGuiInputTextStateImGuiInputTextStateNative();
			return ret;
		}

		internal static void ImGuiInputTextStateDestroyNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[839])(self);
		}

		public static void ImGuiInputTextStateDestroy(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateDestroyNative(self);
		}

		public static void ImGuiInputTextStateDestroy(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateDestroyNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateClearTextNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[840])(self);
		}

		public static void ImGuiInputTextStateClearText(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateClearTextNative(self);
		}

		public static void ImGuiInputTextStateClearText(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearTextNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateClearFreeMemoryNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[841])(self);
		}

		public static void ImGuiInputTextStateClearFreeMemory(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateClearFreeMemoryNative(self);
		}

		public static void ImGuiInputTextStateClearFreeMemory(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearFreeMemoryNative((ImGuiInputTextState*)pself);
			}
		}

		internal static int ImGuiInputTextStateGetUndoAvailCountNative(ImGuiInputTextState* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[842])(self);
		}

		public static int ImGuiInputTextStateGetUndoAvailCount(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetUndoAvailCountNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetUndoAvailCount(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetUndoAvailCountNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static int ImGuiInputTextStateGetRedoAvailCountNative(ImGuiInputTextState* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[843])(self);
		}

		public static int ImGuiInputTextStateGetRedoAvailCount(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetRedoAvailCountNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetRedoAvailCount(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetRedoAvailCountNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static void ImGuiInputTextStateOnKeyPressedNative(ImGuiInputTextState* self, int key)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int, void>)vt[844])(self, key);
		}

		public static void ImGuiInputTextStateOnKeyPressed(ImGuiInputTextStatePtr self, int key)
		{
			ImGuiInputTextStateOnKeyPressedNative(self, key);
		}

		public static void ImGuiInputTextStateOnKeyPressed(ref ImGuiInputTextState self, int key)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateOnKeyPressedNative((ImGuiInputTextState*)pself, key);
			}
		}

		internal static void ImGuiInputTextStateCursorAnimResetNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[845])(self);
		}

		public static void ImGuiInputTextStateCursorAnimReset(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateCursorAnimResetNative(self);
		}

		public static void ImGuiInputTextStateCursorAnimReset(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateCursorAnimResetNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateCursorClampNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[846])(self);
		}

		public static void ImGuiInputTextStateCursorClamp(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateCursorClampNative(self);
		}

		public static void ImGuiInputTextStateCursorClamp(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateCursorClampNative((ImGuiInputTextState*)pself);
			}
		}

		internal static byte ImGuiInputTextStateHasSelectionNative(ImGuiInputTextState* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, byte>)vt[847])(self);
		}

		public static bool ImGuiInputTextStateHasSelection(ImGuiInputTextStatePtr self)
		{
			byte ret = ImGuiInputTextStateHasSelectionNative(self);
			return ret != 0;
		}

		public static bool ImGuiInputTextStateHasSelection(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				byte ret = ImGuiInputTextStateHasSelectionNative((ImGuiInputTextState*)pself);
				return ret != 0;
			}
		}

		internal static void ImGuiInputTextStateClearSelectionNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[848])(self);
		}

		public static void ImGuiInputTextStateClearSelection(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateClearSelectionNative(self);
		}

		public static void ImGuiInputTextStateClearSelection(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearSelectionNative((ImGuiInputTextState*)pself);
			}
		}

		internal static int ImGuiInputTextStateGetCursorPosNative(ImGuiInputTextState* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[849])(self);
		}

		public static int ImGuiInputTextStateGetCursorPos(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetCursorPosNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetCursorPos(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetCursorPosNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static int ImGuiInputTextStateGetSelectionStartNative(ImGuiInputTextState* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[850])(self);
		}

		public static int ImGuiInputTextStateGetSelectionStart(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetSelectionStartNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetSelectionStart(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetSelectionStartNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static int ImGuiInputTextStateGetSelectionEndNative(ImGuiInputTextState* self)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[851])(self);
		}

		public static int ImGuiInputTextStateGetSelectionEnd(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetSelectionEndNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetSelectionEnd(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetSelectionEndNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		internal static void ImGuiInputTextStateSelectAllNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[852])(self);
		}

		public static void ImGuiInputTextStateSelectAll(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateSelectAllNative(self);
		}

		public static void ImGuiInputTextStateSelectAll(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateSelectAllNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateReloadUserBufAndSelectAllNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[853])(self);
		}

		public static void ImGuiInputTextStateReloadUserBufAndSelectAll(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateReloadUserBufAndSelectAllNative(self);
		}

		public static void ImGuiInputTextStateReloadUserBufAndSelectAll(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateReloadUserBufAndSelectAllNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateReloadUserBufAndKeepSelectionNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[854])(self);
		}

		public static void ImGuiInputTextStateReloadUserBufAndKeepSelection(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateReloadUserBufAndKeepSelectionNative(self);
		}

		public static void ImGuiInputTextStateReloadUserBufAndKeepSelection(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateReloadUserBufAndKeepSelectionNative((ImGuiInputTextState*)pself);
			}
		}

		internal static void ImGuiInputTextStateReloadUserBufAndMoveToEndNative(ImGuiInputTextState* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[855])(self);
		}

		public static void ImGuiInputTextStateReloadUserBufAndMoveToEnd(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateReloadUserBufAndMoveToEndNative(self);
		}

		public static void ImGuiInputTextStateReloadUserBufAndMoveToEnd(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateReloadUserBufAndMoveToEndNative((ImGuiInputTextState*)pself);
			}
		}

		internal static ImGuiNextWindowData* ImGuiNextWindowDataImGuiNextWindowDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiNextWindowData*>)vt[856])();
		}

		public static ImGuiNextWindowDataPtr ImGuiNextWindowDataImGuiNextWindowData()
		{
			ImGuiNextWindowDataPtr ret = ImGuiNextWindowDataImGuiNextWindowDataNative();
			return ret;
		}

		internal static void ImGuiNextWindowDataDestroyNative(ImGuiNextWindowData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiNextWindowData*, void>)vt[857])(self);
		}

		public static void ImGuiNextWindowDataDestroy(ImGuiNextWindowDataPtr self)
		{
			ImGuiNextWindowDataDestroyNative(self);
		}

		public static void ImGuiNextWindowDataDestroy(ref ImGuiNextWindowData self)
		{
			fixed (ImGuiNextWindowData* pself = &self)
			{
				ImGuiNextWindowDataDestroyNative((ImGuiNextWindowData*)pself);
			}
		}

		internal static void ImGuiNextWindowDataClearFlagsNative(ImGuiNextWindowData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiNextWindowData*, void>)vt[858])(self);
		}

		public static void ImGuiNextWindowDataClearFlags(ImGuiNextWindowDataPtr self)
		{
			ImGuiNextWindowDataClearFlagsNative(self);
		}

		public static void ImGuiNextWindowDataClearFlags(ref ImGuiNextWindowData self)
		{
			fixed (ImGuiNextWindowData* pself = &self)
			{
				ImGuiNextWindowDataClearFlagsNative((ImGuiNextWindowData*)pself);
			}
		}

		internal static ImGuiNextItemData* ImGuiNextItemDataImGuiNextItemDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiNextItemData*>)vt[859])();
		}

		public static ImGuiNextItemDataPtr ImGuiNextItemDataImGuiNextItemData()
		{
			ImGuiNextItemDataPtr ret = ImGuiNextItemDataImGuiNextItemDataNative();
			return ret;
		}

		internal static void ImGuiNextItemDataDestroyNative(ImGuiNextItemData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiNextItemData*, void>)vt[860])(self);
		}

		public static void ImGuiNextItemDataDestroy(ImGuiNextItemDataPtr self)
		{
			ImGuiNextItemDataDestroyNative(self);
		}

		public static void ImGuiNextItemDataDestroy(ref ImGuiNextItemData self)
		{
			fixed (ImGuiNextItemData* pself = &self)
			{
				ImGuiNextItemDataDestroyNative((ImGuiNextItemData*)pself);
			}
		}

		internal static void ImGuiNextItemDataClearFlagsNative(ImGuiNextItemData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiNextItemData*, void>)vt[861])(self);
		}

		public static void ImGuiNextItemDataClearFlags(ImGuiNextItemDataPtr self)
		{
			ImGuiNextItemDataClearFlagsNative(self);
		}

		public static void ImGuiNextItemDataClearFlags(ref ImGuiNextItemData self)
		{
			fixed (ImGuiNextItemData* pself = &self)
			{
				ImGuiNextItemDataClearFlagsNative((ImGuiNextItemData*)pself);
			}
		}

		internal static ImGuiLastItemData* ImGuiLastItemDataImGuiLastItemDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiLastItemData*>)vt[862])();
		}

		public static ImGuiLastItemDataPtr ImGuiLastItemDataImGuiLastItemData()
		{
			ImGuiLastItemDataPtr ret = ImGuiLastItemDataImGuiLastItemDataNative();
			return ret;
		}

		internal static void ImGuiLastItemDataDestroyNative(ImGuiLastItemData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiLastItemData*, void>)vt[863])(self);
		}

		public static void ImGuiLastItemDataDestroy(ImGuiLastItemDataPtr self)
		{
			ImGuiLastItemDataDestroyNative(self);
		}

		public static void ImGuiLastItemDataDestroy(ref ImGuiLastItemData self)
		{
			fixed (ImGuiLastItemData* pself = &self)
			{
				ImGuiLastItemDataDestroyNative((ImGuiLastItemData*)pself);
			}
		}

		internal static ImGuiStackSizes* ImGuiStackSizesImGuiStackSizesNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiStackSizes*>)vt[864])();
		}

		public static ImGuiStackSizesPtr ImGuiStackSizesImGuiStackSizes()
		{
			ImGuiStackSizesPtr ret = ImGuiStackSizesImGuiStackSizesNative();
			return ret;
		}

		internal static void ImGuiStackSizesDestroyNative(ImGuiStackSizes* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStackSizes*, void>)vt[865])(self);
		}

		public static void ImGuiStackSizesDestroy(ImGuiStackSizesPtr self)
		{
			ImGuiStackSizesDestroyNative(self);
		}

		public static void ImGuiStackSizesDestroy(ref ImGuiStackSizes self)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiStackSizesDestroyNative((ImGuiStackSizes*)pself);
			}
		}

		internal static void ImGuiStackSizesSetToContextStateNative(ImGuiStackSizes* self, ImGuiContext* ctx)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStackSizes*, ImGuiContext*, void>)vt[866])(self, ctx);
		}

		public static void ImGuiStackSizesSetToContextState(ImGuiStackSizesPtr self, ImGuiContextPtr ctx)
		{
			ImGuiStackSizesSetToContextStateNative(self, ctx);
		}

		public static void ImGuiStackSizesSetToContextState(ref ImGuiStackSizes self, ImGuiContextPtr ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiStackSizesSetToContextStateNative((ImGuiStackSizes*)pself, ctx);
			}
		}

		public static void ImGuiStackSizesSetToContextState(ImGuiStackSizesPtr self, ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiStackSizesSetToContextStateNative(self, (ImGuiContext*)pctx);
			}
		}

		public static void ImGuiStackSizesSetToContextState(ref ImGuiStackSizes self, ref ImGuiContext ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				fixed (ImGuiContext* pctx = &ctx)
				{
					ImGuiStackSizesSetToContextStateNative((ImGuiStackSizes*)pself, (ImGuiContext*)pctx);
				}
			}
		}

		internal static void ImGuiStackSizesCompareWithContextStateNative(ImGuiStackSizes* self, ImGuiContext* ctx)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStackSizes*, ImGuiContext*, void>)vt[867])(self, ctx);
		}

		public static void ImGuiStackSizesCompareWithContextState(ImGuiStackSizesPtr self, ImGuiContextPtr ctx)
		{
			ImGuiStackSizesCompareWithContextStateNative(self, ctx);
		}

		public static void ImGuiStackSizesCompareWithContextState(ref ImGuiStackSizes self, ImGuiContextPtr ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiStackSizesCompareWithContextStateNative((ImGuiStackSizes*)pself, ctx);
			}
		}

		public static void ImGuiStackSizesCompareWithContextState(ImGuiStackSizesPtr self, ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiStackSizesCompareWithContextStateNative(self, (ImGuiContext*)pctx);
			}
		}

		public static void ImGuiStackSizesCompareWithContextState(ref ImGuiStackSizes self, ref ImGuiContext ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				fixed (ImGuiContext* pctx = &ctx)
				{
					ImGuiStackSizesCompareWithContextStateNative((ImGuiStackSizes*)pself, (ImGuiContext*)pctx);
				}
			}
		}

		internal static ImGuiPtrOrIndex* ImGuiPtrOrIndexImGuiPtrOrIndexPtrNative(void* ptr)
		{
			return ((delegate* unmanaged[Cdecl]<void*, ImGuiPtrOrIndex*>)vt[868])(ptr);
		}

		public static ImGuiPtrOrIndexPtr ImGuiPtrOrIndexImGuiPtrOrIndexPtr(void* ptr)
		{
			ImGuiPtrOrIndexPtr ret = ImGuiPtrOrIndexImGuiPtrOrIndexPtrNative(ptr);
			return ret;
		}

		internal static void ImGuiPtrOrIndexDestroyNative(ImGuiPtrOrIndex* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiPtrOrIndex*, void>)vt[869])(self);
		}

		public static void ImGuiPtrOrIndexDestroy(ImGuiPtrOrIndexPtr self)
		{
			ImGuiPtrOrIndexDestroyNative(self);
		}

		public static void ImGuiPtrOrIndexDestroy(ref ImGuiPtrOrIndex self)
		{
			fixed (ImGuiPtrOrIndex* pself = &self)
			{
				ImGuiPtrOrIndexDestroyNative((ImGuiPtrOrIndex*)pself);
			}
		}

		internal static ImGuiPtrOrIndex* ImGuiPtrOrIndexImGuiPtrOrIndexIntNative(int index)
		{
			return ((delegate* unmanaged[Cdecl]<int, ImGuiPtrOrIndex*>)vt[870])(index);
		}

		public static ImGuiPtrOrIndexPtr ImGuiPtrOrIndexImGuiPtrOrIndexInt(int index)
		{
			ImGuiPtrOrIndexPtr ret = ImGuiPtrOrIndexImGuiPtrOrIndexIntNative(index);
			return ret;
		}

		internal static ImGuiPopupData* ImGuiPopupDataImGuiPopupDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiPopupData*>)vt[871])();
		}

		public static ImGuiPopupDataPtr ImGuiPopupDataImGuiPopupData()
		{
			ImGuiPopupDataPtr ret = ImGuiPopupDataImGuiPopupDataNative();
			return ret;
		}

		internal static void ImGuiPopupDataDestroyNative(ImGuiPopupData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiPopupData*, void>)vt[872])(self);
		}

		public static void ImGuiPopupDataDestroy(ImGuiPopupDataPtr self)
		{
			ImGuiPopupDataDestroyNative(self);
		}

		public static void ImGuiPopupDataDestroy(ref ImGuiPopupData self)
		{
			fixed (ImGuiPopupData* pself = &self)
			{
				ImGuiPopupDataDestroyNative((ImGuiPopupData*)pself);
			}
		}

		internal static ImGuiInputEvent* ImGuiInputEventImGuiInputEventNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiInputEvent*>)vt[873])();
		}

		public static ImGuiInputEventPtr ImGuiInputEventImGuiInputEvent()
		{
			ImGuiInputEventPtr ret = ImGuiInputEventImGuiInputEventNative();
			return ret;
		}

		internal static void ImGuiInputEventDestroyNative(ImGuiInputEvent* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiInputEvent*, void>)vt[874])(self);
		}

		public static void ImGuiInputEventDestroy(ImGuiInputEventPtr self)
		{
			ImGuiInputEventDestroyNative(self);
		}

		public static void ImGuiInputEventDestroy(ref ImGuiInputEvent self)
		{
			fixed (ImGuiInputEvent* pself = &self)
			{
				ImGuiInputEventDestroyNative((ImGuiInputEvent*)pself);
			}
		}

		internal static ImGuiKeyRoutingData* ImGuiKeyRoutingDataImGuiKeyRoutingDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingData*>)vt[875])();
		}

		public static ImGuiKeyRoutingDataPtr ImGuiKeyRoutingDataImGuiKeyRoutingData()
		{
			ImGuiKeyRoutingDataPtr ret = ImGuiKeyRoutingDataImGuiKeyRoutingDataNative();
			return ret;
		}

		internal static void ImGuiKeyRoutingDataDestroyNative(ImGuiKeyRoutingData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingData*, void>)vt[876])(self);
		}

		public static void ImGuiKeyRoutingDataDestroy(ImGuiKeyRoutingDataPtr self)
		{
			ImGuiKeyRoutingDataDestroyNative(self);
		}

		public static void ImGuiKeyRoutingDataDestroy(ref ImGuiKeyRoutingData self)
		{
			fixed (ImGuiKeyRoutingData* pself = &self)
			{
				ImGuiKeyRoutingDataDestroyNative((ImGuiKeyRoutingData*)pself);
			}
		}

		internal static ImGuiKeyRoutingTable* ImGuiKeyRoutingTableImGuiKeyRoutingTableNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingTable*>)vt[877])();
		}

		public static ImGuiKeyRoutingTablePtr ImGuiKeyRoutingTableImGuiKeyRoutingTable()
		{
			ImGuiKeyRoutingTablePtr ret = ImGuiKeyRoutingTableImGuiKeyRoutingTableNative();
			return ret;
		}

		internal static void ImGuiKeyRoutingTableDestroyNative(ImGuiKeyRoutingTable* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingTable*, void>)vt[878])(self);
		}

		public static void ImGuiKeyRoutingTableDestroy(ImGuiKeyRoutingTablePtr self)
		{
			ImGuiKeyRoutingTableDestroyNative(self);
		}

		public static void ImGuiKeyRoutingTableDestroy(ref ImGuiKeyRoutingTable self)
		{
			fixed (ImGuiKeyRoutingTable* pself = &self)
			{
				ImGuiKeyRoutingTableDestroyNative((ImGuiKeyRoutingTable*)pself);
			}
		}

		internal static void ImGuiKeyRoutingTableClearNative(ImGuiKeyRoutingTable* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiKeyRoutingTable*, void>)vt[879])(self);
		}

		public static void ImGuiKeyRoutingTableClear(ImGuiKeyRoutingTablePtr self)
		{
			ImGuiKeyRoutingTableClearNative(self);
		}

		public static void ImGuiKeyRoutingTableClear(ref ImGuiKeyRoutingTable self)
		{
			fixed (ImGuiKeyRoutingTable* pself = &self)
			{
				ImGuiKeyRoutingTableClearNative((ImGuiKeyRoutingTable*)pself);
			}
		}

		internal static ImGuiKeyOwnerData* ImGuiKeyOwnerDataImGuiKeyOwnerDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiKeyOwnerData*>)vt[880])();
		}

		public static ImGuiKeyOwnerDataPtr ImGuiKeyOwnerDataImGuiKeyOwnerData()
		{
			ImGuiKeyOwnerDataPtr ret = ImGuiKeyOwnerDataImGuiKeyOwnerDataNative();
			return ret;
		}

		internal static void ImGuiKeyOwnerDataDestroyNative(ImGuiKeyOwnerData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiKeyOwnerData*, void>)vt[881])(self);
		}

		public static void ImGuiKeyOwnerDataDestroy(ImGuiKeyOwnerDataPtr self)
		{
			ImGuiKeyOwnerDataDestroyNative(self);
		}

		public static void ImGuiKeyOwnerDataDestroy(ref ImGuiKeyOwnerData self)
		{
			fixed (ImGuiKeyOwnerData* pself = &self)
			{
				ImGuiKeyOwnerDataDestroyNative((ImGuiKeyOwnerData*)pself);
			}
		}

		internal static ImGuiListClipperRange ImGuiListClipperRangeFromIndicesNative(int min, int max)
		{
			return ((delegate* unmanaged[Cdecl]<int, int, ImGuiListClipperRange>)vt[882])(min, max);
		}

		public static ImGuiListClipperRange ImGuiListClipperRangeFromIndices(int min, int max)
		{
			ImGuiListClipperRange ret = ImGuiListClipperRangeFromIndicesNative(min, max);
			return ret;
		}

		internal static ImGuiListClipperRange ImGuiListClipperRangeFromPositionsNative(float y1, float y2, int offMin, int offMax)
		{
			return ((delegate* unmanaged[Cdecl]<float, float, int, int, ImGuiListClipperRange>)vt[883])(y1, y2, offMin, offMax);
		}

		public static ImGuiListClipperRange ImGuiListClipperRangeFromPositions(float y1, float y2, int offMin, int offMax)
		{
			ImGuiListClipperRange ret = ImGuiListClipperRangeFromPositionsNative(y1, y2, offMin, offMax);
			return ret;
		}

		internal static ImGuiListClipperData* ImGuiListClipperDataImGuiListClipperDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiListClipperData*>)vt[884])();
		}

		public static ImGuiListClipperDataPtr ImGuiListClipperDataImGuiListClipperData()
		{
			ImGuiListClipperDataPtr ret = ImGuiListClipperDataImGuiListClipperDataNative();
			return ret;
		}

		internal static void ImGuiListClipperDataDestroyNative(ImGuiListClipperData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiListClipperData*, void>)vt[885])(self);
		}

		public static void ImGuiListClipperDataDestroy(ImGuiListClipperDataPtr self)
		{
			ImGuiListClipperDataDestroyNative(self);
		}

		public static void ImGuiListClipperDataDestroy(ref ImGuiListClipperData self)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				ImGuiListClipperDataDestroyNative((ImGuiListClipperData*)pself);
			}
		}

		internal static void ImGuiListClipperDataResetNative(ImGuiListClipperData* self, ImGuiListClipper* clipper)
		{
			((delegate* unmanaged[Cdecl]<ImGuiListClipperData*, ImGuiListClipper*, void>)vt[886])(self, clipper);
		}

		public static void ImGuiListClipperDataReset(ImGuiListClipperDataPtr self, ImGuiListClipperPtr clipper)
		{
			ImGuiListClipperDataResetNative(self, clipper);
		}

		public static void ImGuiListClipperDataReset(ref ImGuiListClipperData self, ImGuiListClipperPtr clipper)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				ImGuiListClipperDataResetNative((ImGuiListClipperData*)pself, clipper);
			}
		}

		public static void ImGuiListClipperDataReset(ImGuiListClipperDataPtr self, ref ImGuiListClipper clipper)
		{
			fixed (ImGuiListClipper* pclipper = &clipper)
			{
				ImGuiListClipperDataResetNative(self, (ImGuiListClipper*)pclipper);
			}
		}

		public static void ImGuiListClipperDataReset(ref ImGuiListClipperData self, ref ImGuiListClipper clipper)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				fixed (ImGuiListClipper* pclipper = &clipper)
				{
					ImGuiListClipperDataResetNative((ImGuiListClipperData*)pself, (ImGuiListClipper*)pclipper);
				}
			}
		}

		internal static ImGuiNavItemData* ImGuiNavItemDataImGuiNavItemDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiNavItemData*>)vt[887])();
		}

		public static ImGuiNavItemDataPtr ImGuiNavItemDataImGuiNavItemData()
		{
			ImGuiNavItemDataPtr ret = ImGuiNavItemDataImGuiNavItemDataNative();
			return ret;
		}

		internal static void ImGuiNavItemDataDestroyNative(ImGuiNavItemData* self)
		{
			((delegate* unmanaged[Cdecl]<ImGuiNavItemData*, void>)vt[888])(self);
		}
	}
}
