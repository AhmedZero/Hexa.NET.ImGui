// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		[LibraryImport(LibName, EntryPoint = "ImRect_ImRect_Nil")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImRect* ImRectImRectNilNative();

		public static ImRectPtr ImRectImRectNil()
		{
			ImRectPtr ret = ImRectImRectNilNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectDestroyNative(ImRect* self);

		public static void ImRectDestroy(ImRectPtr self)
		{
			ImRectDestroyNative(self);
		}

		public static void ImRectDestroy(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectDestroyNative((ImRect*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_ImRect_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImRect* ImRectImRectVec2Native(Vector2 min, Vector2 max);

		public static ImRectPtr ImRectImRectVec2(Vector2 min, Vector2 max)
		{
			ImRectPtr ret = ImRectImRectVec2Native(min, max);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_ImRect_Vec4")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImRect* ImRectImRectVec4Native(Vector4 v);

		public static ImRectPtr ImRectImRectVec4(Vector4 v)
		{
			ImRectPtr ret = ImRectImRectVec4Native(v);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_ImRect_Float")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImRect* ImRectImRectFloatNative(float x1, float y1, float x2, float y2);

		public static ImRectPtr ImRectImRectFloat(float x1, float y1, float x2, float y2)
		{
			ImRectPtr ret = ImRectImRectFloatNative(x1, y1, x2, y2);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_GetCenter")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectGetCenterNative(Vector2* output, ImRect* self);

		public static Vector2 ImRectGetCenter(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetCenterNative(&ret, self);
			return ret;
		}

		public static void ImRectGetCenter(Vector2* output, ImRectPtr self)
		{
			ImRectGetCenterNative(output, self);
		}

		public static void ImRectGetCenter(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetCenterNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetCenter(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetCenterNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetCenter(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetCenterNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetCenter(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetCenterNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_GetSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectGetSizeNative(Vector2* output, ImRect* self);

		public static Vector2 ImRectGetSize(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetSizeNative(&ret, self);
			return ret;
		}

		public static void ImRectGetSize(Vector2* output, ImRectPtr self)
		{
			ImRectGetSizeNative(output, self);
		}

		public static void ImRectGetSize(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetSizeNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetSize(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetSizeNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetSize(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetSizeNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetSize(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetSizeNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_GetWidth")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImRectGetWidthNative(ImRect* self);

		public static float ImRectGetWidth(ImRectPtr self)
		{
			float ret = ImRectGetWidthNative(self);
			return ret;
		}

		public static float ImRectGetWidth(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetWidthNative((ImRect*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_GetHeight")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImRectGetHeightNative(ImRect* self);

		public static float ImRectGetHeight(ImRectPtr self)
		{
			float ret = ImRectGetHeightNative(self);
			return ret;
		}

		public static float ImRectGetHeight(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetHeightNative((ImRect*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_GetArea")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImRectGetAreaNative(ImRect* self);

		public static float ImRectGetArea(ImRectPtr self)
		{
			float ret = ImRectGetAreaNative(self);
			return ret;
		}

		public static float ImRectGetArea(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetAreaNative((ImRect*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_GetTL")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectGetTLNative(Vector2* output, ImRect* self);

		public static Vector2 ImRectGetTL(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetTLNative(&ret, self);
			return ret;
		}

		public static void ImRectGetTL(Vector2* output, ImRectPtr self)
		{
			ImRectGetTLNative(output, self);
		}

		public static void ImRectGetTL(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetTLNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetTL(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetTL(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTLNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetTL(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTLNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_GetTR")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectGetTRNative(Vector2* output, ImRect* self);

		public static Vector2 ImRectGetTR(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetTRNative(&ret, self);
			return ret;
		}

		public static void ImRectGetTR(Vector2* output, ImRectPtr self)
		{
			ImRectGetTRNative(output, self);
		}

		public static void ImRectGetTR(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetTRNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetTR(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetTR(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTRNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetTR(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTRNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_GetBL")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectGetBLNative(Vector2* output, ImRect* self);

		public static Vector2 ImRectGetBL(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetBLNative(&ret, self);
			return ret;
		}

		public static void ImRectGetBL(Vector2* output, ImRectPtr self)
		{
			ImRectGetBLNative(output, self);
		}

		public static void ImRectGetBL(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetBLNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetBL(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetBL(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBLNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetBL(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBLNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_GetBR")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectGetBRNative(Vector2* output, ImRect* self);

		public static Vector2 ImRectGetBR(ImRectPtr self)
		{
			Vector2 ret;
			ImRectGetBRNative(&ret, self);
			return ret;
		}

		public static void ImRectGetBR(Vector2* output, ImRectPtr self)
		{
			ImRectGetBRNative(output, self);
		}

		public static void ImRectGetBR(ref Vector2 output, ImRectPtr self)
		{
			fixed (Vector2* poutput = &output)
			{
				ImRectGetBRNative((Vector2*)poutput, self);
			}
		}

		public static Vector2 ImRectGetBR(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectGetBR(Vector2* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBRNative(output, (ImRect*)pself);
			}
		}

		public static void ImRectGetBR(ref Vector2 output, ref ImRect self)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBRNative((Vector2*)poutput, (ImRect*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_Contains_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImRectContainsVec2Native(ImRect* self, Vector2 p);

		public static bool ImRectContainsVec2(ImRectPtr self, Vector2 p)
		{
			byte ret = ImRectContainsVec2Native(self, p);
			return ret != 0;
		}

		public static bool ImRectContainsVec2(ref ImRect self, Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsVec2Native((ImRect*)pself, p);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_Contains_Rect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImRectContainsRectNative(ImRect* self, ImRect r);

		public static bool ImRectContainsRect(ImRectPtr self, ImRect r)
		{
			byte ret = ImRectContainsRectNative(self, r);
			return ret != 0;
		}

		public static bool ImRectContainsRect(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsRectNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_Overlaps")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImRectOverlapsNative(ImRect* self, ImRect r);

		public static bool ImRectOverlaps(ImRectPtr self, ImRect r)
		{
			byte ret = ImRectOverlapsNative(self, r);
			return ret != 0;
		}

		public static bool ImRectOverlaps(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectOverlapsNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_Add_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectAddVec2Native(ImRect* self, Vector2 p);

		public static void ImRectAddVec2(ImRectPtr self, Vector2 p)
		{
			ImRectAddVec2Native(self, p);
		}

		public static void ImRectAddVec2(ref ImRect self, Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddVec2Native((ImRect*)pself, p);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_Add_Rect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectAddRectNative(ImRect* self, ImRect r);

		public static void ImRectAddRect(ImRectPtr self, ImRect r)
		{
			ImRectAddRectNative(self, r);
		}

		public static void ImRectAddRect(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddRectNative((ImRect*)pself, r);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_Expand_Float")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectExpandFloatNative(ImRect* self, float amount);

		public static void ImRectExpandFloat(ImRectPtr self, float amount)
		{
			ImRectExpandFloatNative(self, amount);
		}

		public static void ImRectExpandFloat(ref ImRect self, float amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandFloatNative((ImRect*)pself, amount);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_Expand_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectExpandVec2Native(ImRect* self, Vector2 amount);

		public static void ImRectExpandVec2(ImRectPtr self, Vector2 amount)
		{
			ImRectExpandVec2Native(self, amount);
		}

		public static void ImRectExpandVec2(ref ImRect self, Vector2 amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandVec2Native((ImRect*)pself, amount);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_Translate")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectTranslateNative(ImRect* self, Vector2 d);

		public static void ImRectTranslate(ImRectPtr self, Vector2 d)
		{
			ImRectTranslateNative(self, d);
		}

		public static void ImRectTranslate(ref ImRect self, Vector2 d)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateNative((ImRect*)pself, d);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_TranslateX")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectTranslateXNative(ImRect* self, float dx);

		public static void ImRectTranslateX(ImRectPtr self, float dx)
		{
			ImRectTranslateXNative(self, dx);
		}

		public static void ImRectTranslateX(ref ImRect self, float dx)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateXNative((ImRect*)pself, dx);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_TranslateY")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectTranslateYNative(ImRect* self, float dy);

		public static void ImRectTranslateY(ImRectPtr self, float dy)
		{
			ImRectTranslateYNative(self, dy);
		}

		public static void ImRectTranslateY(ref ImRect self, float dy)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateYNative((ImRect*)pself, dy);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_ClipWith")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectClipWithNative(ImRect* self, ImRect r);

		public static void ImRectClipWith(ImRectPtr self, ImRect r)
		{
			ImRectClipWithNative(self, r);
		}

		public static void ImRectClipWith(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithNative((ImRect*)pself, r);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_ClipWithFull")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectClipWithFullNative(ImRect* self, ImRect r);

		public static void ImRectClipWithFull(ImRectPtr self, ImRect r)
		{
			ImRectClipWithFullNative(self, r);
		}

		public static void ImRectClipWithFull(ref ImRect self, ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithFullNative((ImRect*)pself, r);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_Floor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectFloorNative(ImRect* self);

		public static void ImRectFloor(ImRectPtr self)
		{
			ImRectFloorNative(self);
		}

		public static void ImRectFloor(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectFloorNative((ImRect*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_IsInverted")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImRectIsInvertedNative(ImRect* self);

		public static bool ImRectIsInverted(ImRectPtr self)
		{
			byte ret = ImRectIsInvertedNative(self);
			return ret != 0;
		}

		public static bool ImRectIsInverted(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectIsInvertedNative((ImRect*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImRect_ToVec4")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImRectToVec4Native(Vector4* output, ImRect* self);

		public static Vector4 ImRectToVec4(ImRectPtr self)
		{
			Vector4 ret;
			ImRectToVec4Native(&ret, self);
			return ret;
		}

		public static void ImRectToVec4(Vector4* output, ImRectPtr self)
		{
			ImRectToVec4Native(output, self);
		}

		public static void ImRectToVec4(ref Vector4 output, ImRectPtr self)
		{
			fixed (Vector4* poutput = &output)
			{
				ImRectToVec4Native((Vector4*)poutput, self);
			}
		}

		public static Vector4 ImRectToVec4(ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector4 ret;
				ImRectToVec4Native(&ret, (ImRect*)pself);
				return ret;
			}
		}

		public static void ImRectToVec4(Vector4* output, ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectToVec4Native(output, (ImRect*)pself);
			}
		}

		public static void ImRectToVec4(ref Vector4 output, ref ImRect self)
		{
			fixed (Vector4* poutput = &output)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectToVec4Native((Vector4*)poutput, (ImRect*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImBitArrayGetStorageSizeInBytes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial nuint ImBitArrayGetStorageSizeInBytesNative(int bitcount);

		public static nuint ImBitArrayGetStorageSizeInBytes(int bitcount)
		{
			nuint ret = ImBitArrayGetStorageSizeInBytesNative(bitcount);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "igImBitArrayClearAllBits")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImBitArrayClearAllBitsNative(uint* arr, int bitcount);

		public static void ImBitArrayClearAllBits(uint* arr, int bitcount)
		{
			ImBitArrayClearAllBitsNative(arr, bitcount);
		}

		public static void ImBitArrayClearAllBits(ref uint arr, int bitcount)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearAllBitsNative((uint*)parr, bitcount);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImBitArrayTestBit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImBitArrayTestBitNative(uint* arr, int n);

		public static bool ImBitArrayTestBit(uint* arr, int n)
		{
			byte ret = ImBitArrayTestBitNative(arr, n);
			return ret != 0;
		}

		public static bool ImBitArrayTestBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				byte ret = ImBitArrayTestBitNative((uint*)parr, n);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImBitArrayClearBit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImBitArrayClearBitNative(uint* arr, int n);

		public static void ImBitArrayClearBit(uint* arr, int n)
		{
			ImBitArrayClearBitNative(arr, n);
		}

		public static void ImBitArrayClearBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearBitNative((uint*)parr, n);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImBitArraySetBit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImBitArraySetBitNative(uint* arr, int n);

		public static void ImBitArraySetBit(uint* arr, int n)
		{
			ImBitArraySetBitNative(arr, n);
		}

		public static void ImBitArraySetBit(ref uint arr, int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitNative((uint*)parr, n);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImBitArraySetBitRange")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImBitArraySetBitRangeNative(uint* arr, int n, int n2);

		public static void ImBitArraySetBitRange(uint* arr, int n, int n2)
		{
			ImBitArraySetBitRangeNative(arr, n, n2);
		}

		public static void ImBitArraySetBitRange(ref uint arr, int n, int n2)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitRangeNative((uint*)parr, n, n2);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImBitVector_Create")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImBitVectorCreateNative(ImBitVector* self, int sz);

		public static void ImBitVectorCreate(ImBitVectorPtr self, int sz)
		{
			ImBitVectorCreateNative(self, sz);
		}

		public static void ImBitVectorCreate(ref ImBitVector self, int sz)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorCreateNative((ImBitVector*)pself, sz);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImBitVector_Clear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImBitVectorClearNative(ImBitVector* self);

		public static void ImBitVectorClear(ImBitVectorPtr self)
		{
			ImBitVectorClearNative(self);
		}

		public static void ImBitVectorClear(ref ImBitVector self)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearNative((ImBitVector*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImBitVector_TestBit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImBitVectorTestBitNative(ImBitVector* self, int n);

		public static bool ImBitVectorTestBit(ImBitVectorPtr self, int n)
		{
			byte ret = ImBitVectorTestBitNative(self, n);
			return ret != 0;
		}

		public static bool ImBitVectorTestBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				byte ret = ImBitVectorTestBitNative((ImBitVector*)pself, n);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImBitVector_SetBit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImBitVectorSetBitNative(ImBitVector* self, int n);

		public static void ImBitVectorSetBit(ImBitVectorPtr self, int n)
		{
			ImBitVectorSetBitNative(self, n);
		}

		public static void ImBitVectorSetBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorSetBitNative((ImBitVector*)pself, n);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImBitVector_ClearBit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImBitVectorClearBitNative(ImBitVector* self, int n);

		public static void ImBitVectorClearBit(ImBitVectorPtr self, int n)
		{
			ImBitVectorClearBitNative(self, n);
		}

		public static void ImBitVectorClearBit(ref ImBitVector self, int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearBitNative((ImBitVector*)pself, n);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTextIndex_clear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTextIndexClearNative(ImGuiTextIndex* self);

		public static void ImGuiTextIndexClear(ImGuiTextIndexPtr self)
		{
			ImGuiTextIndexClearNative(self);
		}

		public static void ImGuiTextIndexClear(ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexClearNative((ImGuiTextIndex*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTextIndex_size")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiTextIndexSizeNative(ImGuiTextIndex* self);

		public static int ImGuiTextIndexSize(ImGuiTextIndexPtr self)
		{
			int ret = ImGuiTextIndexSizeNative(self);
			return ret;
		}

		public static int ImGuiTextIndexSize(ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				int ret = ImGuiTextIndexSizeNative((ImGuiTextIndex*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTextIndex_get_line_begin")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* ImGuiTextIndexGetLineBeginNative(ImGuiTextIndex* self, byte* baseValue, int n);

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, baseValue, n);
			return ret;
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, baseValue, n));
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static string ImGuiTextIndexGetLineBeginS(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		public static byte* ImGuiTextIndexGetLineBegin(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineBeginS(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTextIndex_get_line_end")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* ImGuiTextIndexGetLineEndNative(ImGuiTextIndex* self, byte* baseValue, int n);

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			byte* ret = ImGuiTextIndexGetLineEndNative(self, baseValue, n);
			return ret;
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, byte* baseValue, int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, baseValue, n));
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, byte* baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, ref byte baseValue, int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineEndNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static string ImGuiTextIndexGetLineEndS(ImGuiTextIndexPtr self, string baseValue, int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, ref byte baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		public static byte* ImGuiTextIndexGetLineEnd(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static string ImGuiTextIndexGetLineEndS(ref ImGuiTextIndex self, string baseValue, int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTextIndex_append")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTextIndexAppendNative(ImGuiTextIndex* self, byte* baseValue, int oldSize, int newSize);

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, byte* baseValue, int oldSize, int newSize)
		{
			ImGuiTextIndexAppendNative(self, baseValue, oldSize, newSize);
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, byte* baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, baseValue, oldSize, newSize);
			}
		}

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, ref byte baseValue, int oldSize, int newSize)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				ImGuiTextIndexAppendNative(self, (byte*)pbaseValue, oldSize, newSize);
			}
		}

		public static void ImGuiTextIndexAppend(ImGuiTextIndexPtr self, string baseValue, int oldSize, int newSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextIndexAppendNative(self, pStr0, oldSize, newSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, ref byte baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		public static void ImGuiTextIndexAppend(ref ImGuiTextIndex self, string baseValue, int oldSize, int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, pStr0, oldSize, newSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImDrawListSharedData_ImDrawListSharedData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImDrawListSharedData* ImDrawListSharedDataImDrawListSharedDataNative();

		public static ImDrawListSharedDataPtr ImDrawListSharedDataImDrawListSharedData()
		{
			ImDrawListSharedDataPtr ret = ImDrawListSharedDataImDrawListSharedDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImDrawListSharedData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImDrawListSharedDataDestroyNative(ImDrawListSharedData* self);

		public static void ImDrawListSharedDataDestroy(ImDrawListSharedDataPtr self)
		{
			ImDrawListSharedDataDestroyNative(self);
		}

		public static void ImDrawListSharedDataDestroy(ref ImDrawListSharedData self)
		{
			fixed (ImDrawListSharedData* pself = &self)
			{
				ImDrawListSharedDataDestroyNative((ImDrawListSharedData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImDrawListSharedData_SetCircleTessellationMaxError")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImDrawListSharedDataSetCircleTessellationMaxErrorNative(ImDrawListSharedData* self, float maxError);

		public static void ImDrawListSharedDataSetCircleTessellationMaxError(ImDrawListSharedDataPtr self, float maxError)
		{
			ImDrawListSharedDataSetCircleTessellationMaxErrorNative(self, maxError);
		}

		public static void ImDrawListSharedDataSetCircleTessellationMaxError(ref ImDrawListSharedData self, float maxError)
		{
			fixed (ImDrawListSharedData* pself = &self)
			{
				ImDrawListSharedDataSetCircleTessellationMaxErrorNative((ImDrawListSharedData*)pself, maxError);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImDrawDataBuilder_ImDrawDataBuilder")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImDrawDataBuilder* ImDrawDataBuilderImDrawDataBuilderNative();

		public static ImDrawDataBuilderPtr ImDrawDataBuilderImDrawDataBuilder()
		{
			ImDrawDataBuilderPtr ret = ImDrawDataBuilderImDrawDataBuilderNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImDrawDataBuilder_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImDrawDataBuilderDestroyNative(ImDrawDataBuilder* self);

		public static void ImDrawDataBuilderDestroy(ImDrawDataBuilderPtr self)
		{
			ImDrawDataBuilderDestroyNative(self);
		}

		public static void ImDrawDataBuilderDestroy(ref ImDrawDataBuilder self)
		{
			fixed (ImDrawDataBuilder* pself = &self)
			{
				ImDrawDataBuilderDestroyNative((ImDrawDataBuilder*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDataVarInfo_GetVarPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void* ImGuiDataVarInfoGetVarPtrNative(ImGuiDataVarInfo* self, void* parent);

		public static void* ImGuiDataVarInfoGetVarPtr(ImGuiDataVarInfoPtr self, void* parent)
		{
			void* ret = ImGuiDataVarInfoGetVarPtrNative(self, parent);
			return ret;
		}

		public static void* ImGuiDataVarInfoGetVarPtr(ref ImGuiDataVarInfo self, void* parent)
		{
			fixed (ImGuiDataVarInfo* pself = &self)
			{
				void* ret = ImGuiDataVarInfoGetVarPtrNative((ImGuiDataVarInfo*)pself, parent);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStyleMod_ImGuiStyleMod_Int")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiStyleMod* ImGuiStyleModImGuiStyleModIntNative(ImGuiStyleVar idx, int v);

		public static ImGuiStyleModPtr ImGuiStyleModImGuiStyleModInt(ImGuiStyleVar idx, int v)
		{
			ImGuiStyleModPtr ret = ImGuiStyleModImGuiStyleModIntNative(idx, v);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStyleMod_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiStyleModDestroyNative(ImGuiStyleMod* self);

		public static void ImGuiStyleModDestroy(ImGuiStyleModPtr self)
		{
			ImGuiStyleModDestroyNative(self);
		}

		public static void ImGuiStyleModDestroy(ref ImGuiStyleMod self)
		{
			fixed (ImGuiStyleMod* pself = &self)
			{
				ImGuiStyleModDestroyNative((ImGuiStyleMod*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStyleMod_ImGuiStyleMod_Float")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiStyleMod* ImGuiStyleModImGuiStyleModFloatNative(ImGuiStyleVar idx, float v);

		public static ImGuiStyleModPtr ImGuiStyleModImGuiStyleModFloat(ImGuiStyleVar idx, float v)
		{
			ImGuiStyleModPtr ret = ImGuiStyleModImGuiStyleModFloatNative(idx, v);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStyleMod_ImGuiStyleMod_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiStyleMod* ImGuiStyleModImGuiStyleModVec2Native(ImGuiStyleVar idx, Vector2 v);

		public static ImGuiStyleModPtr ImGuiStyleModImGuiStyleModVec2(ImGuiStyleVar idx, Vector2 v)
		{
			ImGuiStyleModPtr ret = ImGuiStyleModImGuiStyleModVec2Native(idx, v);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiComboPreviewData_ImGuiComboPreviewData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiComboPreviewData* ImGuiComboPreviewDataImGuiComboPreviewDataNative();

		public static ImGuiComboPreviewDataPtr ImGuiComboPreviewDataImGuiComboPreviewData()
		{
			ImGuiComboPreviewDataPtr ret = ImGuiComboPreviewDataImGuiComboPreviewDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiComboPreviewData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiComboPreviewDataDestroyNative(ImGuiComboPreviewData* self);

		public static void ImGuiComboPreviewDataDestroy(ImGuiComboPreviewDataPtr self)
		{
			ImGuiComboPreviewDataDestroyNative(self);
		}

		public static void ImGuiComboPreviewDataDestroy(ref ImGuiComboPreviewData self)
		{
			fixed (ImGuiComboPreviewData* pself = &self)
			{
				ImGuiComboPreviewDataDestroyNative((ImGuiComboPreviewData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiMenuColumns_ImGuiMenuColumns")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiMenuColumns* ImGuiMenuColumnsImGuiMenuColumnsNative();

		public static ImGuiMenuColumnsPtr ImGuiMenuColumnsImGuiMenuColumns()
		{
			ImGuiMenuColumnsPtr ret = ImGuiMenuColumnsImGuiMenuColumnsNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiMenuColumns_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiMenuColumnsDestroyNative(ImGuiMenuColumns* self);

		public static void ImGuiMenuColumnsDestroy(ImGuiMenuColumnsPtr self)
		{
			ImGuiMenuColumnsDestroyNative(self);
		}

		public static void ImGuiMenuColumnsDestroy(ref ImGuiMenuColumns self)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsDestroyNative((ImGuiMenuColumns*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiMenuColumns_Update")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiMenuColumnsUpdateNative(ImGuiMenuColumns* self, float spacing, byte windowReappearing);

		public static void ImGuiMenuColumnsUpdate(ImGuiMenuColumnsPtr self, float spacing, bool windowReappearing)
		{
			ImGuiMenuColumnsUpdateNative(self, spacing, windowReappearing ? (byte)1 : (byte)0);
		}

		public static void ImGuiMenuColumnsUpdate(ref ImGuiMenuColumns self, float spacing, bool windowReappearing)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsUpdateNative((ImGuiMenuColumns*)pself, spacing, windowReappearing ? (byte)1 : (byte)0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiMenuColumns_DeclColumns")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImGuiMenuColumnsDeclColumnsNative(ImGuiMenuColumns* self, float wIcon, float wLabel, float wShortcut, float wMark);

		public static float ImGuiMenuColumnsDeclColumns(ImGuiMenuColumnsPtr self, float wIcon, float wLabel, float wShortcut, float wMark)
		{
			float ret = ImGuiMenuColumnsDeclColumnsNative(self, wIcon, wLabel, wShortcut, wMark);
			return ret;
		}

		public static float ImGuiMenuColumnsDeclColumns(ref ImGuiMenuColumns self, float wIcon, float wLabel, float wShortcut, float wMark)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				float ret = ImGuiMenuColumnsDeclColumnsNative((ImGuiMenuColumns*)pself, wIcon, wLabel, wShortcut, wMark);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiMenuColumns_CalcNextTotalWidth")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiMenuColumnsCalcNextTotalWidthNative(ImGuiMenuColumns* self, byte updateOffsets);

		public static void ImGuiMenuColumnsCalcNextTotalWidth(ImGuiMenuColumnsPtr self, bool updateOffsets)
		{
			ImGuiMenuColumnsCalcNextTotalWidthNative(self, updateOffsets ? (byte)1 : (byte)0);
		}

		public static void ImGuiMenuColumnsCalcNextTotalWidth(ref ImGuiMenuColumns self, bool updateOffsets)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsCalcNextTotalWidthNative((ImGuiMenuColumns*)pself, updateOffsets ? (byte)1 : (byte)0);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiInputTextDeactivatedState* ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedStateNative();

		public static ImGuiInputTextDeactivatedStatePtr ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedState()
		{
			ImGuiInputTextDeactivatedStatePtr ret = ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedStateNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextDeactivatedState_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextDeactivatedStateDestroyNative(ImGuiInputTextDeactivatedState* self);

		public static void ImGuiInputTextDeactivatedStateDestroy(ImGuiInputTextDeactivatedStatePtr self)
		{
			ImGuiInputTextDeactivatedStateDestroyNative(self);
		}

		public static void ImGuiInputTextDeactivatedStateDestroy(ref ImGuiInputTextDeactivatedState self)
		{
			fixed (ImGuiInputTextDeactivatedState* pself = &self)
			{
				ImGuiInputTextDeactivatedStateDestroyNative((ImGuiInputTextDeactivatedState*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextDeactivatedState_ClearFreeMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextDeactivatedStateClearFreeMemoryNative(ImGuiInputTextDeactivatedState* self);

		public static void ImGuiInputTextDeactivatedStateClearFreeMemory(ImGuiInputTextDeactivatedStatePtr self)
		{
			ImGuiInputTextDeactivatedStateClearFreeMemoryNative(self);
		}

		public static void ImGuiInputTextDeactivatedStateClearFreeMemory(ref ImGuiInputTextDeactivatedState self)
		{
			fixed (ImGuiInputTextDeactivatedState* pself = &self)
			{
				ImGuiInputTextDeactivatedStateClearFreeMemoryNative((ImGuiInputTextDeactivatedState*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_ImGuiInputTextState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiInputTextState* ImGuiInputTextStateImGuiInputTextStateNative();

		public static ImGuiInputTextStatePtr ImGuiInputTextStateImGuiInputTextState()
		{
			ImGuiInputTextStatePtr ret = ImGuiInputTextStateImGuiInputTextStateNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextStateDestroyNative(ImGuiInputTextState* self);

		public static void ImGuiInputTextStateDestroy(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateDestroyNative(self);
		}

		public static void ImGuiInputTextStateDestroy(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateDestroyNative((ImGuiInputTextState*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_ClearText")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextStateClearTextNative(ImGuiInputTextState* self);

		public static void ImGuiInputTextStateClearText(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateClearTextNative(self);
		}

		public static void ImGuiInputTextStateClearText(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearTextNative((ImGuiInputTextState*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_ClearFreeMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextStateClearFreeMemoryNative(ImGuiInputTextState* self);

		public static void ImGuiInputTextStateClearFreeMemory(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateClearFreeMemoryNative(self);
		}

		public static void ImGuiInputTextStateClearFreeMemory(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearFreeMemoryNative((ImGuiInputTextState*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_GetUndoAvailCount")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiInputTextStateGetUndoAvailCountNative(ImGuiInputTextState* self);

		public static int ImGuiInputTextStateGetUndoAvailCount(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetUndoAvailCountNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetUndoAvailCount(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetUndoAvailCountNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_GetRedoAvailCount")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiInputTextStateGetRedoAvailCountNative(ImGuiInputTextState* self);

		public static int ImGuiInputTextStateGetRedoAvailCount(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetRedoAvailCountNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetRedoAvailCount(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetRedoAvailCountNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_OnKeyPressed")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextStateOnKeyPressedNative(ImGuiInputTextState* self, int key);

		public static void ImGuiInputTextStateOnKeyPressed(ImGuiInputTextStatePtr self, int key)
		{
			ImGuiInputTextStateOnKeyPressedNative(self, key);
		}

		public static void ImGuiInputTextStateOnKeyPressed(ref ImGuiInputTextState self, int key)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateOnKeyPressedNative((ImGuiInputTextState*)pself, key);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_CursorAnimReset")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextStateCursorAnimResetNative(ImGuiInputTextState* self);

		public static void ImGuiInputTextStateCursorAnimReset(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateCursorAnimResetNative(self);
		}

		public static void ImGuiInputTextStateCursorAnimReset(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateCursorAnimResetNative((ImGuiInputTextState*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_CursorClamp")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextStateCursorClampNative(ImGuiInputTextState* self);

		public static void ImGuiInputTextStateCursorClamp(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateCursorClampNative(self);
		}

		public static void ImGuiInputTextStateCursorClamp(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateCursorClampNative((ImGuiInputTextState*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_HasSelection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiInputTextStateHasSelectionNative(ImGuiInputTextState* self);

		public static bool ImGuiInputTextStateHasSelection(ImGuiInputTextStatePtr self)
		{
			byte ret = ImGuiInputTextStateHasSelectionNative(self);
			return ret != 0;
		}

		public static bool ImGuiInputTextStateHasSelection(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				byte ret = ImGuiInputTextStateHasSelectionNative((ImGuiInputTextState*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_ClearSelection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextStateClearSelectionNative(ImGuiInputTextState* self);

		public static void ImGuiInputTextStateClearSelection(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateClearSelectionNative(self);
		}

		public static void ImGuiInputTextStateClearSelection(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearSelectionNative((ImGuiInputTextState*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_GetCursorPos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiInputTextStateGetCursorPosNative(ImGuiInputTextState* self);

		public static int ImGuiInputTextStateGetCursorPos(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetCursorPosNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetCursorPos(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetCursorPosNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_GetSelectionStart")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiInputTextStateGetSelectionStartNative(ImGuiInputTextState* self);

		public static int ImGuiInputTextStateGetSelectionStart(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetSelectionStartNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetSelectionStart(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetSelectionStartNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_GetSelectionEnd")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiInputTextStateGetSelectionEndNative(ImGuiInputTextState* self);

		public static int ImGuiInputTextStateGetSelectionEnd(ImGuiInputTextStatePtr self)
		{
			int ret = ImGuiInputTextStateGetSelectionEndNative(self);
			return ret;
		}

		public static int ImGuiInputTextStateGetSelectionEnd(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetSelectionEndNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputTextState_SelectAll")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputTextStateSelectAllNative(ImGuiInputTextState* self);

		public static void ImGuiInputTextStateSelectAll(ImGuiInputTextStatePtr self)
		{
			ImGuiInputTextStateSelectAllNative(self);
		}

		public static void ImGuiInputTextStateSelectAll(ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateSelectAllNative((ImGuiInputTextState*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiPopupData_ImGuiPopupData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiPopupData* ImGuiPopupDataImGuiPopupDataNative();

		public static ImGuiPopupDataPtr ImGuiPopupDataImGuiPopupData()
		{
			ImGuiPopupDataPtr ret = ImGuiPopupDataImGuiPopupDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiPopupData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiPopupDataDestroyNative(ImGuiPopupData* self);

		public static void ImGuiPopupDataDestroy(ImGuiPopupDataPtr self)
		{
			ImGuiPopupDataDestroyNative(self);
		}

		public static void ImGuiPopupDataDestroy(ref ImGuiPopupData self)
		{
			fixed (ImGuiPopupData* pself = &self)
			{
				ImGuiPopupDataDestroyNative((ImGuiPopupData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiNextWindowData_ImGuiNextWindowData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiNextWindowData* ImGuiNextWindowDataImGuiNextWindowDataNative();

		public static ImGuiNextWindowDataPtr ImGuiNextWindowDataImGuiNextWindowData()
		{
			ImGuiNextWindowDataPtr ret = ImGuiNextWindowDataImGuiNextWindowDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiNextWindowData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiNextWindowDataDestroyNative(ImGuiNextWindowData* self);

		public static void ImGuiNextWindowDataDestroy(ImGuiNextWindowDataPtr self)
		{
			ImGuiNextWindowDataDestroyNative(self);
		}

		public static void ImGuiNextWindowDataDestroy(ref ImGuiNextWindowData self)
		{
			fixed (ImGuiNextWindowData* pself = &self)
			{
				ImGuiNextWindowDataDestroyNative((ImGuiNextWindowData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiNextWindowData_ClearFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiNextWindowDataClearFlagsNative(ImGuiNextWindowData* self);

		public static void ImGuiNextWindowDataClearFlags(ImGuiNextWindowDataPtr self)
		{
			ImGuiNextWindowDataClearFlagsNative(self);
		}

		public static void ImGuiNextWindowDataClearFlags(ref ImGuiNextWindowData self)
		{
			fixed (ImGuiNextWindowData* pself = &self)
			{
				ImGuiNextWindowDataClearFlagsNative((ImGuiNextWindowData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiNextItemData_ImGuiNextItemData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiNextItemData* ImGuiNextItemDataImGuiNextItemDataNative();

		public static ImGuiNextItemDataPtr ImGuiNextItemDataImGuiNextItemData()
		{
			ImGuiNextItemDataPtr ret = ImGuiNextItemDataImGuiNextItemDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiNextItemData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiNextItemDataDestroyNative(ImGuiNextItemData* self);

		public static void ImGuiNextItemDataDestroy(ImGuiNextItemDataPtr self)
		{
			ImGuiNextItemDataDestroyNative(self);
		}

		public static void ImGuiNextItemDataDestroy(ref ImGuiNextItemData self)
		{
			fixed (ImGuiNextItemData* pself = &self)
			{
				ImGuiNextItemDataDestroyNative((ImGuiNextItemData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiNextItemData_ClearFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiNextItemDataClearFlagsNative(ImGuiNextItemData* self);

		public static void ImGuiNextItemDataClearFlags(ImGuiNextItemDataPtr self)
		{
			ImGuiNextItemDataClearFlagsNative(self);
		}

		public static void ImGuiNextItemDataClearFlags(ref ImGuiNextItemData self)
		{
			fixed (ImGuiNextItemData* pself = &self)
			{
				ImGuiNextItemDataClearFlagsNative((ImGuiNextItemData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiLastItemData_ImGuiLastItemData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiLastItemData* ImGuiLastItemDataImGuiLastItemDataNative();

		public static ImGuiLastItemDataPtr ImGuiLastItemDataImGuiLastItemData()
		{
			ImGuiLastItemDataPtr ret = ImGuiLastItemDataImGuiLastItemDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiLastItemData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiLastItemDataDestroyNative(ImGuiLastItemData* self);

		public static void ImGuiLastItemDataDestroy(ImGuiLastItemDataPtr self)
		{
			ImGuiLastItemDataDestroyNative(self);
		}

		public static void ImGuiLastItemDataDestroy(ref ImGuiLastItemData self)
		{
			fixed (ImGuiLastItemData* pself = &self)
			{
				ImGuiLastItemDataDestroyNative((ImGuiLastItemData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStackSizes_ImGuiStackSizes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiStackSizes* ImGuiStackSizesImGuiStackSizesNative();

		public static ImGuiStackSizesPtr ImGuiStackSizesImGuiStackSizes()
		{
			ImGuiStackSizesPtr ret = ImGuiStackSizesImGuiStackSizesNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStackSizes_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiStackSizesDestroyNative(ImGuiStackSizes* self);

		public static void ImGuiStackSizesDestroy(ImGuiStackSizesPtr self)
		{
			ImGuiStackSizesDestroyNative(self);
		}

		public static void ImGuiStackSizesDestroy(ref ImGuiStackSizes self)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiStackSizesDestroyNative((ImGuiStackSizes*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStackSizes_SetToContextState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiStackSizesSetToContextStateNative(ImGuiStackSizes* self, ImGuiContext* ctx);

		public static void ImGuiStackSizesSetToContextState(ImGuiStackSizesPtr self, ImGuiContextPtr ctx)
		{
			ImGuiStackSizesSetToContextStateNative(self, ctx);
		}

		public static void ImGuiStackSizesSetToContextState(ref ImGuiStackSizes self, ImGuiContextPtr ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiStackSizesSetToContextStateNative((ImGuiStackSizes*)pself, ctx);
			}
		}

		public static void ImGuiStackSizesSetToContextState(ImGuiStackSizesPtr self, ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiStackSizesSetToContextStateNative(self, (ImGuiContext*)pctx);
			}
		}

		public static void ImGuiStackSizesSetToContextState(ref ImGuiStackSizes self, ref ImGuiContext ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				fixed (ImGuiContext* pctx = &ctx)
				{
					ImGuiStackSizesSetToContextStateNative((ImGuiStackSizes*)pself, (ImGuiContext*)pctx);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStackSizes_CompareWithContextState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiStackSizesCompareWithContextStateNative(ImGuiStackSizes* self, ImGuiContext* ctx);

		public static void ImGuiStackSizesCompareWithContextState(ImGuiStackSizesPtr self, ImGuiContextPtr ctx)
		{
			ImGuiStackSizesCompareWithContextStateNative(self, ctx);
		}

		public static void ImGuiStackSizesCompareWithContextState(ref ImGuiStackSizes self, ImGuiContextPtr ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				ImGuiStackSizesCompareWithContextStateNative((ImGuiStackSizes*)pself, ctx);
			}
		}

		public static void ImGuiStackSizesCompareWithContextState(ImGuiStackSizesPtr self, ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiStackSizesCompareWithContextStateNative(self, (ImGuiContext*)pctx);
			}
		}

		public static void ImGuiStackSizesCompareWithContextState(ref ImGuiStackSizes self, ref ImGuiContext ctx)
		{
			fixed (ImGuiStackSizes* pself = &self)
			{
				fixed (ImGuiContext* pctx = &ctx)
				{
					ImGuiStackSizesCompareWithContextStateNative((ImGuiStackSizes*)pself, (ImGuiContext*)pctx);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiPtrOrIndex* ImGuiPtrOrIndexImGuiPtrOrIndexPtrNative(void* ptr);

		public static ImGuiPtrOrIndexPtr ImGuiPtrOrIndexImGuiPtrOrIndexPtr(void* ptr)
		{
			ImGuiPtrOrIndexPtr ret = ImGuiPtrOrIndexImGuiPtrOrIndexPtrNative(ptr);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiPtrOrIndex_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiPtrOrIndexDestroyNative(ImGuiPtrOrIndex* self);

		public static void ImGuiPtrOrIndexDestroy(ImGuiPtrOrIndexPtr self)
		{
			ImGuiPtrOrIndexDestroyNative(self);
		}

		public static void ImGuiPtrOrIndexDestroy(ref ImGuiPtrOrIndex self)
		{
			fixed (ImGuiPtrOrIndex* pself = &self)
			{
				ImGuiPtrOrIndexDestroyNative((ImGuiPtrOrIndex*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiPtrOrIndex* ImGuiPtrOrIndexImGuiPtrOrIndexIntNative(int index);

		public static ImGuiPtrOrIndexPtr ImGuiPtrOrIndexImGuiPtrOrIndexInt(int index)
		{
			ImGuiPtrOrIndexPtr ret = ImGuiPtrOrIndexImGuiPtrOrIndexIntNative(index);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputEvent_ImGuiInputEvent")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiInputEvent* ImGuiInputEventImGuiInputEventNative();

		public static ImGuiInputEventPtr ImGuiInputEventImGuiInputEvent()
		{
			ImGuiInputEventPtr ret = ImGuiInputEventImGuiInputEventNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiInputEvent_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiInputEventDestroyNative(ImGuiInputEvent* self);

		public static void ImGuiInputEventDestroy(ImGuiInputEventPtr self)
		{
			ImGuiInputEventDestroyNative(self);
		}

		public static void ImGuiInputEventDestroy(ref ImGuiInputEvent self)
		{
			fixed (ImGuiInputEvent* pself = &self)
			{
				ImGuiInputEventDestroyNative((ImGuiInputEvent*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiKeyRoutingData_ImGuiKeyRoutingData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiKeyRoutingData* ImGuiKeyRoutingDataImGuiKeyRoutingDataNative();

		public static ImGuiKeyRoutingDataPtr ImGuiKeyRoutingDataImGuiKeyRoutingData()
		{
			ImGuiKeyRoutingDataPtr ret = ImGuiKeyRoutingDataImGuiKeyRoutingDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiKeyRoutingData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiKeyRoutingDataDestroyNative(ImGuiKeyRoutingData* self);

		public static void ImGuiKeyRoutingDataDestroy(ImGuiKeyRoutingDataPtr self)
		{
			ImGuiKeyRoutingDataDestroyNative(self);
		}

		public static void ImGuiKeyRoutingDataDestroy(ref ImGuiKeyRoutingData self)
		{
			fixed (ImGuiKeyRoutingData* pself = &self)
			{
				ImGuiKeyRoutingDataDestroyNative((ImGuiKeyRoutingData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiKeyRoutingTable_ImGuiKeyRoutingTable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiKeyRoutingTable* ImGuiKeyRoutingTableImGuiKeyRoutingTableNative();

		public static ImGuiKeyRoutingTablePtr ImGuiKeyRoutingTableImGuiKeyRoutingTable()
		{
			ImGuiKeyRoutingTablePtr ret = ImGuiKeyRoutingTableImGuiKeyRoutingTableNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiKeyRoutingTable_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiKeyRoutingTableDestroyNative(ImGuiKeyRoutingTable* self);

		public static void ImGuiKeyRoutingTableDestroy(ImGuiKeyRoutingTablePtr self)
		{
			ImGuiKeyRoutingTableDestroyNative(self);
		}

		public static void ImGuiKeyRoutingTableDestroy(ref ImGuiKeyRoutingTable self)
		{
			fixed (ImGuiKeyRoutingTable* pself = &self)
			{
				ImGuiKeyRoutingTableDestroyNative((ImGuiKeyRoutingTable*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiKeyRoutingTable_Clear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiKeyRoutingTableClearNative(ImGuiKeyRoutingTable* self);

		public static void ImGuiKeyRoutingTableClear(ImGuiKeyRoutingTablePtr self)
		{
			ImGuiKeyRoutingTableClearNative(self);
		}

		public static void ImGuiKeyRoutingTableClear(ref ImGuiKeyRoutingTable self)
		{
			fixed (ImGuiKeyRoutingTable* pself = &self)
			{
				ImGuiKeyRoutingTableClearNative((ImGuiKeyRoutingTable*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiKeyOwnerData_ImGuiKeyOwnerData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiKeyOwnerData* ImGuiKeyOwnerDataImGuiKeyOwnerDataNative();

		public static ImGuiKeyOwnerDataPtr ImGuiKeyOwnerDataImGuiKeyOwnerData()
		{
			ImGuiKeyOwnerDataPtr ret = ImGuiKeyOwnerDataImGuiKeyOwnerDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiKeyOwnerData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiKeyOwnerDataDestroyNative(ImGuiKeyOwnerData* self);

		public static void ImGuiKeyOwnerDataDestroy(ImGuiKeyOwnerDataPtr self)
		{
			ImGuiKeyOwnerDataDestroyNative(self);
		}

		public static void ImGuiKeyOwnerDataDestroy(ref ImGuiKeyOwnerData self)
		{
			fixed (ImGuiKeyOwnerData* pself = &self)
			{
				ImGuiKeyOwnerDataDestroyNative((ImGuiKeyOwnerData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiListClipperRange_FromIndices")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiListClipperRange ImGuiListClipperRangeFromIndicesNative(int min, int max);

		public static ImGuiListClipperRange ImGuiListClipperRangeFromIndices(int min, int max)
		{
			ImGuiListClipperRange ret = ImGuiListClipperRangeFromIndicesNative(min, max);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiListClipperRange_FromPositions")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiListClipperRange ImGuiListClipperRangeFromPositionsNative(float y1, float y2, int offMin, int offMax);

		public static ImGuiListClipperRange ImGuiListClipperRangeFromPositions(float y1, float y2, int offMin, int offMax)
		{
			ImGuiListClipperRange ret = ImGuiListClipperRangeFromPositionsNative(y1, y2, offMin, offMax);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiListClipperData_ImGuiListClipperData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiListClipperData* ImGuiListClipperDataImGuiListClipperDataNative();

		public static ImGuiListClipperDataPtr ImGuiListClipperDataImGuiListClipperData()
		{
			ImGuiListClipperDataPtr ret = ImGuiListClipperDataImGuiListClipperDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiListClipperData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiListClipperDataDestroyNative(ImGuiListClipperData* self);

		public static void ImGuiListClipperDataDestroy(ImGuiListClipperDataPtr self)
		{
			ImGuiListClipperDataDestroyNative(self);
		}

		public static void ImGuiListClipperDataDestroy(ref ImGuiListClipperData self)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				ImGuiListClipperDataDestroyNative((ImGuiListClipperData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiListClipperData_Reset")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiListClipperDataResetNative(ImGuiListClipperData* self, ImGuiListClipper* clipper);

		public static void ImGuiListClipperDataReset(ImGuiListClipperDataPtr self, ImGuiListClipperPtr clipper)
		{
			ImGuiListClipperDataResetNative(self, clipper);
		}

		public static void ImGuiListClipperDataReset(ref ImGuiListClipperData self, ImGuiListClipperPtr clipper)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				ImGuiListClipperDataResetNative((ImGuiListClipperData*)pself, clipper);
			}
		}

		public static void ImGuiListClipperDataReset(ImGuiListClipperDataPtr self, ref ImGuiListClipper clipper)
		{
			fixed (ImGuiListClipper* pclipper = &clipper)
			{
				ImGuiListClipperDataResetNative(self, (ImGuiListClipper*)pclipper);
			}
		}

		public static void ImGuiListClipperDataReset(ref ImGuiListClipperData self, ref ImGuiListClipper clipper)
		{
			fixed (ImGuiListClipperData* pself = &self)
			{
				fixed (ImGuiListClipper* pclipper = &clipper)
				{
					ImGuiListClipperDataResetNative((ImGuiListClipperData*)pself, (ImGuiListClipper*)pclipper);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiNavItemData_ImGuiNavItemData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiNavItemData* ImGuiNavItemDataImGuiNavItemDataNative();

		public static ImGuiNavItemDataPtr ImGuiNavItemDataImGuiNavItemData()
		{
			ImGuiNavItemDataPtr ret = ImGuiNavItemDataImGuiNavItemDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiNavItemData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiNavItemDataDestroyNative(ImGuiNavItemData* self);

		public static void ImGuiNavItemDataDestroy(ImGuiNavItemDataPtr self)
		{
			ImGuiNavItemDataDestroyNative(self);
		}

		public static void ImGuiNavItemDataDestroy(ref ImGuiNavItemData self)
		{
			fixed (ImGuiNavItemData* pself = &self)
			{
				ImGuiNavItemDataDestroyNative((ImGuiNavItemData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiNavItemData_Clear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiNavItemDataClearNative(ImGuiNavItemData* self);

		public static void ImGuiNavItemDataClear(ImGuiNavItemDataPtr self)
		{
			ImGuiNavItemDataClearNative(self);
		}

		public static void ImGuiNavItemDataClear(ref ImGuiNavItemData self)
		{
			fixed (ImGuiNavItemData* pself = &self)
			{
				ImGuiNavItemDataClearNative((ImGuiNavItemData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiOldColumnData_ImGuiOldColumnData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiOldColumnData* ImGuiOldColumnDataImGuiOldColumnDataNative();

		public static ImGuiOldColumnDataPtr ImGuiOldColumnDataImGuiOldColumnData()
		{
			ImGuiOldColumnDataPtr ret = ImGuiOldColumnDataImGuiOldColumnDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiOldColumnData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiOldColumnDataDestroyNative(ImGuiOldColumnData* self);

		public static void ImGuiOldColumnDataDestroy(ImGuiOldColumnDataPtr self)
		{
			ImGuiOldColumnDataDestroyNative(self);
		}

		public static void ImGuiOldColumnDataDestroy(ref ImGuiOldColumnData self)
		{
			fixed (ImGuiOldColumnData* pself = &self)
			{
				ImGuiOldColumnDataDestroyNative((ImGuiOldColumnData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiOldColumns_ImGuiOldColumns")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiOldColumns* ImGuiOldColumnsImGuiOldColumnsNative();

		public static ImGuiOldColumnsPtr ImGuiOldColumnsImGuiOldColumns()
		{
			ImGuiOldColumnsPtr ret = ImGuiOldColumnsImGuiOldColumnsNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiOldColumns_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiOldColumnsDestroyNative(ImGuiOldColumns* self);

		public static void ImGuiOldColumnsDestroy(ImGuiOldColumnsPtr self)
		{
			ImGuiOldColumnsDestroyNative(self);
		}

		public static void ImGuiOldColumnsDestroy(ref ImGuiOldColumns self)
		{
			fixed (ImGuiOldColumns* pself = &self)
			{
				ImGuiOldColumnsDestroyNative((ImGuiOldColumns*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_ImGuiDockNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDockNode* ImGuiDockNodeImGuiDockNodeNative(int id);

		public static ImGuiDockNodePtr ImGuiDockNodeImGuiDockNode(int id)
		{
			ImGuiDockNodePtr ret = ImGuiDockNodeImGuiDockNodeNative(id);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockNodeDestroyNative(ImGuiDockNode* self);

		public static void ImGuiDockNodeDestroy(ImGuiDockNodePtr self)
		{
			ImGuiDockNodeDestroyNative(self);
		}

		public static void ImGuiDockNodeDestroy(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImGuiDockNodeDestroyNative((ImGuiDockNode*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsRootNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsRootNodeNative(ImGuiDockNode* self);

		public static bool ImGuiDockNodeIsRootNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsRootNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsRootNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsRootNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsDockSpace")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsDockSpaceNative(ImGuiDockNode* self);

		public static bool ImGuiDockNodeIsDockSpace(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsDockSpaceNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsDockSpace(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsDockSpaceNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsFloatingNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsFloatingNodeNative(ImGuiDockNode* self);

		public static bool ImGuiDockNodeIsFloatingNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsFloatingNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsFloatingNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsFloatingNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsCentralNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsCentralNodeNative(ImGuiDockNode* self);

		public static bool ImGuiDockNodeIsCentralNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsCentralNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsCentralNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsCentralNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsHiddenTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsHiddenTabBarNative(ImGuiDockNode* self);

		public static bool ImGuiDockNodeIsHiddenTabBar(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsHiddenTabBarNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsHiddenTabBar(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsHiddenTabBarNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsNoTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsNoTabBarNative(ImGuiDockNode* self);

		public static bool ImGuiDockNodeIsNoTabBar(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsNoTabBarNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsNoTabBar(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsNoTabBarNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsSplitNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsSplitNodeNative(ImGuiDockNode* self);

		public static bool ImGuiDockNodeIsSplitNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsSplitNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsSplitNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsSplitNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsLeafNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsLeafNodeNative(ImGuiDockNode* self);

		public static bool ImGuiDockNodeIsLeafNode(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsLeafNodeNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsLeafNode(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsLeafNodeNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsEmpty")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsEmptyNative(ImGuiDockNode* self);

		public static bool ImGuiDockNodeIsEmpty(ImGuiDockNodePtr self)
		{
			byte ret = ImGuiDockNodeIsEmptyNative(self);
			return ret != 0;
		}

		public static bool ImGuiDockNodeIsEmpty(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				byte ret = ImGuiDockNodeIsEmptyNative((ImGuiDockNode*)pself);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_Rect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockNodeRectNative(ImRect* output, ImGuiDockNode* self);

		public static ImRect ImGuiDockNodeRect(ImGuiDockNodePtr self)
		{
			ImRect ret;
			ImGuiDockNodeRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiDockNodeRect(ImRectPtr output, ImGuiDockNodePtr self)
		{
			ImGuiDockNodeRectNative(output, self);
		}

		public static void ImGuiDockNodeRect(ref ImRect output, ImGuiDockNodePtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiDockNodeRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiDockNodeRect(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImRect ret;
				ImGuiDockNodeRectNative(&ret, (ImGuiDockNode*)pself);
				return ret;
			}
		}

		public static void ImGuiDockNodeRect(ImRectPtr output, ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImGuiDockNodeRectNative(output, (ImGuiDockNode*)pself);
			}
		}

		public static void ImGuiDockNodeRect(ref ImRect output, ref ImGuiDockNode self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiDockNode* pself = &self)
				{
					ImGuiDockNodeRectNative((ImRect*)poutput, (ImGuiDockNode*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_SetLocalFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockNodeSetLocalFlagsNative(ImGuiDockNode* self, ImGuiDockNodeFlags flags);

		public static void ImGuiDockNodeSetLocalFlags(ImGuiDockNodePtr self, ImGuiDockNodeFlags flags)
		{
			ImGuiDockNodeSetLocalFlagsNative(self, flags);
		}

		public static void ImGuiDockNodeSetLocalFlags(ref ImGuiDockNode self, ImGuiDockNodeFlags flags)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImGuiDockNodeSetLocalFlagsNative((ImGuiDockNode*)pself, flags);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_UpdateMergedFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockNodeUpdateMergedFlagsNative(ImGuiDockNode* self);

		public static void ImGuiDockNodeUpdateMergedFlags(ImGuiDockNodePtr self)
		{
			ImGuiDockNodeUpdateMergedFlagsNative(self);
		}

		public static void ImGuiDockNodeUpdateMergedFlags(ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImGuiDockNodeUpdateMergedFlagsNative((ImGuiDockNode*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockContext_ImGuiDockContext")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDockContext* ImGuiDockContextImGuiDockContextNative();

		public static ImGuiDockContextPtr ImGuiDockContextImGuiDockContext()
		{
			ImGuiDockContextPtr ret = ImGuiDockContextImGuiDockContextNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiDockContext_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockContextDestroyNative(ImGuiDockContext* self);

		public static void ImGuiDockContextDestroy(ImGuiDockContextPtr self)
		{
			ImGuiDockContextDestroyNative(self);
		}

		public static void ImGuiDockContextDestroy(ref ImGuiDockContext self)
		{
			fixed (ImGuiDockContext* pself = &self)
			{
				ImGuiDockContextDestroyNative((ImGuiDockContext*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_ImGuiViewportP")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiViewportP* ImGuiViewportPImGuiViewportPNative();

		public static ImGuiViewportPPtr ImGuiViewportPImGuiViewportP()
		{
			ImGuiViewportPPtr ret = ImGuiViewportPImGuiViewportPNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPDestroyNative(ImGuiViewportP* self);

		public static void ImGuiViewportPDestroy(ImGuiViewportPPtr self)
		{
			ImGuiViewportPDestroyNative(self);
		}

		public static void ImGuiViewportPDestroy(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPDestroyNative((ImGuiViewportP*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_ClearRequestFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPClearRequestFlagsNative(ImGuiViewportP* self);

		public static void ImGuiViewportPClearRequestFlags(ImGuiViewportPPtr self)
		{
			ImGuiViewportPClearRequestFlagsNative(self);
		}

		public static void ImGuiViewportPClearRequestFlags(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPClearRequestFlagsNative((ImGuiViewportP*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_CalcWorkRectPos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPCalcWorkRectPosNative(Vector2* output, ImGuiViewportP* self, Vector2 offMin);

		public static Vector2 ImGuiViewportPCalcWorkRectPos(ImGuiViewportPPtr self, Vector2 offMin)
		{
			Vector2 ret;
			ImGuiViewportPCalcWorkRectPosNative(&ret, self, offMin);
			return ret;
		}

		public static void ImGuiViewportPCalcWorkRectPos(Vector2* output, ImGuiViewportPPtr self, Vector2 offMin)
		{
			ImGuiViewportPCalcWorkRectPosNative(output, self, offMin);
		}

		public static void ImGuiViewportPCalcWorkRectPos(ref Vector2 output, ImGuiViewportPPtr self, Vector2 offMin)
		{
			fixed (Vector2* poutput = &output)
			{
				ImGuiViewportPCalcWorkRectPosNative((Vector2*)poutput, self, offMin);
			}
		}

		public static Vector2 ImGuiViewportPCalcWorkRectPos(ref ImGuiViewportP self, Vector2 offMin)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				Vector2 ret;
				ImGuiViewportPCalcWorkRectPosNative(&ret, (ImGuiViewportP*)pself, offMin);
				return ret;
			}
		}

		public static void ImGuiViewportPCalcWorkRectPos(Vector2* output, ref ImGuiViewportP self, Vector2 offMin)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPCalcWorkRectPosNative(output, (ImGuiViewportP*)pself, offMin);
			}
		}

		public static void ImGuiViewportPCalcWorkRectPos(ref Vector2 output, ref ImGuiViewportP self, Vector2 offMin)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPCalcWorkRectPosNative((Vector2*)poutput, (ImGuiViewportP*)pself, offMin);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_CalcWorkRectSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPCalcWorkRectSizeNative(Vector2* output, ImGuiViewportP* self, Vector2 offMin, Vector2 offMax);

		public static Vector2 ImGuiViewportPCalcWorkRectSize(ImGuiViewportPPtr self, Vector2 offMin, Vector2 offMax)
		{
			Vector2 ret;
			ImGuiViewportPCalcWorkRectSizeNative(&ret, self, offMin, offMax);
			return ret;
		}

		public static void ImGuiViewportPCalcWorkRectSize(Vector2* output, ImGuiViewportPPtr self, Vector2 offMin, Vector2 offMax)
		{
			ImGuiViewportPCalcWorkRectSizeNative(output, self, offMin, offMax);
		}

		public static void ImGuiViewportPCalcWorkRectSize(ref Vector2 output, ImGuiViewportPPtr self, Vector2 offMin, Vector2 offMax)
		{
			fixed (Vector2* poutput = &output)
			{
				ImGuiViewportPCalcWorkRectSizeNative((Vector2*)poutput, self, offMin, offMax);
			}
		}

		public static Vector2 ImGuiViewportPCalcWorkRectSize(ref ImGuiViewportP self, Vector2 offMin, Vector2 offMax)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				Vector2 ret;
				ImGuiViewportPCalcWorkRectSizeNative(&ret, (ImGuiViewportP*)pself, offMin, offMax);
				return ret;
			}
		}

		public static void ImGuiViewportPCalcWorkRectSize(Vector2* output, ref ImGuiViewportP self, Vector2 offMin, Vector2 offMax)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPCalcWorkRectSizeNative(output, (ImGuiViewportP*)pself, offMin, offMax);
			}
		}

		public static void ImGuiViewportPCalcWorkRectSize(ref Vector2 output, ref ImGuiViewportP self, Vector2 offMin, Vector2 offMax)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPCalcWorkRectSizeNative((Vector2*)poutput, (ImGuiViewportP*)pself, offMin, offMax);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_UpdateWorkRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPUpdateWorkRectNative(ImGuiViewportP* self);

		public static void ImGuiViewportPUpdateWorkRect(ImGuiViewportPPtr self)
		{
			ImGuiViewportPUpdateWorkRectNative(self);
		}

		public static void ImGuiViewportPUpdateWorkRect(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPUpdateWorkRectNative((ImGuiViewportP*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_GetMainRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPGetMainRectNative(ImRect* output, ImGuiViewportP* self);

		public static ImRect ImGuiViewportPGetMainRect(ImGuiViewportPPtr self)
		{
			ImRect ret;
			ImGuiViewportPGetMainRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiViewportPGetMainRect(ImRectPtr output, ImGuiViewportPPtr self)
		{
			ImGuiViewportPGetMainRectNative(output, self);
		}

		public static void ImGuiViewportPGetMainRect(ref ImRect output, ImGuiViewportPPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiViewportPGetMainRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiViewportPGetMainRect(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImRect ret;
				ImGuiViewportPGetMainRectNative(&ret, (ImGuiViewportP*)pself);
				return ret;
			}
		}

		public static void ImGuiViewportPGetMainRect(ImRectPtr output, ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPGetMainRectNative(output, (ImGuiViewportP*)pself);
			}
		}

		public static void ImGuiViewportPGetMainRect(ref ImRect output, ref ImGuiViewportP self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPGetMainRectNative((ImRect*)poutput, (ImGuiViewportP*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_GetWorkRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPGetWorkRectNative(ImRect* output, ImGuiViewportP* self);

		public static ImRect ImGuiViewportPGetWorkRect(ImGuiViewportPPtr self)
		{
			ImRect ret;
			ImGuiViewportPGetWorkRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiViewportPGetWorkRect(ImRectPtr output, ImGuiViewportPPtr self)
		{
			ImGuiViewportPGetWorkRectNative(output, self);
		}

		public static void ImGuiViewportPGetWorkRect(ref ImRect output, ImGuiViewportPPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiViewportPGetWorkRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiViewportPGetWorkRect(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImRect ret;
				ImGuiViewportPGetWorkRectNative(&ret, (ImGuiViewportP*)pself);
				return ret;
			}
		}

		public static void ImGuiViewportPGetWorkRect(ImRectPtr output, ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPGetWorkRectNative(output, (ImGuiViewportP*)pself);
			}
		}

		public static void ImGuiViewportPGetWorkRect(ref ImRect output, ref ImGuiViewportP self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPGetWorkRectNative((ImRect*)poutput, (ImGuiViewportP*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_GetBuildWorkRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPGetBuildWorkRectNative(ImRect* output, ImGuiViewportP* self);

		public static ImRect ImGuiViewportPGetBuildWorkRect(ImGuiViewportPPtr self)
		{
			ImRect ret;
			ImGuiViewportPGetBuildWorkRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiViewportPGetBuildWorkRect(ImRectPtr output, ImGuiViewportPPtr self)
		{
			ImGuiViewportPGetBuildWorkRectNative(output, self);
		}

		public static void ImGuiViewportPGetBuildWorkRect(ref ImRect output, ImGuiViewportPPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiViewportPGetBuildWorkRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiViewportPGetBuildWorkRect(ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImRect ret;
				ImGuiViewportPGetBuildWorkRectNative(&ret, (ImGuiViewportP*)pself);
				return ret;
			}
		}

		public static void ImGuiViewportPGetBuildWorkRect(ImRectPtr output, ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPGetBuildWorkRectNative(output, (ImGuiViewportP*)pself);
			}
		}

		public static void ImGuiViewportPGetBuildWorkRect(ref ImRect output, ref ImGuiViewportP self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiViewportP* pself = &self)
				{
					ImGuiViewportPGetBuildWorkRectNative((ImRect*)poutput, (ImGuiViewportP*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindowSettings_ImGuiWindowSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindowSettings* ImGuiWindowSettingsImGuiWindowSettingsNative();

		public static ImGuiWindowSettingsPtr ImGuiWindowSettingsImGuiWindowSettings()
		{
			ImGuiWindowSettingsPtr ret = ImGuiWindowSettingsImGuiWindowSettingsNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindowSettings_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowSettingsDestroyNative(ImGuiWindowSettings* self);

		public static void ImGuiWindowSettingsDestroy(ImGuiWindowSettingsPtr self)
		{
			ImGuiWindowSettingsDestroyNative(self);
		}

		public static void ImGuiWindowSettingsDestroy(ref ImGuiWindowSettings self)
		{
			fixed (ImGuiWindowSettings* pself = &self)
			{
				ImGuiWindowSettingsDestroyNative((ImGuiWindowSettings*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindowSettings_GetName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* ImGuiWindowSettingsGetNameNative(ImGuiWindowSettings* self);

		public static byte* ImGuiWindowSettingsGetName(ImGuiWindowSettingsPtr self)
		{
			byte* ret = ImGuiWindowSettingsGetNameNative(self);
			return ret;
		}

		public static string ImGuiWindowSettingsGetNameS(ImGuiWindowSettingsPtr self)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiWindowSettingsGetNameNative(self));
			return ret;
		}

		public static byte* ImGuiWindowSettingsGetName(ref ImGuiWindowSettings self)
		{
			fixed (ImGuiWindowSettings* pself = &self)
			{
				byte* ret = ImGuiWindowSettingsGetNameNative((ImGuiWindowSettings*)pself);
				return ret;
			}
		}

		public static string ImGuiWindowSettingsGetNameS(ref ImGuiWindowSettings self)
		{
			fixed (ImGuiWindowSettings* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiWindowSettingsGetNameNative((ImGuiWindowSettings*)pself));
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiSettingsHandler_ImGuiSettingsHandler")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiSettingsHandler* ImGuiSettingsHandlerImGuiSettingsHandlerNative();

		public static ImGuiSettingsHandlerPtr ImGuiSettingsHandlerImGuiSettingsHandler()
		{
			ImGuiSettingsHandlerPtr ret = ImGuiSettingsHandlerImGuiSettingsHandlerNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiSettingsHandler_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiSettingsHandlerDestroyNative(ImGuiSettingsHandler* self);

		public static void ImGuiSettingsHandlerDestroy(ImGuiSettingsHandlerPtr self)
		{
			ImGuiSettingsHandlerDestroyNative(self);
		}

		public static void ImGuiSettingsHandlerDestroy(ref ImGuiSettingsHandler self)
		{
			fixed (ImGuiSettingsHandler* pself = &self)
			{
				ImGuiSettingsHandlerDestroyNative((ImGuiSettingsHandler*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStackLevelInfo_ImGuiStackLevelInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiStackLevelInfo* ImGuiStackLevelInfoImGuiStackLevelInfoNative();

		public static ImGuiStackLevelInfoPtr ImGuiStackLevelInfoImGuiStackLevelInfo()
		{
			ImGuiStackLevelInfoPtr ret = ImGuiStackLevelInfoImGuiStackLevelInfoNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStackLevelInfo_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiStackLevelInfoDestroyNative(ImGuiStackLevelInfo* self);

		public static void ImGuiStackLevelInfoDestroy(ImGuiStackLevelInfoPtr self)
		{
			ImGuiStackLevelInfoDestroyNative(self);
		}

		public static void ImGuiStackLevelInfoDestroy(ref ImGuiStackLevelInfo self)
		{
			fixed (ImGuiStackLevelInfo* pself = &self)
			{
				ImGuiStackLevelInfoDestroyNative((ImGuiStackLevelInfo*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStackTool_ImGuiStackTool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiStackTool* ImGuiStackToolImGuiStackToolNative();

		public static ImGuiStackToolPtr ImGuiStackToolImGuiStackTool()
		{
			ImGuiStackToolPtr ret = ImGuiStackToolImGuiStackToolNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiStackTool_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiStackToolDestroyNative(ImGuiStackTool* self);

		public static void ImGuiStackToolDestroy(ImGuiStackToolPtr self)
		{
			ImGuiStackToolDestroyNative(self);
		}

		public static void ImGuiStackToolDestroy(ref ImGuiStackTool self)
		{
			fixed (ImGuiStackTool* pself = &self)
			{
				ImGuiStackToolDestroyNative((ImGuiStackTool*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiContextHook_ImGuiContextHook")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiContextHook* ImGuiContextHookImGuiContextHookNative();

		public static ImGuiContextHookPtr ImGuiContextHookImGuiContextHook()
		{
			ImGuiContextHookPtr ret = ImGuiContextHookImGuiContextHookNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiContextHook_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiContextHookDestroyNative(ImGuiContextHook* self);

		public static void ImGuiContextHookDestroy(ImGuiContextHookPtr self)
		{
			ImGuiContextHookDestroyNative(self);
		}

		public static void ImGuiContextHookDestroy(ref ImGuiContextHook self)
		{
			fixed (ImGuiContextHook* pself = &self)
			{
				ImGuiContextHookDestroyNative((ImGuiContextHook*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiContext_ImGuiContext")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiContext* ImGuiContextImGuiContextNative(ImFontAtlas* sharedFontAtlas);

		public static ImGuiContextPtr ImGuiContextImGuiContext(ImFontAtlasPtr sharedFontAtlas)
		{
			ImGuiContextPtr ret = ImGuiContextImGuiContextNative(sharedFontAtlas);
			return ret;
		}

		public static ImGuiContextPtr ImGuiContextImGuiContext(ref ImFontAtlas sharedFontAtlas)
		{
			fixed (ImFontAtlas* psharedFontAtlas = &sharedFontAtlas)
			{
				ImGuiContextPtr ret = ImGuiContextImGuiContextNative((ImFontAtlas*)psharedFontAtlas);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiContext_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiContextDestroyNative(ImGuiContext* self);

		public static void ImGuiContextDestroy(ImGuiContextPtr self)
		{
			ImGuiContextDestroyNative(self);
		}

		public static void ImGuiContextDestroy(ref ImGuiContext self)
		{
			fixed (ImGuiContext* pself = &self)
			{
				ImGuiContextDestroyNative((ImGuiContext*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_ImGuiWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* ImGuiWindowImGuiWindowNative(ImGuiContext* context, byte* name);

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ImGuiContextPtr context, byte* name)
		{
			ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative(context, name);
			return ret;
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ref ImGuiContext context, byte* name)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative((ImGuiContext*)pcontext, name);
				return ret;
			}
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ImGuiContextPtr context, ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative(context, (byte*)pname);
				return ret;
			}
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ImGuiContextPtr context, string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative(context, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ref ImGuiContext context, ref byte name)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				fixed (byte* pname = &name)
				{
					ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative((ImGuiContext*)pcontext, (byte*)pname);
					return ret;
				}
			}
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ref ImGuiContext context, string name)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative((ImGuiContext*)pcontext, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowDestroyNative(ImGuiWindow* self);

		public static void ImGuiWindowDestroy(ImGuiWindowPtr self)
		{
			ImGuiWindowDestroyNative(self);
		}

		public static void ImGuiWindowDestroy(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowDestroyNative((ImGuiWindow*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_GetID_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiWindowGetIDNative(ImGuiWindow* self, byte* str, byte* strEnd);

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, byte* str, byte* strEnd)
		{
			int ret = ImGuiWindowGetIDNative(self, str, strEnd);
			return ret;
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, byte* str, byte* strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, str, strEnd);
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, ref byte str, byte* strEnd)
		{
			fixed (byte* pstr = &str)
			{
				int ret = ImGuiWindowGetIDNative(self, (byte*)pstr, strEnd);
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, string str, byte* strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImGuiWindowGetIDNative(self, pStr0, strEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, ref byte str, byte* strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, (byte*)pstr, strEnd);
					return ret;
				}
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, string str, byte* strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, pStr0, strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, byte* str, ref byte strEnd)
		{
			fixed (byte* pstrEnd = &strEnd)
			{
				int ret = ImGuiWindowGetIDNative(self, str, (byte*)pstrEnd);
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, byte* str, string strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImGuiWindowGetIDNative(self, str, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, byte* str, ref byte strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, str, (byte*)pstrEnd);
					return ret;
				}
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, byte* str, string strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (strEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, str, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, ref byte str, ref byte strEnd)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					int ret = ImGuiWindowGetIDNative(self, (byte*)pstr, (byte*)pstrEnd);
					return ret;
				}
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, string str, string strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImGuiWindowGetIDNative(self, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, ref byte str, ref byte strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					fixed (byte* pstrEnd = &strEnd)
					{
						int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, (byte*)pstr, (byte*)pstrEnd);
						return ret;
					}
				}
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, string str, string strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (strEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_GetID_Ptr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiWindowGetIDPtrNative(ImGuiWindow* self, void* ptr);

		public static int ImGuiWindowGetIDPtr(ImGuiWindowPtr self, void* ptr)
		{
			int ret = ImGuiWindowGetIDPtrNative(self, ptr);
			return ret;
		}

		public static int ImGuiWindowGetIDPtr(ref ImGuiWindow self, void* ptr)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				int ret = ImGuiWindowGetIDPtrNative((ImGuiWindow*)pself, ptr);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_GetID_Int")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiWindowGetIDIntNative(ImGuiWindow* self, int n);

		public static int ImGuiWindowGetIDInt(ImGuiWindowPtr self, int n)
		{
			int ret = ImGuiWindowGetIDIntNative(self, n);
			return ret;
		}

		public static int ImGuiWindowGetIDInt(ref ImGuiWindow self, int n)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				int ret = ImGuiWindowGetIDIntNative((ImGuiWindow*)pself, n);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_GetIDFromRectangle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ImGuiWindowGetIDFromRectangleNative(ImGuiWindow* self, ImRect rAbs);

		public static int ImGuiWindowGetIDFromRectangle(ImGuiWindowPtr self, ImRect rAbs)
		{
			int ret = ImGuiWindowGetIDFromRectangleNative(self, rAbs);
			return ret;
		}

		public static int ImGuiWindowGetIDFromRectangle(ref ImGuiWindow self, ImRect rAbs)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				int ret = ImGuiWindowGetIDFromRectangleNative((ImGuiWindow*)pself, rAbs);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_Rect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowRectNative(ImRect* output, ImGuiWindow* self);

		public static ImRect ImGuiWindowRect(ImGuiWindowPtr self)
		{
			ImRect ret;
			ImGuiWindowRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiWindowRect(ImRectPtr output, ImGuiWindowPtr self)
		{
			ImGuiWindowRectNative(output, self);
		}

		public static void ImGuiWindowRect(ref ImRect output, ImGuiWindowPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiWindowRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiWindowRect(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImRect ret;
				ImGuiWindowRectNative(&ret, (ImGuiWindow*)pself);
				return ret;
			}
		}

		public static void ImGuiWindowRect(ImRectPtr output, ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowRectNative(output, (ImGuiWindow*)pself);
			}
		}

		public static void ImGuiWindowRect(ref ImRect output, ref ImGuiWindow self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pself = &self)
				{
					ImGuiWindowRectNative((ImRect*)poutput, (ImGuiWindow*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_CalcFontSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImGuiWindowCalcFontSizeNative(ImGuiWindow* self);

		public static float ImGuiWindowCalcFontSize(ImGuiWindowPtr self)
		{
			float ret = ImGuiWindowCalcFontSizeNative(self);
			return ret;
		}

		public static float ImGuiWindowCalcFontSize(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				float ret = ImGuiWindowCalcFontSizeNative((ImGuiWindow*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_TitleBarHeight")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImGuiWindowTitleBarHeightNative(ImGuiWindow* self);

		public static float ImGuiWindowTitleBarHeight(ImGuiWindowPtr self)
		{
			float ret = ImGuiWindowTitleBarHeightNative(self);
			return ret;
		}

		public static float ImGuiWindowTitleBarHeight(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				float ret = ImGuiWindowTitleBarHeightNative((ImGuiWindow*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_TitleBarRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowTitleBarRectNative(ImRect* output, ImGuiWindow* self);

		public static ImRect ImGuiWindowTitleBarRect(ImGuiWindowPtr self)
		{
			ImRect ret;
			ImGuiWindowTitleBarRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiWindowTitleBarRect(ImRectPtr output, ImGuiWindowPtr self)
		{
			ImGuiWindowTitleBarRectNative(output, self);
		}

		public static void ImGuiWindowTitleBarRect(ref ImRect output, ImGuiWindowPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiWindowTitleBarRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiWindowTitleBarRect(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImRect ret;
				ImGuiWindowTitleBarRectNative(&ret, (ImGuiWindow*)pself);
				return ret;
			}
		}

		public static void ImGuiWindowTitleBarRect(ImRectPtr output, ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowTitleBarRectNative(output, (ImGuiWindow*)pself);
			}
		}

		public static void ImGuiWindowTitleBarRect(ref ImRect output, ref ImGuiWindow self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pself = &self)
				{
					ImGuiWindowTitleBarRectNative((ImRect*)poutput, (ImGuiWindow*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_MenuBarHeight")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImGuiWindowMenuBarHeightNative(ImGuiWindow* self);

		public static float ImGuiWindowMenuBarHeight(ImGuiWindowPtr self)
		{
			float ret = ImGuiWindowMenuBarHeightNative(self);
			return ret;
		}

		public static float ImGuiWindowMenuBarHeight(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				float ret = ImGuiWindowMenuBarHeightNative((ImGuiWindow*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_MenuBarRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowMenuBarRectNative(ImRect* output, ImGuiWindow* self);

		public static ImRect ImGuiWindowMenuBarRect(ImGuiWindowPtr self)
		{
			ImRect ret;
			ImGuiWindowMenuBarRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiWindowMenuBarRect(ImRectPtr output, ImGuiWindowPtr self)
		{
			ImGuiWindowMenuBarRectNative(output, self);
		}

		public static void ImGuiWindowMenuBarRect(ref ImRect output, ImGuiWindowPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiWindowMenuBarRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiWindowMenuBarRect(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImRect ret;
				ImGuiWindowMenuBarRectNative(&ret, (ImGuiWindow*)pself);
				return ret;
			}
		}

		public static void ImGuiWindowMenuBarRect(ImRectPtr output, ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowMenuBarRectNative(output, (ImGuiWindow*)pself);
			}
		}

		public static void ImGuiWindowMenuBarRect(ref ImRect output, ref ImGuiWindow self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pself = &self)
				{
					ImGuiWindowMenuBarRectNative((ImRect*)poutput, (ImGuiWindow*)pself);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTabItem_ImGuiTabItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTabItem* ImGuiTabItemImGuiTabItemNative();

		public static ImGuiTabItemPtr ImGuiTabItemImGuiTabItem()
		{
			ImGuiTabItemPtr ret = ImGuiTabItemImGuiTabItemNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTabItem_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTabItemDestroyNative(ImGuiTabItem* self);

		public static void ImGuiTabItemDestroy(ImGuiTabItemPtr self)
		{
			ImGuiTabItemDestroyNative(self);
		}

		public static void ImGuiTabItemDestroy(ref ImGuiTabItem self)
		{
			fixed (ImGuiTabItem* pself = &self)
			{
				ImGuiTabItemDestroyNative((ImGuiTabItem*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTabBar_ImGuiTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTabBar* ImGuiTabBarImGuiTabBarNative();

		public static ImGuiTabBarPtr ImGuiTabBarImGuiTabBar()
		{
			ImGuiTabBarPtr ret = ImGuiTabBarImGuiTabBarNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTabBar_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTabBarDestroyNative(ImGuiTabBar* self);

		public static void ImGuiTabBarDestroy(ImGuiTabBarPtr self)
		{
			ImGuiTabBarDestroyNative(self);
		}

		public static void ImGuiTabBarDestroy(ref ImGuiTabBar self)
		{
			fixed (ImGuiTabBar* pself = &self)
			{
				ImGuiTabBarDestroyNative((ImGuiTabBar*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableColumn_ImGuiTableColumn")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableColumn* ImGuiTableColumnImGuiTableColumnNative();

		public static ImGuiTableColumnPtr ImGuiTableColumnImGuiTableColumn()
		{
			ImGuiTableColumnPtr ret = ImGuiTableColumnImGuiTableColumnNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableColumn_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableColumnDestroyNative(ImGuiTableColumn* self);

		public static void ImGuiTableColumnDestroy(ImGuiTableColumnPtr self)
		{
			ImGuiTableColumnDestroyNative(self);
		}

		public static void ImGuiTableColumnDestroy(ref ImGuiTableColumn self)
		{
			fixed (ImGuiTableColumn* pself = &self)
			{
				ImGuiTableColumnDestroyNative((ImGuiTableColumn*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableInstanceData_ImGuiTableInstanceData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableInstanceData* ImGuiTableInstanceDataImGuiTableInstanceDataNative();

		public static ImGuiTableInstanceDataPtr ImGuiTableInstanceDataImGuiTableInstanceData()
		{
			ImGuiTableInstanceDataPtr ret = ImGuiTableInstanceDataImGuiTableInstanceDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableInstanceData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableInstanceDataDestroyNative(ImGuiTableInstanceData* self);

		public static void ImGuiTableInstanceDataDestroy(ImGuiTableInstanceDataPtr self)
		{
			ImGuiTableInstanceDataDestroyNative(self);
		}

		public static void ImGuiTableInstanceDataDestroy(ref ImGuiTableInstanceData self)
		{
			fixed (ImGuiTableInstanceData* pself = &self)
			{
				ImGuiTableInstanceDataDestroyNative((ImGuiTableInstanceData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTable_ImGuiTable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTable* ImGuiTableImGuiTableNative();

		public static ImGuiTablePtr ImGuiTableImGuiTable()
		{
			ImGuiTablePtr ret = ImGuiTableImGuiTableNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTable_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableDestroyNative(ImGuiTable* self);

		public static void ImGuiTableDestroy(ImGuiTablePtr self)
		{
			ImGuiTableDestroyNative(self);
		}

		public static void ImGuiTableDestroy(ref ImGuiTable self)
		{
			fixed (ImGuiTable* pself = &self)
			{
				ImGuiTableDestroyNative((ImGuiTable*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableTempData_ImGuiTableTempData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableTempData* ImGuiTableTempDataImGuiTableTempDataNative();

		public static ImGuiTableTempDataPtr ImGuiTableTempDataImGuiTableTempData()
		{
			ImGuiTableTempDataPtr ret = ImGuiTableTempDataImGuiTableTempDataNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableTempData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableTempDataDestroyNative(ImGuiTableTempData* self);

		public static void ImGuiTableTempDataDestroy(ImGuiTableTempDataPtr self)
		{
			ImGuiTableTempDataDestroyNative(self);
		}

		public static void ImGuiTableTempDataDestroy(ref ImGuiTableTempData self)
		{
			fixed (ImGuiTableTempData* pself = &self)
			{
				ImGuiTableTempDataDestroyNative((ImGuiTableTempData*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableColumnSettings_ImGuiTableColumnSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableColumnSettings* ImGuiTableColumnSettingsImGuiTableColumnSettingsNative();

		public static ImGuiTableColumnSettingsPtr ImGuiTableColumnSettingsImGuiTableColumnSettings()
		{
			ImGuiTableColumnSettingsPtr ret = ImGuiTableColumnSettingsImGuiTableColumnSettingsNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableColumnSettings_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableColumnSettingsDestroyNative(ImGuiTableColumnSettings* self);

		public static void ImGuiTableColumnSettingsDestroy(ImGuiTableColumnSettingsPtr self)
		{
			ImGuiTableColumnSettingsDestroyNative(self);
		}

		public static void ImGuiTableColumnSettingsDestroy(ref ImGuiTableColumnSettings self)
		{
			fixed (ImGuiTableColumnSettings* pself = &self)
			{
				ImGuiTableColumnSettingsDestroyNative((ImGuiTableColumnSettings*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableSettings_ImGuiTableSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableSettings* ImGuiTableSettingsImGuiTableSettingsNative();

		public static ImGuiTableSettingsPtr ImGuiTableSettingsImGuiTableSettings()
		{
			ImGuiTableSettingsPtr ret = ImGuiTableSettingsImGuiTableSettingsNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableSettings_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableSettingsDestroyNative(ImGuiTableSettings* self);

		public static void ImGuiTableSettingsDestroy(ImGuiTableSettingsPtr self)
		{
			ImGuiTableSettingsDestroyNative(self);
		}

		public static void ImGuiTableSettingsDestroy(ref ImGuiTableSettings self)
		{
			fixed (ImGuiTableSettings* pself = &self)
			{
				ImGuiTableSettingsDestroyNative((ImGuiTableSettings*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiTableSettings_GetColumnSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableColumnSettings* ImGuiTableSettingsGetColumnSettingsNative(ImGuiTableSettings* self);

		public static ImGuiTableColumnSettingsPtr ImGuiTableSettingsGetColumnSettings(ImGuiTableSettingsPtr self)
		{
			ImGuiTableColumnSettingsPtr ret = ImGuiTableSettingsGetColumnSettingsNative(self);
			return ret;
		}

		public static ImGuiTableColumnSettingsPtr ImGuiTableSettingsGetColumnSettings(ref ImGuiTableSettings self)
		{
			fixed (ImGuiTableSettings* pself = &self)
			{
				ImGuiTableColumnSettingsPtr ret = ImGuiTableSettingsGetColumnSettingsNative((ImGuiTableSettings*)pself);
				return ret;
			}
		}

		[LibraryImport(LibName, EntryPoint = "igGetCurrentWindowRead")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* GetCurrentWindowReadNative();

		public static ImGuiWindowPtr GetCurrentWindowRead()
		{
			ImGuiWindowPtr ret = GetCurrentWindowReadNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "igGetCurrentWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* GetCurrentWindowNative();

		public static ImGuiWindowPtr GetCurrentWindow()
		{
			ImGuiWindowPtr ret = GetCurrentWindowNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "igFindWindowByID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* FindWindowByIDNative(int id);

		public static ImGuiWindowPtr FindWindowByID(int id)
		{
			ImGuiWindowPtr ret = FindWindowByIDNative(id);
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "igFindWindowByName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* FindWindowByNameNative(byte* name);

		public static ImGuiWindowPtr FindWindowByName(byte* name)
		{
			ImGuiWindowPtr ret = FindWindowByNameNative(name);
			return ret;
		}

		public static ImGuiWindowPtr FindWindowByName(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImGuiWindowPtr ret = FindWindowByNameNative((byte*)pname);
				return ret;
			}
		}

		public static ImGuiWindowPtr FindWindowByName(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiWindowPtr ret = FindWindowByNameNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "igUpdateWindowParentAndRootLinks")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void UpdateWindowParentAndRootLinksNative(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWindow* parentWindow);

		public static void UpdateWindowParentAndRootLinks(ImGuiWindowPtr window, ImGuiWindowFlags flags, ImGuiWindowPtr parentWindow)
		{
			UpdateWindowParentAndRootLinksNative(window, flags, parentWindow);
		}

		public static void UpdateWindowParentAndRootLinks(ref ImGuiWindow window, ImGuiWindowFlags flags, ImGuiWindowPtr parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				UpdateWindowParentAndRootLinksNative((ImGuiWindow*)pwindow, flags, parentWindow);
			}
		}

		public static void UpdateWindowParentAndRootLinks(ImGuiWindowPtr window, ImGuiWindowFlags flags, ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pparentWindow = &parentWindow)
			{
				UpdateWindowParentAndRootLinksNative(window, flags, (ImGuiWindow*)pparentWindow);
			}
		}

		public static void UpdateWindowParentAndRootLinks(ref ImGuiWindow window, ImGuiWindowFlags flags, ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* pparentWindow = &parentWindow)
				{
					UpdateWindowParentAndRootLinksNative((ImGuiWindow*)pwindow, flags, (ImGuiWindow*)pparentWindow);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igCalcWindowNextAutoFitSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void CalcWindowNextAutoFitSizeNative(Vector2* output, ImGuiWindow* window);

		public static Vector2 CalcWindowNextAutoFitSize(ImGuiWindowPtr window)
		{
			Vector2 ret;
			CalcWindowNextAutoFitSizeNative(&ret, window);
			return ret;
		}

		public static void CalcWindowNextAutoFitSize(Vector2* output, ImGuiWindowPtr window)
		{
			CalcWindowNextAutoFitSizeNative(output, window);
		}

		public static void CalcWindowNextAutoFitSize(ref Vector2 output, ImGuiWindowPtr window)
		{
			fixed (Vector2* poutput = &output)
			{
				CalcWindowNextAutoFitSizeNative((Vector2*)poutput, window);
			}
		}

		public static Vector2 CalcWindowNextAutoFitSize(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				CalcWindowNextAutoFitSizeNative(&ret, (ImGuiWindow*)pwindow);
				return ret;
			}
		}

		public static void CalcWindowNextAutoFitSize(Vector2* output, ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				CalcWindowNextAutoFitSizeNative(output, (ImGuiWindow*)pwindow);
			}
		}

		public static void CalcWindowNextAutoFitSize(ref Vector2 output, ref ImGuiWindow window)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					CalcWindowNextAutoFitSizeNative((Vector2*)poutput, (ImGuiWindow*)pwindow);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igIsWindowChildOf")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsWindowChildOfNative(ImGuiWindow* window, ImGuiWindow* potentialParent, byte popupHierarchy, byte dockHierarchy);

		public static bool IsWindowChildOf(ImGuiWindowPtr window, ImGuiWindowPtr potentialParent, bool popupHierarchy, bool dockHierarchy)
		{
			byte ret = IsWindowChildOfNative(window, potentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool IsWindowChildOf(ref ImGuiWindow window, ImGuiWindowPtr potentialParent, bool popupHierarchy, bool dockHierarchy)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowChildOfNative((ImGuiWindow*)pwindow, potentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		public static bool IsWindowChildOf(ImGuiWindowPtr window, ref ImGuiWindow potentialParent, bool popupHierarchy, bool dockHierarchy)
		{
			fixed (ImGuiWindow* ppotentialParent = &potentialParent)
			{
				byte ret = IsWindowChildOfNative(window, (ImGuiWindow*)ppotentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		public static bool IsWindowChildOf(ref ImGuiWindow window, ref ImGuiWindow potentialParent, bool popupHierarchy, bool dockHierarchy)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* ppotentialParent = &potentialParent)
				{
					byte ret = IsWindowChildOfNative((ImGuiWindow*)pwindow, (ImGuiWindow*)ppotentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igIsWindowWithinBeginStackOf")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsWindowWithinBeginStackOfNative(ImGuiWindow* window, ImGuiWindow* potentialParent);

		public static bool IsWindowWithinBeginStackOf(ImGuiWindowPtr window, ImGuiWindowPtr potentialParent)
		{
			byte ret = IsWindowWithinBeginStackOfNative(window, potentialParent);
			return ret != 0;
		}

		public static bool IsWindowWithinBeginStackOf(ref ImGuiWindow window, ImGuiWindowPtr potentialParent)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowWithinBeginStackOfNative((ImGuiWindow*)pwindow, potentialParent);
				return ret != 0;
			}
		}

		public static bool IsWindowWithinBeginStackOf(ImGuiWindowPtr window, ref ImGuiWindow potentialParent)
		{
			fixed (ImGuiWindow* ppotentialParent = &potentialParent)
			{
				byte ret = IsWindowWithinBeginStackOfNative(window, (ImGuiWindow*)ppotentialParent);
				return ret != 0;
			}
		}

		public static bool IsWindowWithinBeginStackOf(ref ImGuiWindow window, ref ImGuiWindow potentialParent)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* ppotentialParent = &potentialParent)
				{
					byte ret = IsWindowWithinBeginStackOfNative((ImGuiWindow*)pwindow, (ImGuiWindow*)ppotentialParent);
					return ret != 0;
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igIsWindowAbove")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsWindowAboveNative(ImGuiWindow* potentialAbove, ImGuiWindow* potentialBelow);

		public static bool IsWindowAbove(ImGuiWindowPtr potentialAbove, ImGuiWindowPtr potentialBelow)
		{
			byte ret = IsWindowAboveNative(potentialAbove, potentialBelow);
			return ret != 0;
		}

		public static bool IsWindowAbove(ref ImGuiWindow potentialAbove, ImGuiWindowPtr potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialAbove = &potentialAbove)
			{
				byte ret = IsWindowAboveNative((ImGuiWindow*)ppotentialAbove, potentialBelow);
				return ret != 0;
			}
		}

		public static bool IsWindowAbove(ImGuiWindowPtr potentialAbove, ref ImGuiWindow potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialBelow = &potentialBelow)
			{
				byte ret = IsWindowAboveNative(potentialAbove, (ImGuiWindow*)ppotentialBelow);
				return ret != 0;
			}
		}

		public static bool IsWindowAbove(ref ImGuiWindow potentialAbove, ref ImGuiWindow potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialAbove = &potentialAbove)
			{
				fixed (ImGuiWindow* ppotentialBelow = &potentialBelow)
				{
					byte ret = IsWindowAboveNative((ImGuiWindow*)ppotentialAbove, (ImGuiWindow*)ppotentialBelow);
					return ret != 0;
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igIsWindowNavFocusable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsWindowNavFocusableNative(ImGuiWindow* window);

		public static bool IsWindowNavFocusable(ImGuiWindowPtr window)
		{
			byte ret = IsWindowNavFocusableNative(window);
			return ret != 0;
		}

		public static bool IsWindowNavFocusable(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowNavFocusableNative((ImGuiWindow*)pwindow);
				return ret != 0;
			}
		}

		[LibraryImport(LibName, EntryPoint = "igSetWindowPos_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowPosWindowPtrNative(ImGuiWindow* window, Vector2 pos, ImGuiCond cond);

		public static void SetWindowPosWindowPtr(ImGuiWindowPtr window, Vector2 pos, ImGuiCond cond)
		{
			SetWindowPosWindowPtrNative(window, pos, cond);
		}

		public static void SetWindowPosWindowPtr(ref ImGuiWindow window, Vector2 pos, ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowPosWindowPtrNative((ImGuiWindow*)pwindow, pos, cond);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igSetWindowSize_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowSizeWindowPtrNative(ImGuiWindow* window, Vector2 size, ImGuiCond cond);

		public static void SetWindowSizeWindowPtr(ImGuiWindowPtr window, Vector2 size, ImGuiCond cond)
		{
			SetWindowSizeWindowPtrNative(window, size, cond);
		}

		public static void SetWindowSizeWindowPtr(ref ImGuiWindow window, Vector2 size, ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowSizeWindowPtrNative((ImGuiWindow*)pwindow, size, cond);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igSetWindowCollapsed_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowCollapsedWindowPtrNative(ImGuiWindow* window, byte collapsed, ImGuiCond cond);

		public static void SetWindowCollapsedWindowPtr(ImGuiWindowPtr window, bool collapsed, ImGuiCond cond)
		{
			SetWindowCollapsedWindowPtrNative(window, collapsed ? (byte)1 : (byte)0, cond);
		}

		public static void SetWindowCollapsedWindowPtr(ref ImGuiWindow window, bool collapsed, ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowCollapsedWindowPtrNative((ImGuiWindow*)pwindow, collapsed ? (byte)1 : (byte)0, cond);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igSetWindowHitTestHole")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowHitTestHoleNative(ImGuiWindow* window, Vector2 pos, Vector2 size);

		public static void SetWindowHitTestHole(ImGuiWindowPtr window, Vector2 pos, Vector2 size)
		{
			SetWindowHitTestHoleNative(window, pos, size);
		}

		public static void SetWindowHitTestHole(ref ImGuiWindow window, Vector2 pos, Vector2 size)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowHitTestHoleNative((ImGuiWindow*)pwindow, pos, size);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igSetWindowHiddendAndSkipItemsForCurrentFrame")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowHiddendAndSkipItemsForCurrentFrameNative(ImGuiWindow* window);

		public static void SetWindowHiddendAndSkipItemsForCurrentFrame(ImGuiWindowPtr window)
		{
			SetWindowHiddendAndSkipItemsForCurrentFrameNative(window);
		}

		public static void SetWindowHiddendAndSkipItemsForCurrentFrame(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowHiddendAndSkipItemsForCurrentFrameNative((ImGuiWindow*)pwindow);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igWindowRectAbsToRel")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void WindowRectAbsToRelNative(ImRect* output, ImGuiWindow* window, ImRect r);

		public static ImRect WindowRectAbsToRel(ImGuiWindowPtr window, ImRect r)
		{
			ImRect ret;
			WindowRectAbsToRelNative(&ret, window, r);
			return ret;
		}

		public static void WindowRectAbsToRel(ImRectPtr output, ImGuiWindowPtr window, ImRect r)
		{
			WindowRectAbsToRelNative(output, window, r);
		}

		public static void WindowRectAbsToRel(ref ImRect output, ImGuiWindowPtr window, ImRect r)
		{
			fixed (ImRect* poutput = &output)
			{
				WindowRectAbsToRelNative((ImRect*)poutput, window, r);
			}
		}

		public static ImRect WindowRectAbsToRel(ref ImGuiWindow window, ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImRect ret;
				WindowRectAbsToRelNative(&ret, (ImGuiWindow*)pwindow, r);
				return ret;
			}
		}

		public static void WindowRectAbsToRel(ImRectPtr output, ref ImGuiWindow window, ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowRectAbsToRelNative(output, (ImGuiWindow*)pwindow, r);
			}
		}

		public static void WindowRectAbsToRel(ref ImRect output, ref ImGuiWindow window, ImRect r)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowRectAbsToRelNative((ImRect*)poutput, (ImGuiWindow*)pwindow, r);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igWindowRectRelToAbs")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void WindowRectRelToAbsNative(ImRect* output, ImGuiWindow* window, ImRect r);

		public static ImRect WindowRectRelToAbs(ImGuiWindowPtr window, ImRect r)
		{
			ImRect ret;
			WindowRectRelToAbsNative(&ret, window, r);
			return ret;
		}

		public static void WindowRectRelToAbs(ImRectPtr output, ImGuiWindowPtr window, ImRect r)
		{
			WindowRectRelToAbsNative(output, window, r);
		}

		public static void WindowRectRelToAbs(ref ImRect output, ImGuiWindowPtr window, ImRect r)
		{
			fixed (ImRect* poutput = &output)
			{
				WindowRectRelToAbsNative((ImRect*)poutput, window, r);
			}
		}

		public static ImRect WindowRectRelToAbs(ref ImGuiWindow window, ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImRect ret;
				WindowRectRelToAbsNative(&ret, (ImGuiWindow*)pwindow, r);
				return ret;
			}
		}

		public static void WindowRectRelToAbs(ImRectPtr output, ref ImGuiWindow window, ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowRectRelToAbsNative(output, (ImGuiWindow*)pwindow, r);
			}
		}

		public static void WindowRectRelToAbs(ref ImRect output, ref ImGuiWindow window, ImRect r)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowRectRelToAbsNative((ImRect*)poutput, (ImGuiWindow*)pwindow, r);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igWindowPosRelToAbs")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void WindowPosRelToAbsNative(Vector2* output, ImGuiWindow* window, Vector2 p);

		public static Vector2 WindowPosRelToAbs(ImGuiWindowPtr window, Vector2 p)
		{
			Vector2 ret;
			WindowPosRelToAbsNative(&ret, window, p);
			return ret;
		}

		public static void WindowPosRelToAbs(Vector2* output, ImGuiWindowPtr window, Vector2 p)
		{
			WindowPosRelToAbsNative(output, window, p);
		}

		public static void WindowPosRelToAbs(ref Vector2 output, ImGuiWindowPtr window, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				WindowPosRelToAbsNative((Vector2*)poutput, window, p);
			}
		}

		public static Vector2 WindowPosRelToAbs(ref ImGuiWindow window, Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				WindowPosRelToAbsNative(&ret, (ImGuiWindow*)pwindow, p);
				return ret;
			}
		}

		public static void WindowPosRelToAbs(Vector2* output, ref ImGuiWindow window, Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowPosRelToAbsNative(output, (ImGuiWindow*)pwindow, p);
			}
		}

		public static void WindowPosRelToAbs(ref Vector2 output, ref ImGuiWindow window, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowPosRelToAbsNative((Vector2*)poutput, (ImGuiWindow*)pwindow, p);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igFocusWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void FocusWindowNative(ImGuiWindow* window, ImGuiFocusRequestFlags flags);

		public static void FocusWindow(ImGuiWindowPtr window, ImGuiFocusRequestFlags flags)
		{
			FocusWindowNative(window, flags);
		}

		public static void FocusWindow(ref ImGuiWindow window, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				FocusWindowNative((ImGuiWindow*)pwindow, flags);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igFocusTopMostWindowUnderOne")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void FocusTopMostWindowUnderOneNative(ImGuiWindow* underThisWindow, ImGuiWindow* ignoreWindow, ImGuiViewport* filterViewport, ImGuiFocusRequestFlags flags);

		public static void FocusTopMostWindowUnderOne(ImGuiWindowPtr underThisWindow, ImGuiWindowPtr ignoreWindow, ImGuiViewportPtr filterViewport, ImGuiFocusRequestFlags flags)
		{
			FocusTopMostWindowUnderOneNative(underThisWindow, ignoreWindow, filterViewport, flags);
		}

		public static void FocusTopMostWindowUnderOne(ref ImGuiWindow underThisWindow, ImGuiWindowPtr ignoreWindow, ImGuiViewportPtr filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, ignoreWindow, filterViewport, flags);
			}
		}

		public static void FocusTopMostWindowUnderOne(ImGuiWindowPtr underThisWindow, ref ImGuiWindow ignoreWindow, ImGuiViewportPtr filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
			{
				FocusTopMostWindowUnderOneNative(underThisWindow, (ImGuiWindow*)pignoreWindow, filterViewport, flags);
			}
		}

		public static void FocusTopMostWindowUnderOne(ref ImGuiWindow underThisWindow, ref ImGuiWindow ignoreWindow, ImGuiViewportPtr filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
				{
					FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, (ImGuiWindow*)pignoreWindow, filterViewport, flags);
				}
			}
		}

		public static void FocusTopMostWindowUnderOne(ImGuiWindowPtr underThisWindow, ImGuiWindowPtr ignoreWindow, ref ImGuiViewport filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiViewport* pfilterViewport = &filterViewport)
			{
				FocusTopMostWindowUnderOneNative(underThisWindow, ignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
			}
		}

		public static void FocusTopMostWindowUnderOne(ref ImGuiWindow underThisWindow, ImGuiWindowPtr ignoreWindow, ref ImGuiViewport filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				fixed (ImGuiViewport* pfilterViewport = &filterViewport)
				{
					FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, ignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
				}
			}
		}

		public static void FocusTopMostWindowUnderOne(ImGuiWindowPtr underThisWindow, ref ImGuiWindow ignoreWindow, ref ImGuiViewport filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
			{
				fixed (ImGuiViewport* pfilterViewport = &filterViewport)
				{
					FocusTopMostWindowUnderOneNative(underThisWindow, (ImGuiWindow*)pignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
				}
			}
		}

		public static void FocusTopMostWindowUnderOne(ref ImGuiWindow underThisWindow, ref ImGuiWindow ignoreWindow, ref ImGuiViewport filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
				{
					fixed (ImGuiViewport* pfilterViewport = &filterViewport)
					{
						FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, (ImGuiWindow*)pignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
					}
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igBringWindowToFocusFront")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BringWindowToFocusFrontNative(ImGuiWindow* window);

		public static void BringWindowToFocusFront(ImGuiWindowPtr window)
		{
			BringWindowToFocusFrontNative(window);
		}

		public static void BringWindowToFocusFront(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToFocusFrontNative((ImGuiWindow*)pwindow);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igBringWindowToDisplayFront")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BringWindowToDisplayFrontNative(ImGuiWindow* window);

		public static void BringWindowToDisplayFront(ImGuiWindowPtr window)
		{
			BringWindowToDisplayFrontNative(window);
		}

		public static void BringWindowToDisplayFront(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToDisplayFrontNative((ImGuiWindow*)pwindow);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igBringWindowToDisplayBack")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BringWindowToDisplayBackNative(ImGuiWindow* window);

		public static void BringWindowToDisplayBack(ImGuiWindowPtr window)
		{
			BringWindowToDisplayBackNative(window);
		}
	}
}
