// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{
		internal const string LibName = "cimgui";

		internal static Vector2* ImVec2Native()
		{
			return ((delegate* unmanaged[Cdecl]<Vector2*>)vt[0])();
		}

		public static Vector2* ImVec2()
		{
			Vector2* ret = ImVec2Native();
			return ret;
		}

		internal static void DestroyNative(Vector2* self)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[1])(self);
		}

		public static void Destroy(Vector2* self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref Vector2 self)
		{
			fixed (Vector2* pself = &self)
			{
				DestroyNative((Vector2*)pself);
			}
		}

		internal static Vector2* ImVec2Native(float x, float y)
		{
			return ((delegate* unmanaged[Cdecl]<float, float, Vector2*>)vt[2])(x, y);
		}

		public static Vector2* ImVec2(float x, float y)
		{
			Vector2* ret = ImVec2Native(x, y);
			return ret;
		}

		internal static Vector4* ImVec4Native()
		{
			return ((delegate* unmanaged[Cdecl]<Vector4*>)vt[3])();
		}

		public static Vector4* ImVec4()
		{
			Vector4* ret = ImVec4Native();
			return ret;
		}

		internal static void DestroyNative(Vector4* self)
		{
			((delegate* unmanaged[Cdecl]<Vector4*, void>)vt[4])(self);
		}

		public static void Destroy(Vector4* self)
		{
			DestroyNative(self);
		}

		public static void Destroy(ref Vector4 self)
		{
			fixed (Vector4* pself = &self)
			{
				DestroyNative((Vector4*)pself);
			}
		}

		internal static Vector4* ImVec4Native(float x, float y, float z, float w)
		{
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, Vector4*>)vt[5])(x, y, z, w);
		}

		public static Vector4* ImVec4(float x, float y, float z, float w)
		{
			Vector4* ret = ImVec4Native(x, y, z, w);
			return ret;
		}

		internal static ImGuiContext* CreateContextNative(ImFontAtlas* sharedFontAtlas)
		{
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImGuiContext*>)vt[6])(sharedFontAtlas);
		}

		public static ImGuiContextPtr CreateContext(ImFontAtlasPtr sharedFontAtlas)
		{
			ImGuiContextPtr ret = CreateContextNative(sharedFontAtlas);
			return ret;
		}

		public static ImGuiContextPtr CreateContext()
		{
			ImGuiContextPtr ret = CreateContextNative((ImFontAtlas*)(default));
			return ret;
		}

		public static ImGuiContextPtr CreateContext(ref ImFontAtlas sharedFontAtlas)
		{
			fixed (ImFontAtlas* psharedFontAtlas = &sharedFontAtlas)
			{
				ImGuiContextPtr ret = CreateContextNative((ImFontAtlas*)psharedFontAtlas);
				return ret;
			}
		}

		internal static void DestroyContextNative(ImGuiContext* ctx)
		{
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)vt[7])(ctx);
		}

		public static void DestroyContext(ImGuiContextPtr ctx)
		{
			DestroyContextNative(ctx);
		}

		public static void DestroyContext()
		{
			DestroyContextNative((ImGuiContext*)(default));
		}

		public static void DestroyContext(ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DestroyContextNative((ImGuiContext*)pctx);
			}
		}

		internal static ImGuiContext* GetCurrentContextNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiContext*>)vt[8])();
		}

		public static ImGuiContextPtr GetCurrentContext()
		{
			ImGuiContextPtr ret = GetCurrentContextNative();
			return ret;
		}

		internal static void SetCurrentContextNative(ImGuiContext* ctx)
		{
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)vt[9])(ctx);
		}

		public static void SetCurrentContext(ImGuiContextPtr ctx)
		{
			SetCurrentContextNative(ctx);
		}

		public static void SetCurrentContext(ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				SetCurrentContextNative((ImGuiContext*)pctx);
			}
		}

		internal static ImGuiIO* GetIONative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiIO*>)vt[10])();
		}

		public static ImGuiIOPtr GetIO()
		{
			ImGuiIOPtr ret = GetIONative();
			return ret;
		}

		internal static ImGuiStyle* GetStyleNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiStyle*>)vt[11])();
		}

		public static ImGuiStylePtr GetStyle()
		{
			ImGuiStylePtr ret = GetStyleNative();
			return ret;
		}

		internal static void NewFrameNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[12])();
		}

		public static void NewFrame()
		{
			NewFrameNative();
		}

		internal static void EndFrameNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[13])();
		}

		public static void EndFrame()
		{
			EndFrameNative();
		}

		internal static void RenderNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[14])();
		}

		public static void Render()
		{
			RenderNative();
		}

		internal static ImDrawData* GetDrawDataNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImDrawData*>)vt[15])();
		}

		public static ImDrawDataPtr GetDrawData()
		{
			ImDrawDataPtr ret = GetDrawDataNative();
			return ret;
		}

		internal static void ShowDemoWindowNative(bool* pOpen)
		{
			((delegate* unmanaged[Cdecl]<bool*, void>)vt[16])(pOpen);
		}

		public static void ShowDemoWindow(bool* pOpen)
		{
			ShowDemoWindowNative(pOpen);
		}

		public static void ShowDemoWindow()
		{
			ShowDemoWindowNative((bool*)(default));
		}

		public static void ShowDemoWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ShowDemoWindowNative((bool*)ppOpen);
			}
		}

		internal static void ShowMetricsWindowNative(bool* pOpen)
		{
			((delegate* unmanaged[Cdecl]<bool*, void>)vt[17])(pOpen);
		}

		public static void ShowMetricsWindow(bool* pOpen)
		{
			ShowMetricsWindowNative(pOpen);
		}

		public static void ShowMetricsWindow()
		{
			ShowMetricsWindowNative((bool*)(default));
		}

		public static void ShowMetricsWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ShowMetricsWindowNative((bool*)ppOpen);
			}
		}

		internal static void ShowDebugLogWindowNative(bool* pOpen)
		{
			((delegate* unmanaged[Cdecl]<bool*, void>)vt[18])(pOpen);
		}

		public static void ShowDebugLogWindow(bool* pOpen)
		{
			ShowDebugLogWindowNative(pOpen);
		}

		public static void ShowDebugLogWindow()
		{
			ShowDebugLogWindowNative((bool*)(default));
		}

		public static void ShowDebugLogWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ShowDebugLogWindowNative((bool*)ppOpen);
			}
		}

		internal static void ShowIDStackToolWindowNative(bool* pOpen)
		{
			((delegate* unmanaged[Cdecl]<bool*, void>)vt[19])(pOpen);
		}

		public static void ShowIDStackToolWindow(bool* pOpen)
		{
			ShowIDStackToolWindowNative(pOpen);
		}

		public static void ShowIDStackToolWindow()
		{
			ShowIDStackToolWindowNative((bool*)(default));
		}

		public static void ShowIDStackToolWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ShowIDStackToolWindowNative((bool*)ppOpen);
			}
		}

		internal static void ShowAboutWindowNative(bool* pOpen)
		{
			((delegate* unmanaged[Cdecl]<bool*, void>)vt[20])(pOpen);
		}

		public static void ShowAboutWindow(bool* pOpen)
		{
			ShowAboutWindowNative(pOpen);
		}

		public static void ShowAboutWindow()
		{
			ShowAboutWindowNative((bool*)(default));
		}

		public static void ShowAboutWindow(ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				ShowAboutWindowNative((bool*)ppOpen);
			}
		}

		internal static void ShowStyleEditorNative(ImGuiStyle* reference)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStyle*, void>)vt[21])(reference);
		}

		public static void ShowStyleEditor(ImGuiStylePtr reference)
		{
			ShowStyleEditorNative(reference);
		}

		public static void ShowStyleEditor()
		{
			ShowStyleEditorNative((ImGuiStyle*)(default));
		}

		public static void ShowStyleEditor(ref ImGuiStyle reference)
		{
			fixed (ImGuiStyle* preference = &reference)
			{
				ShowStyleEditorNative((ImGuiStyle*)preference);
			}
		}

		internal static byte ShowStyleSelectorNative(byte* label)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)vt[22])(label);
		}

		public static bool ShowStyleSelector(byte* label)
		{
			byte ret = ShowStyleSelectorNative(label);
			return ret != 0;
		}

		public static bool ShowStyleSelector(ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ShowStyleSelectorNative((byte*)plabel);
				return ret != 0;
			}
		}

		public static bool ShowStyleSelector(string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ShowStyleSelectorNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		internal static void ShowFontSelectorNative(byte* label)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[23])(label);
		}

		public static void ShowFontSelector(byte* label)
		{
			ShowFontSelectorNative(label);
		}

		public static void ShowFontSelector(ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				ShowFontSelectorNative((byte*)plabel);
			}
		}

		public static void ShowFontSelector(string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ShowFontSelectorNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void ShowUserGuideNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[24])();
		}

		public static void ShowUserGuide()
		{
			ShowUserGuideNative();
		}

		internal static byte* GetVersionNative()
		{
			return ((delegate* unmanaged[Cdecl]<byte*>)vt[25])();
		}

		public static byte* GetVersion()
		{
			byte* ret = GetVersionNative();
			return ret;
		}

		public static string GetVersionS()
		{
			string ret = Utils.DecodeStringUTF8(GetVersionNative());
			return ret;
		}

		internal static void StyleColorsDarkNative(ImGuiStyle* dst)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStyle*, void>)vt[26])(dst);
		}

		public static void StyleColorsDark(ImGuiStylePtr dst)
		{
			StyleColorsDarkNative(dst);
		}

		public static void StyleColorsDark()
		{
			StyleColorsDarkNative((ImGuiStyle*)(default));
		}

		public static void StyleColorsDark(ref ImGuiStyle dst)
		{
			fixed (ImGuiStyle* pdst = &dst)
			{
				StyleColorsDarkNative((ImGuiStyle*)pdst);
			}
		}

		internal static void StyleColorsLightNative(ImGuiStyle* dst)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStyle*, void>)vt[27])(dst);
		}

		public static void StyleColorsLight(ImGuiStylePtr dst)
		{
			StyleColorsLightNative(dst);
		}

		public static void StyleColorsLight()
		{
			StyleColorsLightNative((ImGuiStyle*)(default));
		}

		public static void StyleColorsLight(ref ImGuiStyle dst)
		{
			fixed (ImGuiStyle* pdst = &dst)
			{
				StyleColorsLightNative((ImGuiStyle*)pdst);
			}
		}

		internal static void StyleColorsClassicNative(ImGuiStyle* dst)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStyle*, void>)vt[28])(dst);
		}

		public static void StyleColorsClassic(ImGuiStylePtr dst)
		{
			StyleColorsClassicNative(dst);
		}

		public static void StyleColorsClassic()
		{
			StyleColorsClassicNative((ImGuiStyle*)(default));
		}

		public static void StyleColorsClassic(ref ImGuiStyle dst)
		{
			fixed (ImGuiStyle* pdst = &dst)
			{
				StyleColorsClassicNative((ImGuiStyle*)pdst);
			}
		}

		internal static byte BeginNative(byte* name, bool* pOpen, ImGuiWindowFlags flags)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, bool*, ImGuiWindowFlags, byte>)vt[29])(name, pOpen, flags);
		}

		public static bool Begin(byte* name, bool* pOpen, ImGuiWindowFlags flags)
		{
			byte ret = BeginNative(name, pOpen, flags);
			return ret != 0;
		}

		public static bool Begin(byte* name, bool* pOpen)
		{
			byte ret = BeginNative(name, pOpen, (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool Begin(byte* name)
		{
			byte ret = BeginNative(name, (bool*)(default), (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool Begin(byte* name, ImGuiWindowFlags flags)
		{
			byte ret = BeginNative(name, (bool*)(default), flags);
			return ret != 0;
		}

		public static bool Begin(ref byte name, bool* pOpen, ImGuiWindowFlags flags)
		{
			fixed (byte* pname = &name)
			{
				byte ret = BeginNative((byte*)pname, pOpen, flags);
				return ret != 0;
			}
		}

		public static bool Begin(ref byte name, bool* pOpen)
		{
			fixed (byte* pname = &name)
			{
				byte ret = BeginNative((byte*)pname, pOpen, (ImGuiWindowFlags)(0));
				return ret != 0;
			}
		}

		public static bool Begin(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				byte ret = BeginNative((byte*)pname, (bool*)(default), (ImGuiWindowFlags)(0));
				return ret != 0;
			}
		}

		public static bool Begin(ref byte name, ImGuiWindowFlags flags)
		{
			fixed (byte* pname = &name)
			{
				byte ret = BeginNative((byte*)pname, (bool*)(default), flags);
				return ret != 0;
			}
		}

		public static bool Begin(string name, bool* pOpen, ImGuiWindowFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginNative(pStr0, pOpen, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool Begin(string name, bool* pOpen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginNative(pStr0, pOpen, (ImGuiWindowFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool Begin(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginNative(pStr0, (bool*)(default), (ImGuiWindowFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool Begin(string name, ImGuiWindowFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginNative(pStr0, (bool*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool Begin(byte* name, ref bool pOpen, ImGuiWindowFlags flags)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = BeginNative(name, (bool*)ppOpen, flags);
				return ret != 0;
			}
		}

		public static bool Begin(byte* name, ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = BeginNative(name, (bool*)ppOpen, (ImGuiWindowFlags)(0));
				return ret != 0;
			}
		}

		public static bool Begin(ref byte name, ref bool pOpen, ImGuiWindowFlags flags)
		{
			fixed (byte* pname = &name)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = BeginNative((byte*)pname, (bool*)ppOpen, flags);
					return ret != 0;
				}
			}
		}

		public static bool Begin(ref byte name, ref bool pOpen)
		{
			fixed (byte* pname = &name)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = BeginNative((byte*)pname, (bool*)ppOpen, (ImGuiWindowFlags)(0));
					return ret != 0;
				}
			}
		}

		public static bool Begin(string name, ref bool pOpen, ImGuiWindowFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = BeginNative(pStr0, (bool*)ppOpen, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		public static bool Begin(string name, ref bool pOpen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = BeginNative(pStr0, (bool*)ppOpen, (ImGuiWindowFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		internal static void EndNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[30])();
		}

		public static void End()
		{
			EndNative();
		}

		internal static byte BeginChildNative(byte* strId, Vector2 size, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, Vector2, ImGuiChildFlags, ImGuiWindowFlags, byte>)vt[31])(strId, size, childFlags, windowFlags);
		}

		public static bool BeginChild(byte* strId, Vector2 size, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildNative(strId, size, childFlags, windowFlags);
			return ret != 0;
		}

		public static bool BeginChild(byte* strId, Vector2 size, ImGuiChildFlags childFlags)
		{
			byte ret = BeginChildNative(strId, size, childFlags, (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool BeginChild(byte* strId, Vector2 size)
		{
			byte ret = BeginChildNative(strId, size, (ImGuiChildFlags)(0), (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool BeginChild(byte* strId)
		{
			byte ret = BeginChildNative(strId, (Vector2)(new Vector2(0,0)), (ImGuiChildFlags)(0), (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool BeginChild(byte* strId, ImGuiChildFlags childFlags)
		{
			byte ret = BeginChildNative(strId, (Vector2)(new Vector2(0,0)), childFlags, (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool BeginChild(byte* strId, Vector2 size, ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildNative(strId, size, (ImGuiChildFlags)(0), windowFlags);
			return ret != 0;
		}

		public static bool BeginChild(byte* strId, ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildNative(strId, (Vector2)(new Vector2(0,0)), (ImGuiChildFlags)(0), windowFlags);
			return ret != 0;
		}

		public static bool BeginChild(byte* strId, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildNative(strId, (Vector2)(new Vector2(0,0)), childFlags, windowFlags);
			return ret != 0;
		}

		public static bool BeginChild(ref byte strId, Vector2 size, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginChildNative((byte*)pstrId, size, childFlags, windowFlags);
				return ret != 0;
			}
		}

		public static bool BeginChild(ref byte strId, Vector2 size, ImGuiChildFlags childFlags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginChildNative((byte*)pstrId, size, childFlags, (ImGuiWindowFlags)(0));
				return ret != 0;
			}
		}

		public static bool BeginChild(ref byte strId, Vector2 size)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginChildNative((byte*)pstrId, size, (ImGuiChildFlags)(0), (ImGuiWindowFlags)(0));
				return ret != 0;
			}
		}

		public static bool BeginChild(ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginChildNative((byte*)pstrId, (Vector2)(new Vector2(0,0)), (ImGuiChildFlags)(0), (ImGuiWindowFlags)(0));
				return ret != 0;
			}
		}

		public static bool BeginChild(ref byte strId, ImGuiChildFlags childFlags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginChildNative((byte*)pstrId, (Vector2)(new Vector2(0,0)), childFlags, (ImGuiWindowFlags)(0));
				return ret != 0;
			}
		}

		public static bool BeginChild(ref byte strId, Vector2 size, ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginChildNative((byte*)pstrId, size, (ImGuiChildFlags)(0), windowFlags);
				return ret != 0;
			}
		}

		public static bool BeginChild(ref byte strId, ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginChildNative((byte*)pstrId, (Vector2)(new Vector2(0,0)), (ImGuiChildFlags)(0), windowFlags);
				return ret != 0;
			}
		}

		public static bool BeginChild(ref byte strId, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginChildNative((byte*)pstrId, (Vector2)(new Vector2(0,0)), childFlags, windowFlags);
				return ret != 0;
			}
		}

		public static bool BeginChild(string strId, Vector2 size, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildNative(pStr0, size, childFlags, windowFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginChild(string strId, Vector2 size, ImGuiChildFlags childFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildNative(pStr0, size, childFlags, (ImGuiWindowFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginChild(string strId, Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildNative(pStr0, size, (ImGuiChildFlags)(0), (ImGuiWindowFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginChild(string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildNative(pStr0, (Vector2)(new Vector2(0,0)), (ImGuiChildFlags)(0), (ImGuiWindowFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginChild(string strId, ImGuiChildFlags childFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildNative(pStr0, (Vector2)(new Vector2(0,0)), childFlags, (ImGuiWindowFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginChild(string strId, Vector2 size, ImGuiWindowFlags windowFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildNative(pStr0, size, (ImGuiChildFlags)(0), windowFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginChild(string strId, ImGuiWindowFlags windowFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildNative(pStr0, (Vector2)(new Vector2(0,0)), (ImGuiChildFlags)(0), windowFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginChild(string strId, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildNative(pStr0, (Vector2)(new Vector2(0,0)), childFlags, windowFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		internal static byte BeginChildNative(int id, Vector2 size, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			return ((delegate* unmanaged[Cdecl]<int, Vector2, ImGuiChildFlags, ImGuiWindowFlags, byte>)vt[32])(id, size, childFlags, windowFlags);
		}

		public static bool BeginChild(int id, Vector2 size, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildNative(id, size, childFlags, windowFlags);
			return ret != 0;
		}

		public static bool BeginChild(int id, Vector2 size, ImGuiChildFlags childFlags)
		{
			byte ret = BeginChildNative(id, size, childFlags, (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool BeginChild(int id, Vector2 size)
		{
			byte ret = BeginChildNative(id, size, (ImGuiChildFlags)(0), (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool BeginChild(int id)
		{
			byte ret = BeginChildNative(id, (Vector2)(new Vector2(0,0)), (ImGuiChildFlags)(0), (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool BeginChild(int id, ImGuiChildFlags childFlags)
		{
			byte ret = BeginChildNative(id, (Vector2)(new Vector2(0,0)), childFlags, (ImGuiWindowFlags)(0));
			return ret != 0;
		}

		public static bool BeginChild(int id, Vector2 size, ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildNative(id, size, (ImGuiChildFlags)(0), windowFlags);
			return ret != 0;
		}

		public static bool BeginChild(int id, ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildNative(id, (Vector2)(new Vector2(0,0)), (ImGuiChildFlags)(0), windowFlags);
			return ret != 0;
		}

		public static bool BeginChild(int id, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildNative(id, (Vector2)(new Vector2(0,0)), childFlags, windowFlags);
			return ret != 0;
		}

		internal static void EndChildNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[33])();
		}

		public static void EndChild()
		{
			EndChildNative();
		}

		internal static byte IsWindowAppearingNative()
		{
			return ((delegate* unmanaged[Cdecl]<byte>)vt[34])();
		}

		public static bool IsWindowAppearing()
		{
			byte ret = IsWindowAppearingNative();
			return ret != 0;
		}

		internal static byte IsWindowCollapsedNative()
		{
			return ((delegate* unmanaged[Cdecl]<byte>)vt[35])();
		}

		public static bool IsWindowCollapsed()
		{
			byte ret = IsWindowCollapsedNative();
			return ret != 0;
		}

		internal static byte IsWindowFocusedNative(ImGuiFocusedFlags flags)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiFocusedFlags, byte>)vt[36])(flags);
		}

		public static bool IsWindowFocused(ImGuiFocusedFlags flags)
		{
			byte ret = IsWindowFocusedNative(flags);
			return ret != 0;
		}

		public static bool IsWindowFocused()
		{
			byte ret = IsWindowFocusedNative((ImGuiFocusedFlags)(0));
			return ret != 0;
		}

		internal static byte IsWindowHoveredNative(ImGuiHoveredFlags flags)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiHoveredFlags, byte>)vt[37])(flags);
		}

		public static bool IsWindowHovered(ImGuiHoveredFlags flags)
		{
			byte ret = IsWindowHoveredNative(flags);
			return ret != 0;
		}

		public static bool IsWindowHovered()
		{
			byte ret = IsWindowHoveredNative((ImGuiHoveredFlags)(0));
			return ret != 0;
		}

		internal static ImDrawList* GetWindowDrawListNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImDrawList*>)vt[38])();
		}

		public static ImDrawListPtr GetWindowDrawList()
		{
			ImDrawListPtr ret = GetWindowDrawListNative();
			return ret;
		}

		internal static float GetWindowDpiScaleNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[39])();
		}

		public static float GetWindowDpiScale()
		{
			float ret = GetWindowDpiScaleNative();
			return ret;
		}

		internal static void GetWindowPosNative(Vector2* output)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[40])(output);
		}

		public static Vector2 GetWindowPos()
		{
			Vector2 ret;
			GetWindowPosNative(&ret);
			return ret;
		}

		public static void GetWindowPos(Vector2* output)
		{
			GetWindowPosNative(output);
		}

		public static void GetWindowPos(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetWindowPosNative((Vector2*)poutput);
			}
		}

		internal static void GetWindowSizeNative(Vector2* output)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[41])(output);
		}

		public static Vector2 GetWindowSize()
		{
			Vector2 ret;
			GetWindowSizeNative(&ret);
			return ret;
		}

		public static void GetWindowSize(Vector2* output)
		{
			GetWindowSizeNative(output);
		}

		public static void GetWindowSize(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetWindowSizeNative((Vector2*)poutput);
			}
		}

		internal static float GetWindowWidthNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[42])();
		}

		public static float GetWindowWidth()
		{
			float ret = GetWindowWidthNative();
			return ret;
		}

		internal static float GetWindowHeightNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[43])();
		}

		public static float GetWindowHeight()
		{
			float ret = GetWindowHeightNative();
			return ret;
		}

		internal static ImGuiViewport* GetWindowViewportNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiViewport*>)vt[44])();
		}

		public static ImGuiViewportPtr GetWindowViewport()
		{
			ImGuiViewportPtr ret = GetWindowViewportNative();
			return ret;
		}

		internal static void SetNextWindowPosNative(Vector2 pos, ImGuiCond cond, Vector2 pivot)
		{
			((delegate* unmanaged[Cdecl]<Vector2, ImGuiCond, Vector2, void>)vt[45])(pos, cond, pivot);
		}

		public static void SetNextWindowPos(Vector2 pos, ImGuiCond cond, Vector2 pivot)
		{
			SetNextWindowPosNative(pos, cond, pivot);
		}

		public static void SetNextWindowPos(Vector2 pos, ImGuiCond cond)
		{
			SetNextWindowPosNative(pos, cond, (Vector2)(new Vector2(0,0)));
		}

		public static void SetNextWindowPos(Vector2 pos)
		{
			SetNextWindowPosNative(pos, (ImGuiCond)(0), (Vector2)(new Vector2(0,0)));
		}

		public static void SetNextWindowPos(Vector2 pos, Vector2 pivot)
		{
			SetNextWindowPosNative(pos, (ImGuiCond)(0), pivot);
		}

		internal static void SetNextWindowSizeNative(Vector2 size, ImGuiCond cond)
		{
			((delegate* unmanaged[Cdecl]<Vector2, ImGuiCond, void>)vt[46])(size, cond);
		}

		public static void SetNextWindowSize(Vector2 size, ImGuiCond cond)
		{
			SetNextWindowSizeNative(size, cond);
		}

		public static void SetNextWindowSize(Vector2 size)
		{
			SetNextWindowSizeNative(size, (ImGuiCond)(0));
		}

		internal static void SetNextWindowSizeConstraintsNative(Vector2 sizeMin, Vector2 sizeMax, ImGuiSizeCallback customCallback, void* customCallbackData)
		{
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, delegate*<ImGuiSizeCallbackData*, void>, void*, void>)vt[47])(sizeMin, sizeMax, (delegate*<ImGuiSizeCallbackData*, void>)Marshal.GetFunctionPointerForDelegate(customCallback), customCallbackData);
		}

		public static void SetNextWindowSizeConstraints(Vector2 sizeMin, Vector2 sizeMax, ImGuiSizeCallback customCallback, void* customCallbackData)
		{
			SetNextWindowSizeConstraintsNative(sizeMin, sizeMax, customCallback, customCallbackData);
		}

		public static void SetNextWindowSizeConstraints(Vector2 sizeMin, Vector2 sizeMax, ImGuiSizeCallback customCallback)
		{
			SetNextWindowSizeConstraintsNative(sizeMin, sizeMax, customCallback, (void*)(default));
		}

		public static void SetNextWindowSizeConstraints(Vector2 sizeMin, Vector2 sizeMax)
		{
			SetNextWindowSizeConstraintsNative(sizeMin, sizeMax, (ImGuiSizeCallback)(default), (void*)(default));
		}

		public static void SetNextWindowSizeConstraints(Vector2 sizeMin, Vector2 sizeMax, void* customCallbackData)
		{
			SetNextWindowSizeConstraintsNative(sizeMin, sizeMax, (ImGuiSizeCallback)(default), customCallbackData);
		}

		internal static void SetNextWindowContentSizeNative(Vector2 size)
		{
			((delegate* unmanaged[Cdecl]<Vector2, void>)vt[48])(size);
		}

		public static void SetNextWindowContentSize(Vector2 size)
		{
			SetNextWindowContentSizeNative(size);
		}

		internal static void SetNextWindowCollapsedNative(byte collapsed, ImGuiCond cond)
		{
			((delegate* unmanaged[Cdecl]<byte, ImGuiCond, void>)vt[49])(collapsed, cond);
		}

		public static void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
		{
			SetNextWindowCollapsedNative(collapsed ? (byte)1 : (byte)0, cond);
		}

		public static void SetNextWindowCollapsed(bool collapsed)
		{
			SetNextWindowCollapsedNative(collapsed ? (byte)1 : (byte)0, (ImGuiCond)(0));
		}

		internal static void SetNextWindowFocusNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[50])();
		}

		public static void SetNextWindowFocus()
		{
			SetNextWindowFocusNative();
		}

		internal static void SetNextWindowScrollNative(Vector2 scroll)
		{
			((delegate* unmanaged[Cdecl]<Vector2, void>)vt[51])(scroll);
		}

		public static void SetNextWindowScroll(Vector2 scroll)
		{
			SetNextWindowScrollNative(scroll);
		}

		internal static void SetNextWindowBgAlphaNative(float alpha)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[52])(alpha);
		}

		public static void SetNextWindowBgAlpha(float alpha)
		{
			SetNextWindowBgAlphaNative(alpha);
		}

		internal static void SetNextWindowViewportNative(int viewportId)
		{
			((delegate* unmanaged[Cdecl]<int, void>)vt[53])(viewportId);
		}

		public static void SetNextWindowViewport(int viewportId)
		{
			SetNextWindowViewportNative(viewportId);
		}

		internal static void SetWindowPosNative(Vector2 pos, ImGuiCond cond)
		{
			((delegate* unmanaged[Cdecl]<Vector2, ImGuiCond, void>)vt[54])(pos, cond);
		}

		public static void SetWindowPos(Vector2 pos, ImGuiCond cond)
		{
			SetWindowPosNative(pos, cond);
		}

		public static void SetWindowPos(Vector2 pos)
		{
			SetWindowPosNative(pos, (ImGuiCond)(0));
		}

		internal static void SetWindowSizeNative(Vector2 size, ImGuiCond cond)
		{
			((delegate* unmanaged[Cdecl]<Vector2, ImGuiCond, void>)vt[55])(size, cond);
		}

		public static void SetWindowSize(Vector2 size, ImGuiCond cond)
		{
			SetWindowSizeNative(size, cond);
		}

		public static void SetWindowSize(Vector2 size)
		{
			SetWindowSizeNative(size, (ImGuiCond)(0));
		}

		internal static void SetWindowCollapsedNative(byte collapsed, ImGuiCond cond)
		{
			((delegate* unmanaged[Cdecl]<byte, ImGuiCond, void>)vt[56])(collapsed, cond);
		}

		public static void SetWindowCollapsed(bool collapsed, ImGuiCond cond)
		{
			SetWindowCollapsedNative(collapsed ? (byte)1 : (byte)0, cond);
		}

		public static void SetWindowCollapsed(bool collapsed)
		{
			SetWindowCollapsedNative(collapsed ? (byte)1 : (byte)0, (ImGuiCond)(0));
		}

		internal static void SetWindowFocusNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[57])();
		}

		public static void SetWindowFocus()
		{
			SetWindowFocusNative();
		}

		internal static void SetWindowFontScaleNative(float scale)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[58])(scale);
		}

		public static void SetWindowFontScale(float scale)
		{
			SetWindowFontScaleNative(scale);
		}

		internal static void SetWindowPosNative(byte* name, Vector2 pos, ImGuiCond cond)
		{
			((delegate* unmanaged[Cdecl]<byte*, Vector2, ImGuiCond, void>)vt[59])(name, pos, cond);
		}

		public static void SetWindowPos(byte* name, Vector2 pos, ImGuiCond cond)
		{
			SetWindowPosNative(name, pos, cond);
		}

		public static void SetWindowPos(byte* name, Vector2 pos)
		{
			SetWindowPosNative(name, pos, (ImGuiCond)(0));
		}

		public static void SetWindowPos(ref byte name, Vector2 pos, ImGuiCond cond)
		{
			fixed (byte* pname = &name)
			{
				SetWindowPosNative((byte*)pname, pos, cond);
			}
		}

		public static void SetWindowPos(ref byte name, Vector2 pos)
		{
			fixed (byte* pname = &name)
			{
				SetWindowPosNative((byte*)pname, pos, (ImGuiCond)(0));
			}
		}

		public static void SetWindowPos(string name, Vector2 pos, ImGuiCond cond)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetWindowPosNative(pStr0, pos, cond);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void SetWindowPos(string name, Vector2 pos)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetWindowPosNative(pStr0, pos, (ImGuiCond)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void SetWindowSizeNative(byte* name, Vector2 size, ImGuiCond cond)
		{
			((delegate* unmanaged[Cdecl]<byte*, Vector2, ImGuiCond, void>)vt[60])(name, size, cond);
		}

		public static void SetWindowSize(byte* name, Vector2 size, ImGuiCond cond)
		{
			SetWindowSizeNative(name, size, cond);
		}

		public static void SetWindowSize(byte* name, Vector2 size)
		{
			SetWindowSizeNative(name, size, (ImGuiCond)(0));
		}

		public static void SetWindowSize(ref byte name, Vector2 size, ImGuiCond cond)
		{
			fixed (byte* pname = &name)
			{
				SetWindowSizeNative((byte*)pname, size, cond);
			}
		}

		public static void SetWindowSize(ref byte name, Vector2 size)
		{
			fixed (byte* pname = &name)
			{
				SetWindowSizeNative((byte*)pname, size, (ImGuiCond)(0));
			}
		}

		public static void SetWindowSize(string name, Vector2 size, ImGuiCond cond)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetWindowSizeNative(pStr0, size, cond);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void SetWindowSize(string name, Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetWindowSizeNative(pStr0, size, (ImGuiCond)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void SetWindowCollapsedNative(byte* name, byte collapsed, ImGuiCond cond)
		{
			((delegate* unmanaged[Cdecl]<byte*, byte, ImGuiCond, void>)vt[61])(name, collapsed, cond);
		}

		public static void SetWindowCollapsed(byte* name, bool collapsed, ImGuiCond cond)
		{
			SetWindowCollapsedNative(name, collapsed ? (byte)1 : (byte)0, cond);
		}

		public static void SetWindowCollapsed(byte* name, bool collapsed)
		{
			SetWindowCollapsedNative(name, collapsed ? (byte)1 : (byte)0, (ImGuiCond)(0));
		}

		public static void SetWindowCollapsed(ref byte name, bool collapsed, ImGuiCond cond)
		{
			fixed (byte* pname = &name)
			{
				SetWindowCollapsedNative((byte*)pname, collapsed ? (byte)1 : (byte)0, cond);
			}
		}

		public static void SetWindowCollapsed(ref byte name, bool collapsed)
		{
			fixed (byte* pname = &name)
			{
				SetWindowCollapsedNative((byte*)pname, collapsed ? (byte)1 : (byte)0, (ImGuiCond)(0));
			}
		}

		public static void SetWindowCollapsed(string name, bool collapsed, ImGuiCond cond)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetWindowCollapsedNative(pStr0, collapsed ? (byte)1 : (byte)0, cond);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void SetWindowCollapsed(string name, bool collapsed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetWindowCollapsedNative(pStr0, collapsed ? (byte)1 : (byte)0, (ImGuiCond)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void SetWindowFocusNative(byte* name)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[62])(name);
		}

		public static void SetWindowFocus(byte* name)
		{
			SetWindowFocusNative(name);
		}

		public static void SetWindowFocus(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				SetWindowFocusNative((byte*)pname);
			}
		}

		public static void SetWindowFocus(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetWindowFocusNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static float GetScrollXNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[63])();
		}

		public static float GetScrollX()
		{
			float ret = GetScrollXNative();
			return ret;
		}

		internal static float GetScrollYNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[64])();
		}

		public static float GetScrollY()
		{
			float ret = GetScrollYNative();
			return ret;
		}

		internal static void SetScrollXNative(float scrollX)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[65])(scrollX);
		}

		public static void SetScrollX(float scrollX)
		{
			SetScrollXNative(scrollX);
		}

		internal static void SetScrollYNative(float scrollY)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[66])(scrollY);
		}

		public static void SetScrollY(float scrollY)
		{
			SetScrollYNative(scrollY);
		}

		internal static float GetScrollMaxXNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[67])();
		}

		public static float GetScrollMaxX()
		{
			float ret = GetScrollMaxXNative();
			return ret;
		}

		internal static float GetScrollMaxYNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[68])();
		}

		public static float GetScrollMaxY()
		{
			float ret = GetScrollMaxYNative();
			return ret;
		}

		internal static void SetScrollHereXNative(float centerXRatio)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[69])(centerXRatio);
		}

		public static void SetScrollHereX(float centerXRatio)
		{
			SetScrollHereXNative(centerXRatio);
		}

		public static void SetScrollHereX()
		{
			SetScrollHereXNative((float)(0.5f));
		}

		internal static void SetScrollHereYNative(float centerYRatio)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[70])(centerYRatio);
		}

		public static void SetScrollHereY(float centerYRatio)
		{
			SetScrollHereYNative(centerYRatio);
		}

		public static void SetScrollHereY()
		{
			SetScrollHereYNative((float)(0.5f));
		}

		internal static void SetScrollFromPosXNative(float localX, float centerXRatio)
		{
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[71])(localX, centerXRatio);
		}

		public static void SetScrollFromPosX(float localX, float centerXRatio)
		{
			SetScrollFromPosXNative(localX, centerXRatio);
		}

		public static void SetScrollFromPosX(float localX)
		{
			SetScrollFromPosXNative(localX, (float)(0.5f));
		}

		internal static void SetScrollFromPosYNative(float localY, float centerYRatio)
		{
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[72])(localY, centerYRatio);
		}

		public static void SetScrollFromPosY(float localY, float centerYRatio)
		{
			SetScrollFromPosYNative(localY, centerYRatio);
		}

		public static void SetScrollFromPosY(float localY)
		{
			SetScrollFromPosYNative(localY, (float)(0.5f));
		}

		internal static void PushFontNative(ImFont* font)
		{
			((delegate* unmanaged[Cdecl]<ImFont*, void>)vt[73])(font);
		}

		public static void PushFont(ImFontPtr font)
		{
			PushFontNative(font);
		}

		public static void PushFont(ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				PushFontNative((ImFont*)pfont);
			}
		}

		internal static void PopFontNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[74])();
		}

		public static void PopFont()
		{
			PopFontNative();
		}

		internal static void PushStyleColorNative(ImGuiCol idx, uint col)
		{
			((delegate* unmanaged[Cdecl]<ImGuiCol, uint, void>)vt[75])(idx, col);
		}

		public static void PushStyleColor(ImGuiCol idx, uint col)
		{
			PushStyleColorNative(idx, col);
		}

		internal static void PushStyleColorNative(ImGuiCol idx, Vector4 col)
		{
			((delegate* unmanaged[Cdecl]<ImGuiCol, Vector4, void>)vt[76])(idx, col);
		}

		public static void PushStyleColor(ImGuiCol idx, Vector4 col)
		{
			PushStyleColorNative(idx, col);
		}

		internal static void PopStyleColorNative(int count)
		{
			((delegate* unmanaged[Cdecl]<int, void>)vt[77])(count);
		}

		public static void PopStyleColor(int count)
		{
			PopStyleColorNative(count);
		}

		public static void PopStyleColor()
		{
			PopStyleColorNative((int)(1));
		}

		internal static void PushStyleVarNative(ImGuiStyleVar idx, float val)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStyleVar, float, void>)vt[78])(idx, val);
		}

		public static void PushStyleVar(ImGuiStyleVar idx, float val)
		{
			PushStyleVarNative(idx, val);
		}

		internal static void PushStyleVarNative(ImGuiStyleVar idx, Vector2 val)
		{
			((delegate* unmanaged[Cdecl]<ImGuiStyleVar, Vector2, void>)vt[79])(idx, val);
		}

		public static void PushStyleVar(ImGuiStyleVar idx, Vector2 val)
		{
			PushStyleVarNative(idx, val);
		}

		internal static void PopStyleVarNative(int count)
		{
			((delegate* unmanaged[Cdecl]<int, void>)vt[80])(count);
		}

		public static void PopStyleVar(int count)
		{
			PopStyleVarNative(count);
		}

		public static void PopStyleVar()
		{
			PopStyleVarNative((int)(1));
		}

		internal static void PushItemFlagNative(ImGuiItemFlags option, byte enabled)
		{
			((delegate* unmanaged[Cdecl]<ImGuiItemFlags, byte, void>)vt[81])(option, enabled);
		}

		public static void PushItemFlag(ImGuiItemFlags option, bool enabled)
		{
			PushItemFlagNative(option, enabled ? (byte)1 : (byte)0);
		}

		internal static void PopItemFlagNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[82])();
		}

		public static void PopItemFlag()
		{
			PopItemFlagNative();
		}

		internal static void PushItemWidthNative(float itemWidth)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[83])(itemWidth);
		}

		public static void PushItemWidth(float itemWidth)
		{
			PushItemWidthNative(itemWidth);
		}

		internal static void PopItemWidthNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[84])();
		}

		public static void PopItemWidth()
		{
			PopItemWidthNative();
		}

		internal static void SetNextItemWidthNative(float itemWidth)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[85])(itemWidth);
		}

		public static void SetNextItemWidth(float itemWidth)
		{
			SetNextItemWidthNative(itemWidth);
		}

		internal static float CalcItemWidthNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[86])();
		}

		public static float CalcItemWidth()
		{
			float ret = CalcItemWidthNative();
			return ret;
		}

		internal static void PushTextWrapPosNative(float wrapLocalPosX)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[87])(wrapLocalPosX);
		}

		public static void PushTextWrapPos(float wrapLocalPosX)
		{
			PushTextWrapPosNative(wrapLocalPosX);
		}

		public static void PushTextWrapPos()
		{
			PushTextWrapPosNative((float)(0.0f));
		}

		internal static void PopTextWrapPosNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[88])();
		}

		public static void PopTextWrapPos()
		{
			PopTextWrapPosNative();
		}

		internal static ImFont* GetFontNative()
		{
			return ((delegate* unmanaged[Cdecl]<ImFont*>)vt[89])();
		}

		public static ImFontPtr GetFont()
		{
			ImFontPtr ret = GetFontNative();
			return ret;
		}

		internal static float GetFontSizeNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[90])();
		}

		public static float GetFontSize()
		{
			float ret = GetFontSizeNative();
			return ret;
		}

		internal static void GetFontTexUvWhitePixelNative(Vector2* output)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[91])(output);
		}

		public static Vector2 GetFontTexUvWhitePixel()
		{
			Vector2 ret;
			GetFontTexUvWhitePixelNative(&ret);
			return ret;
		}

		public static void GetFontTexUvWhitePixel(Vector2* output)
		{
			GetFontTexUvWhitePixelNative(output);
		}

		public static void GetFontTexUvWhitePixel(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetFontTexUvWhitePixelNative((Vector2*)poutput);
			}
		}

		internal static uint GetColorU32Native(ImGuiCol idx, float alphaMul)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiCol, float, uint>)vt[92])(idx, alphaMul);
		}

		public static uint GetColorU32(ImGuiCol idx, float alphaMul)
		{
			uint ret = GetColorU32Native(idx, alphaMul);
			return ret;
		}

		public static uint GetColorU32(ImGuiCol idx)
		{
			uint ret = GetColorU32Native(idx, (float)(1.0f));
			return ret;
		}

		internal static uint GetColorU32Native(Vector4 col)
		{
			return ((delegate* unmanaged[Cdecl]<Vector4, uint>)vt[93])(col);
		}

		public static uint GetColorU32(Vector4 col)
		{
			uint ret = GetColorU32Native(col);
			return ret;
		}

		internal static uint GetColorU32Native(uint col, float alphaMul)
		{
			return ((delegate* unmanaged[Cdecl]<uint, float, uint>)vt[94])(col, alphaMul);
		}

		public static uint GetColorU32(uint col, float alphaMul)
		{
			uint ret = GetColorU32Native(col, alphaMul);
			return ret;
		}

		public static uint GetColorU32(uint col)
		{
			uint ret = GetColorU32Native(col, (float)(1.0f));
			return ret;
		}

		internal static Vector4* GetStyleColorVec4Native(ImGuiCol idx)
		{
			return ((delegate* unmanaged[Cdecl]<ImGuiCol, Vector4*>)vt[95])(idx);
		}

		public static Vector4* GetStyleColorVec4(ImGuiCol idx)
		{
			Vector4* ret = GetStyleColorVec4Native(idx);
			return ret;
		}

		internal static void GetCursorScreenPosNative(Vector2* output)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[96])(output);
		}

		public static Vector2 GetCursorScreenPos()
		{
			Vector2 ret;
			GetCursorScreenPosNative(&ret);
			return ret;
		}

		public static void GetCursorScreenPos(Vector2* output)
		{
			GetCursorScreenPosNative(output);
		}

		public static void GetCursorScreenPos(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetCursorScreenPosNative((Vector2*)poutput);
			}
		}

		internal static void SetCursorScreenPosNative(Vector2 pos)
		{
			((delegate* unmanaged[Cdecl]<Vector2, void>)vt[97])(pos);
		}

		public static void SetCursorScreenPos(Vector2 pos)
		{
			SetCursorScreenPosNative(pos);
		}

		internal static void GetContentRegionAvailNative(Vector2* output)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[98])(output);
		}

		public static Vector2 GetContentRegionAvail()
		{
			Vector2 ret;
			GetContentRegionAvailNative(&ret);
			return ret;
		}

		public static void GetContentRegionAvail(Vector2* output)
		{
			GetContentRegionAvailNative(output);
		}

		public static void GetContentRegionAvail(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetContentRegionAvailNative((Vector2*)poutput);
			}
		}

		internal static void GetCursorPosNative(Vector2* output)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[99])(output);
		}

		public static Vector2 GetCursorPos()
		{
			Vector2 ret;
			GetCursorPosNative(&ret);
			return ret;
		}

		public static void GetCursorPos(Vector2* output)
		{
			GetCursorPosNative(output);
		}

		public static void GetCursorPos(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetCursorPosNative((Vector2*)poutput);
			}
		}

		internal static float GetCursorPosXNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[100])();
		}

		public static float GetCursorPosX()
		{
			float ret = GetCursorPosXNative();
			return ret;
		}

		internal static float GetCursorPosYNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[101])();
		}

		public static float GetCursorPosY()
		{
			float ret = GetCursorPosYNative();
			return ret;
		}

		internal static void SetCursorPosNative(Vector2 localPos)
		{
			((delegate* unmanaged[Cdecl]<Vector2, void>)vt[102])(localPos);
		}

		public static void SetCursorPos(Vector2 localPos)
		{
			SetCursorPosNative(localPos);
		}

		internal static void SetCursorPosXNative(float localX)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[103])(localX);
		}

		public static void SetCursorPosX(float localX)
		{
			SetCursorPosXNative(localX);
		}

		internal static void SetCursorPosYNative(float localY)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[104])(localY);
		}

		public static void SetCursorPosY(float localY)
		{
			SetCursorPosYNative(localY);
		}

		internal static void GetCursorStartPosNative(Vector2* output)
		{
			((delegate* unmanaged[Cdecl]<Vector2*, void>)vt[105])(output);
		}

		public static Vector2 GetCursorStartPos()
		{
			Vector2 ret;
			GetCursorStartPosNative(&ret);
			return ret;
		}

		public static void GetCursorStartPos(Vector2* output)
		{
			GetCursorStartPosNative(output);
		}

		public static void GetCursorStartPos(ref Vector2 output)
		{
			fixed (Vector2* poutput = &output)
			{
				GetCursorStartPosNative((Vector2*)poutput);
			}
		}

		internal static void SeparatorNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[106])();
		}

		public static void Separator()
		{
			SeparatorNative();
		}

		internal static void SameLineNative(float offsetFromStartX, float spacing)
		{
			((delegate* unmanaged[Cdecl]<float, float, void>)vt[107])(offsetFromStartX, spacing);
		}

		public static void SameLine(float offsetFromStartX, float spacing)
		{
			SameLineNative(offsetFromStartX, spacing);
		}

		public static void SameLine(float offsetFromStartX)
		{
			SameLineNative(offsetFromStartX, (float)(-1.0f));
		}

		public static void SameLine()
		{
			SameLineNative((float)(0.0f), (float)(-1.0f));
		}

		internal static void NewLineNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[108])();
		}

		public static void NewLine()
		{
			NewLineNative();
		}

		internal static void SpacingNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[109])();
		}

		public static void Spacing()
		{
			SpacingNative();
		}

		internal static void DummyNative(Vector2 size)
		{
			((delegate* unmanaged[Cdecl]<Vector2, void>)vt[110])(size);
		}

		public static void Dummy(Vector2 size)
		{
			DummyNative(size);
		}

		internal static void IndentNative(float indentW)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[111])(indentW);
		}

		public static void Indent(float indentW)
		{
			IndentNative(indentW);
		}

		public static void Indent()
		{
			IndentNative((float)(0.0f));
		}

		internal static void UnindentNative(float indentW)
		{
			((delegate* unmanaged[Cdecl]<float, void>)vt[112])(indentW);
		}

		public static void Unindent(float indentW)
		{
			UnindentNative(indentW);
		}

		public static void Unindent()
		{
			UnindentNative((float)(0.0f));
		}

		internal static void BeginGroupNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[113])();
		}

		public static void BeginGroup()
		{
			BeginGroupNative();
		}

		internal static void EndGroupNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[114])();
		}

		public static void EndGroup()
		{
			EndGroupNative();
		}

		internal static void AlignTextToFramePaddingNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[115])();
		}

		public static void AlignTextToFramePadding()
		{
			AlignTextToFramePaddingNative();
		}

		internal static float GetTextLineHeightNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[116])();
		}

		public static float GetTextLineHeight()
		{
			float ret = GetTextLineHeightNative();
			return ret;
		}

		internal static float GetTextLineHeightWithSpacingNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[117])();
		}

		public static float GetTextLineHeightWithSpacing()
		{
			float ret = GetTextLineHeightWithSpacingNative();
			return ret;
		}

		internal static float GetFrameHeightNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[118])();
		}

		public static float GetFrameHeight()
		{
			float ret = GetFrameHeightNative();
			return ret;
		}

		internal static float GetFrameHeightWithSpacingNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[119])();
		}

		public static float GetFrameHeightWithSpacing()
		{
			float ret = GetFrameHeightWithSpacingNative();
			return ret;
		}

		internal static void PushIDNative(byte* strId)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[120])(strId);
		}

		public static void PushID(byte* strId)
		{
			PushIDNative(strId);
		}

		public static void PushID(ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				PushIDNative((byte*)pstrId);
			}
		}

		public static void PushID(string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushIDNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void PushIDNative(byte* strIdBegin, byte* strIdEnd)
		{
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[121])(strIdBegin, strIdEnd);
		}

		public static void PushID(byte* strIdBegin, byte* strIdEnd)
		{
			PushIDNative(strIdBegin, strIdEnd);
		}

		public static void PushID(ref byte strIdBegin, byte* strIdEnd)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				PushIDNative((byte*)pstrIdBegin, strIdEnd);
			}
		}

		public static void PushID(string strIdBegin, byte* strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushIDNative(pStr0, strIdEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PushID(byte* strIdBegin, ref byte strIdEnd)
		{
			fixed (byte* pstrIdEnd = &strIdEnd)
			{
				PushIDNative(strIdBegin, (byte*)pstrIdEnd);
			}
		}

		public static void PushID(byte* strIdBegin, string strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushIDNative(strIdBegin, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PushID(ref byte strIdBegin, ref byte strIdEnd)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				fixed (byte* pstrIdEnd = &strIdEnd)
				{
					PushIDNative((byte*)pstrIdBegin, (byte*)pstrIdEnd);
				}
			}
		}

		public static void PushID(string strIdBegin, string strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strIdEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strIdEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			PushIDNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void PushIDNative(void* ptrId)
		{
			((delegate* unmanaged[Cdecl]<void*, void>)vt[122])(ptrId);
		}

		public static void PushID(void* ptrId)
		{
			PushIDNative(ptrId);
		}

		internal static void PushIDNative(int intId)
		{
			((delegate* unmanaged[Cdecl]<int, void>)vt[123])(intId);
		}

		public static void PushID(int intId)
		{
			PushIDNative(intId);
		}

		internal static void PopIDNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[124])();
		}

		public static void PopID()
		{
			PopIDNative();
		}

		internal static int GetIDNative(byte* strId)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, int>)vt[125])(strId);
		}

		public static int GetID(byte* strId)
		{
			int ret = GetIDNative(strId);
			return ret;
		}

		public static int GetID(ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				int ret = GetIDNative((byte*)pstrId);
				return ret;
			}
		}

		public static int GetID(string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetIDNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		internal static int GetIDNative(byte* strIdBegin, byte* strIdEnd)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)vt[126])(strIdBegin, strIdEnd);
		}

		public static int GetID(byte* strIdBegin, byte* strIdEnd)
		{
			int ret = GetIDNative(strIdBegin, strIdEnd);
			return ret;
		}

		public static int GetID(ref byte strIdBegin, byte* strIdEnd)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				int ret = GetIDNative((byte*)pstrIdBegin, strIdEnd);
				return ret;
			}
		}

		public static int GetID(string strIdBegin, byte* strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetIDNative(pStr0, strIdEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int GetID(byte* strIdBegin, ref byte strIdEnd)
		{
			fixed (byte* pstrIdEnd = &strIdEnd)
			{
				int ret = GetIDNative(strIdBegin, (byte*)pstrIdEnd);
				return ret;
			}
		}

		public static int GetID(byte* strIdBegin, string strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetIDNative(strIdBegin, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int GetID(ref byte strIdBegin, ref byte strIdEnd)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				fixed (byte* pstrIdEnd = &strIdEnd)
				{
					int ret = GetIDNative((byte*)pstrIdBegin, (byte*)pstrIdEnd);
					return ret;
				}
			}
		}

		public static int GetID(string strIdBegin, string strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strIdEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strIdEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = GetIDNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		internal static int GetIDNative(void* ptrId)
		{
			return ((delegate* unmanaged[Cdecl]<void*, int>)vt[127])(ptrId);
		}

		public static int GetID(void* ptrId)
		{
			int ret = GetIDNative(ptrId);
			return ret;
		}

		internal static int GetIDNative(int intId)
		{
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[128])(intId);
		}

		public static int GetID(int intId)
		{
			int ret = GetIDNative(intId);
			return ret;
		}

		internal static void TextUnformattedNative(byte* text, byte* textEnd)
		{
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[129])(text, textEnd);
		}

		public static void TextUnformatted(byte* text, byte* textEnd)
		{
			TextUnformattedNative(text, textEnd);
		}

		public static void TextUnformatted(byte* text)
		{
			TextUnformattedNative(text, (byte*)(default));
		}

		public static void TextUnformatted(ref byte text, byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				TextUnformattedNative((byte*)ptext, textEnd);
			}
		}

		public static void TextUnformatted(ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				TextUnformattedNative((byte*)ptext, (byte*)(default));
			}
		}

		public static void TextUnformatted(string text, byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextUnformattedNative(pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TextUnformatted(string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextUnformattedNative(pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TextUnformatted(byte* text, ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				TextUnformattedNative(text, (byte*)ptextEnd);
			}
		}

		public static void TextUnformatted(byte* text, string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextUnformattedNative(text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TextUnformatted(ref byte text, ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					TextUnformattedNative((byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		public static void TextUnformatted(string text, string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			TextUnformattedNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void TextNative(byte* fmt)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[130])(fmt);
		}

		public static void Text(byte* fmt)
		{
			TextNative(fmt);
		}

		public static void Text(ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextNative((byte*)pfmt);
			}
		}

		public static void Text(string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void TextVNative(byte* fmt, nuint args)
		{
			((delegate* unmanaged[Cdecl]<byte*, nuint, void>)vt[131])(fmt, args);
		}

		public static void TextV(byte* fmt, nuint args)
		{
			TextVNative(fmt, args);
		}

		public static void TextV(ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextVNative((byte*)pfmt, args);
			}
		}

		public static void TextV(string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void TextColoredNative(Vector4 col, byte* fmt)
		{
			((delegate* unmanaged[Cdecl]<Vector4, byte*, void>)vt[132])(col, fmt);
		}

		public static void TextColored(Vector4 col, byte* fmt)
		{
			TextColoredNative(col, fmt);
		}

		public static void TextColored(Vector4 col, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextColoredNative(col, (byte*)pfmt);
			}
		}

		public static void TextColored(Vector4 col, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextColoredNative(col, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void TextColoredVNative(Vector4 col, byte* fmt, nuint args)
		{
			((delegate* unmanaged[Cdecl]<Vector4, byte*, nuint, void>)vt[133])(col, fmt, args);
		}

		public static void TextColoredV(Vector4 col, byte* fmt, nuint args)
		{
			TextColoredVNative(col, fmt, args);
		}

		public static void TextColoredV(Vector4 col, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextColoredVNative(col, (byte*)pfmt, args);
			}
		}

		public static void TextColoredV(Vector4 col, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextColoredVNative(col, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void TextDisabledNative(byte* fmt)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[134])(fmt);
		}

		public static void TextDisabled(byte* fmt)
		{
			TextDisabledNative(fmt);
		}

		public static void TextDisabled(ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextDisabledNative((byte*)pfmt);
			}
		}

		public static void TextDisabled(string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextDisabledNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void TextDisabledVNative(byte* fmt, nuint args)
		{
			((delegate* unmanaged[Cdecl]<byte*, nuint, void>)vt[135])(fmt, args);
		}

		public static void TextDisabledV(byte* fmt, nuint args)
		{
			TextDisabledVNative(fmt, args);
		}

		public static void TextDisabledV(ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextDisabledVNative((byte*)pfmt, args);
			}
		}

		public static void TextDisabledV(string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextDisabledVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void TextWrappedNative(byte* fmt)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[136])(fmt);
		}

		public static void TextWrapped(byte* fmt)
		{
			TextWrappedNative(fmt);
		}

		public static void TextWrapped(ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextWrappedNative((byte*)pfmt);
			}
		}

		public static void TextWrapped(string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextWrappedNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void TextWrappedVNative(byte* fmt, nuint args)
		{
			((delegate* unmanaged[Cdecl]<byte*, nuint, void>)vt[137])(fmt, args);
		}

		public static void TextWrappedV(byte* fmt, nuint args)
		{
			TextWrappedVNative(fmt, args);
		}

		public static void TextWrappedV(ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextWrappedVNative((byte*)pfmt, args);
			}
		}

		public static void TextWrappedV(string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextWrappedVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void LabelTextNative(byte* label, byte* fmt)
		{
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[138])(label, fmt);
		}

		public static void LabelText(byte* label, byte* fmt)
		{
			LabelTextNative(label, fmt);
		}

		public static void LabelText(ref byte label, byte* fmt)
		{
			fixed (byte* plabel = &label)
			{
				LabelTextNative((byte*)plabel, fmt);
			}
		}

		public static void LabelText(string label, byte* fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LabelTextNative(pStr0, fmt);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LabelText(byte* label, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				LabelTextNative(label, (byte*)pfmt);
			}
		}

		public static void LabelText(byte* label, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LabelTextNative(label, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LabelText(ref byte label, ref byte fmt)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pfmt = &fmt)
				{
					LabelTextNative((byte*)plabel, (byte*)pfmt);
				}
			}
		}

		public static void LabelText(string label, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			LabelTextNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void LabelTextVNative(byte* label, byte* fmt, nuint args)
		{
			((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, void>)vt[139])(label, fmt, args);
		}

		public static void LabelTextV(byte* label, byte* fmt, nuint args)
		{
			LabelTextVNative(label, fmt, args);
		}

		public static void LabelTextV(ref byte label, byte* fmt, nuint args)
		{
			fixed (byte* plabel = &label)
			{
				LabelTextVNative((byte*)plabel, fmt, args);
			}
		}

		public static void LabelTextV(string label, byte* fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LabelTextVNative(pStr0, fmt, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LabelTextV(byte* label, ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				LabelTextVNative(label, (byte*)pfmt, args);
			}
		}

		public static void LabelTextV(byte* label, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LabelTextVNative(label, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LabelTextV(ref byte label, ref byte fmt, nuint args)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pfmt = &fmt)
				{
					LabelTextVNative((byte*)plabel, (byte*)pfmt, args);
				}
			}
		}

		public static void LabelTextV(string label, string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			LabelTextVNative(pStr0, pStr1, args);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void BulletTextNative(byte* fmt)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[140])(fmt);
		}

		public static void BulletText(byte* fmt)
		{
			BulletTextNative(fmt);
		}

		public static void BulletText(ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				BulletTextNative((byte*)pfmt);
			}
		}

		public static void BulletText(string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BulletTextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void BulletTextVNative(byte* fmt, nuint args)
		{
			((delegate* unmanaged[Cdecl]<byte*, nuint, void>)vt[141])(fmt, args);
		}

		public static void BulletTextV(byte* fmt, nuint args)
		{
			BulletTextVNative(fmt, args);
		}

		public static void BulletTextV(ref byte fmt, nuint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				BulletTextVNative((byte*)pfmt, args);
			}
		}

		public static void BulletTextV(string fmt, nuint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BulletTextVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void SeparatorTextNative(byte* label)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[142])(label);
		}

		public static void SeparatorText(byte* label)
		{
			SeparatorTextNative(label);
		}

		public static void SeparatorText(ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				SeparatorTextNative((byte*)plabel);
			}
		}

		public static void SeparatorText(string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SeparatorTextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static byte ButtonNative(byte* label, Vector2 size)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, Vector2, byte>)vt[143])(label, size);
		}

		public static bool Button(byte* label, Vector2 size)
		{
			byte ret = ButtonNative(label, size);
			return ret != 0;
		}

		public static bool Button(byte* label)
		{
			byte ret = ButtonNative(label, (Vector2)(new Vector2(0,0)));
			return ret != 0;
		}

		public static bool Button(ref byte label, Vector2 size)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ButtonNative((byte*)plabel, size);
				return ret != 0;
			}
		}

		public static bool Button(ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ButtonNative((byte*)plabel, (Vector2)(new Vector2(0,0)));
				return ret != 0;
			}
		}

		public static bool Button(string label, Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ButtonNative(pStr0, size);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool Button(string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ButtonNative(pStr0, (Vector2)(new Vector2(0,0)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		internal static byte SmallButtonNative(byte* label)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)vt[144])(label);
		}

		public static bool SmallButton(byte* label)
		{
			byte ret = SmallButtonNative(label);
			return ret != 0;
		}

		public static bool SmallButton(ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = SmallButtonNative((byte*)plabel);
				return ret != 0;
			}
		}

		public static bool SmallButton(string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SmallButtonNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		internal static byte InvisibleButtonNative(byte* strId, Vector2 size, ImGuiButtonFlags flags)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, Vector2, ImGuiButtonFlags, byte>)vt[145])(strId, size, flags);
		}

		public static bool InvisibleButton(byte* strId, Vector2 size, ImGuiButtonFlags flags)
		{
			byte ret = InvisibleButtonNative(strId, size, flags);
			return ret != 0;
		}

		public static bool InvisibleButton(byte* strId, Vector2 size)
		{
			byte ret = InvisibleButtonNative(strId, size, (ImGuiButtonFlags)(0));
			return ret != 0;
		}

		public static bool InvisibleButton(ref byte strId, Vector2 size, ImGuiButtonFlags flags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = InvisibleButtonNative((byte*)pstrId, size, flags);
				return ret != 0;
			}
		}

		public static bool InvisibleButton(ref byte strId, Vector2 size)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = InvisibleButtonNative((byte*)pstrId, size, (ImGuiButtonFlags)(0));
				return ret != 0;
			}
		}

		public static bool InvisibleButton(string strId, Vector2 size, ImGuiButtonFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InvisibleButtonNative(pStr0, size, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool InvisibleButton(string strId, Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InvisibleButtonNative(pStr0, size, (ImGuiButtonFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		internal static byte ArrowButtonNative(byte* strId, ImGuiDir dir)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiDir, byte>)vt[146])(strId, dir);
		}

		public static bool ArrowButton(byte* strId, ImGuiDir dir)
		{
			byte ret = ArrowButtonNative(strId, dir);
			return ret != 0;
		}

		public static bool ArrowButton(ref byte strId, ImGuiDir dir)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ArrowButtonNative((byte*)pstrId, dir);
				return ret != 0;
			}
		}

		public static bool ArrowButton(string strId, ImGuiDir dir)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ArrowButtonNative(pStr0, dir);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		internal static byte CheckboxNative(byte* label, bool* v)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, bool*, byte>)vt[147])(label, v);
		}

		public static bool Checkbox(byte* label, bool* v)
		{
			byte ret = CheckboxNative(label, v);
			return ret != 0;
		}

		public static bool Checkbox(ref byte label, bool* v)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = CheckboxNative((byte*)plabel, v);
				return ret != 0;
			}
		}

		public static bool Checkbox(string label, bool* v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CheckboxNative(pStr0, v);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool Checkbox(byte* label, ref bool v)
		{
			fixed (bool* pv = &v)
			{
				byte ret = CheckboxNative(label, (bool*)pv);
				return ret != 0;
			}
		}

		public static bool Checkbox(ref byte label, ref bool v)
		{
			fixed (byte* plabel = &label)
			{
				fixed (bool* pv = &v)
				{
					byte ret = CheckboxNative((byte*)plabel, (bool*)pv);
					return ret != 0;
				}
			}
		}

		public static bool Checkbox(string label, ref bool v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* pv = &v)
			{
				byte ret = CheckboxNative(pStr0, (bool*)pv);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		internal static byte CheckboxFlagsNative(byte* label, int* flags, int flagsValue)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int, byte>)vt[148])(label, flags, flagsValue);
		}

		public static bool CheckboxFlags(byte* label, int* flags, int flagsValue)
		{
			byte ret = CheckboxFlagsNative(label, flags, flagsValue);
			return ret != 0;
		}

		public static bool CheckboxFlags(ref byte label, int* flags, int flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = CheckboxFlagsNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		public static bool CheckboxFlags(string label, int* flags, int flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CheckboxFlagsNative(pStr0, flags, flagsValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool CheckboxFlags(byte* label, ref int flags, int flagsValue)
		{
			fixed (int* pflags = &flags)
			{
				byte ret = CheckboxFlagsNative(label, (int*)pflags, flagsValue);
				return ret != 0;
			}
		}

		public static bool CheckboxFlags(ref byte label, ref int flags, int flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pflags = &flags)
				{
					byte ret = CheckboxFlagsNative((byte*)plabel, (int*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		public static bool CheckboxFlags(string label, ref int flags, int flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pflags = &flags)
			{
				byte ret = CheckboxFlagsNative(pStr0, (int*)pflags, flagsValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		internal static byte CheckboxFlagsNative(byte* label, uint* flags, uint flagsValue)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, uint*, uint, byte>)vt[149])(label, flags, flagsValue);
		}

		public static bool CheckboxFlags(byte* label, uint* flags, uint flagsValue)
		{
			byte ret = CheckboxFlagsNative(label, flags, flagsValue);
			return ret != 0;
		}

		public static bool CheckboxFlags(ref byte label, uint* flags, uint flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = CheckboxFlagsNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		public static bool CheckboxFlags(string label, uint* flags, uint flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CheckboxFlagsNative(pStr0, flags, flagsValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool CheckboxFlags(byte* label, ref uint flags, uint flagsValue)
		{
			fixed (uint* pflags = &flags)
			{
				byte ret = CheckboxFlagsNative(label, (uint*)pflags, flagsValue);
				return ret != 0;
			}
		}

		public static bool CheckboxFlags(ref byte label, ref uint flags, uint flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				fixed (uint* pflags = &flags)
				{
					byte ret = CheckboxFlagsNative((byte*)plabel, (uint*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		public static bool CheckboxFlags(string label, ref uint flags, uint flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* pflags = &flags)
			{
				byte ret = CheckboxFlagsNative(pStr0, (uint*)pflags, flagsValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		internal static byte RadioButtonNative(byte* label, byte active)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte, byte>)vt[150])(label, active);
		}

		public static bool RadioButton(byte* label, bool active)
		{
			byte ret = RadioButtonNative(label, active ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool RadioButton(ref byte label, bool active)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = RadioButtonNative((byte*)plabel, active ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		public static bool RadioButton(string label, bool active)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = RadioButtonNative(pStr0, active ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		internal static byte RadioButtonNative(byte* label, int* v, int vButton)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int, byte>)vt[151])(label, v, vButton);
		}

		public static bool RadioButton(byte* label, int* v, int vButton)
		{
			byte ret = RadioButtonNative(label, v, vButton);
			return ret != 0;
		}

		public static bool RadioButton(ref byte label, int* v, int vButton)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = RadioButtonNative((byte*)plabel, v, vButton);
				return ret != 0;
			}
		}

		public static bool RadioButton(string label, int* v, int vButton)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = RadioButtonNative(pStr0, v, vButton);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool RadioButton(byte* label, ref int v, int vButton)
		{
			fixed (int* pv = &v)
			{
				byte ret = RadioButtonNative(label, (int*)pv, vButton);
				return ret != 0;
			}
		}

		public static bool RadioButton(ref byte label, ref int v, int vButton)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pv = &v)
				{
					byte ret = RadioButtonNative((byte*)plabel, (int*)pv, vButton);
					return ret != 0;
				}
			}
		}

		public static bool RadioButton(string label, ref int v, int vButton)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pv = &v)
			{
				byte ret = RadioButtonNative(pStr0, (int*)pv, vButton);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		internal static void ProgressBarNative(float fraction, Vector2 sizeArg, byte* overlay)
		{
			((delegate* unmanaged[Cdecl]<float, Vector2, byte*, void>)vt[152])(fraction, sizeArg, overlay);
		}

		public static void ProgressBar(float fraction, Vector2 sizeArg, byte* overlay)
		{
			ProgressBarNative(fraction, sizeArg, overlay);
		}

		public static void ProgressBar(float fraction, Vector2 sizeArg)
		{
			ProgressBarNative(fraction, sizeArg, (byte*)(default));
		}

		public static void ProgressBar(float fraction)
		{
			ProgressBarNative(fraction, (Vector2)(new Vector2(-float.MinValue,0)), (byte*)(default));
		}

		public static void ProgressBar(float fraction, byte* overlay)
		{
			ProgressBarNative(fraction, (Vector2)(new Vector2(-float.MinValue,0)), overlay);
		}

		public static void ProgressBar(float fraction, Vector2 sizeArg, ref byte overlay)
		{
			fixed (byte* poverlay = &overlay)
			{
				ProgressBarNative(fraction, sizeArg, (byte*)poverlay);
			}
		}

		public static void ProgressBar(float fraction, ref byte overlay)
		{
			fixed (byte* poverlay = &overlay)
			{
				ProgressBarNative(fraction, (Vector2)(new Vector2(-float.MinValue,0)), (byte*)poverlay);
			}
		}

		public static void ProgressBar(float fraction, Vector2 sizeArg, string overlay)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (overlay != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(overlay);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(overlay, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ProgressBarNative(fraction, sizeArg, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ProgressBar(float fraction, string overlay)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (overlay != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(overlay);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(overlay, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ProgressBarNative(fraction, (Vector2)(new Vector2(-float.MinValue,0)), pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		internal static void BulletNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[153])();
		}

		public static void Bullet()
		{
			BulletNative();
		}

		internal static byte TextLinkNative(byte* label)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)vt[154])(label);
		}

		public static bool TextLink(byte* label)
		{
			byte ret = TextLinkNative(label);
			return ret != 0;
		}

		public static bool TextLink(ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TextLinkNative((byte*)plabel);
				return ret != 0;
			}
		}

		public static bool TextLink(string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TextLinkNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		internal static void TextLinkOpenURLNative(byte* label, byte* url)
		{
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[155])(label, url);
		}

		public static void TextLinkOpenURL(byte* label, byte* url)
		{
			TextLinkOpenURLNative(label, url);
		}

		public static void TextLinkOpenURL(byte* label)
		{
			TextLinkOpenURLNative(label, (byte*)(default));
		}

		public static void TextLinkOpenURL(ref byte label, byte* url)
		{
			fixed (byte* plabel = &label)
			{
				TextLinkOpenURLNative((byte*)plabel, url);
			}
		}

		public static void TextLinkOpenURL(ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				TextLinkOpenURLNative((byte*)plabel, (byte*)(default));
			}
		}

		public static void TextLinkOpenURL(string label, byte* url)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextLinkOpenURLNative(pStr0, url);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TextLinkOpenURL(string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextLinkOpenURLNative(pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TextLinkOpenURL(byte* label, ref byte url)
		{
			fixed (byte* purl = &url)
			{
				TextLinkOpenURLNative(label, (byte*)purl);
			}
		}

		public static void TextLinkOpenURL(byte* label, string url)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (url != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(url);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(url, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextLinkOpenURLNative(label, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void TextLinkOpenURL(ref byte label, ref byte url)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* purl = &url)
				{
					TextLinkOpenURLNative((byte*)plabel, (byte*)purl);
				}
			}
		}

		public static void TextLinkOpenURL(string label, string url)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (url != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(url);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(url, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			TextLinkOpenURLNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}
	}
}
