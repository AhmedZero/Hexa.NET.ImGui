// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
				}
			}
		}

		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						fixed (byte* plabel = &label)
						{
							DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
						}
					}
				}
			}
		}

		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (label != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(label);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, pStr0);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeDrawCmdShowMeshAndBoundingBoxNative(ImDrawList* outDrawList, ImDrawList* drawList, ImDrawCmd* drawCmd, byte showMesh, byte showAabb);

		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ImDrawListPtr drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
		}

		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ImDrawListPtr drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, drawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ref ImDrawList drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ref ImDrawList drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, (ImDrawList*)pdrawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ImDrawListPtr drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawCmd* pdrawCmd = &drawCmd)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ImDrawListPtr drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ref ImDrawList drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ref ImDrawList drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (ImDrawCmd* pdrawCmd = &drawCmd)
					{
						DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
					}
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeFont")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeFontNative(ImFont* font);

		public static void DebugNodeFont(ImFontPtr font)
		{
			DebugNodeFontNative(font);
		}

		public static void DebugNodeFont(ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontNative((ImFont*)pfont);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeFontGlyph")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeFontGlyphNative(ImFont* font, ImFontGlyph* glyph);

		public static void DebugNodeFontGlyph(ImFontPtr font, ImFontGlyphPtr glyph)
		{
			DebugNodeFontGlyphNative(font, glyph);
		}

		public static void DebugNodeFontGlyph(ref ImFont font, ImFontGlyphPtr glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontGlyphNative((ImFont*)pfont, glyph);
			}
		}

		public static void DebugNodeFontGlyph(ImFontPtr font, ref ImFontGlyph glyph)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				DebugNodeFontGlyphNative(font, (ImFontGlyph*)pglyph);
			}
		}

		public static void DebugNodeFontGlyph(ref ImFont font, ref ImFontGlyph glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					DebugNodeFontGlyphNative((ImFont*)pfont, (ImFontGlyph*)pglyph);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeStorage")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeStorageNative(ImGuiStorage* storage, byte* label);

		public static void DebugNodeStorage(ImGuiStoragePtr storage, byte* label)
		{
			DebugNodeStorageNative(storage, label);
		}

		public static void DebugNodeStorage(ref ImGuiStorage storage, byte* label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				DebugNodeStorageNative((ImGuiStorage*)pstorage, label);
			}
		}

		public static void DebugNodeStorage(ImGuiStoragePtr storage, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		public static void DebugNodeStorage(ImGuiStoragePtr storage, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeStorageNative(storage, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void DebugNodeStorage(ref ImGuiStorage storage, ref byte label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeStorageNative((ImGuiStorage*)pstorage, (byte*)plabel);
				}
			}
		}

		public static void DebugNodeStorage(ref ImGuiStorage storage, string label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeStorageNative((ImGuiStorage*)pstorage, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeTabBarNative(ImGuiTabBar* tabBar, byte* label);

		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, byte* label)
		{
			DebugNodeTabBarNative(tabBar, label);
		}

		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, byte* label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, label);
			}
		}

		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeTabBarNative(tabBar, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, ref byte label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, (byte*)plabel);
				}
			}
		}

		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, string label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeTable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeTableNative(ImGuiTable* table);

		public static void DebugNodeTable(ImGuiTablePtr table)
		{
			DebugNodeTableNative(table);
		}

		public static void DebugNodeTable(ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				DebugNodeTableNative((ImGuiTable*)ptable);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeTableSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeTableSettingsNative(ImGuiTableSettings* settings);

		public static void DebugNodeTableSettings(ImGuiTableSettingsPtr settings)
		{
			DebugNodeTableSettingsNative(settings);
		}

		public static void DebugNodeTableSettings(ref ImGuiTableSettings settings)
		{
			fixed (ImGuiTableSettings* psettings = &settings)
			{
				DebugNodeTableSettingsNative((ImGuiTableSettings*)psettings);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeInputTextState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeInputTextStateNative(ImGuiInputTextState* state);

		public static void DebugNodeInputTextState(ImGuiInputTextStatePtr state)
		{
			DebugNodeInputTextStateNative(state);
		}

		public static void DebugNodeInputTextState(ref ImGuiInputTextState state)
		{
			fixed (ImGuiInputTextState* pstate = &state)
			{
				DebugNodeInputTextStateNative((ImGuiInputTextState*)pstate);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeTypingSelectState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeTypingSelectStateNative(ImGuiTypingSelectState* state);

		public static void DebugNodeTypingSelectState(ImGuiTypingSelectStatePtr state)
		{
			DebugNodeTypingSelectStateNative(state);
		}

		public static void DebugNodeTypingSelectState(ref ImGuiTypingSelectState state)
		{
			fixed (ImGuiTypingSelectState* pstate = &state)
			{
				DebugNodeTypingSelectStateNative((ImGuiTypingSelectState*)pstate);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeWindowNative(ImGuiWindow* window, byte* label);

		public static void DebugNodeWindow(ImGuiWindowPtr window, byte* label)
		{
			DebugNodeWindowNative(window, label);
		}

		public static void DebugNodeWindow(ref ImGuiWindow window, byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DebugNodeWindowNative((ImGuiWindow*)pwindow, label);
			}
		}

		public static void DebugNodeWindow(ImGuiWindowPtr window, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		public static void DebugNodeWindow(ImGuiWindowPtr window, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowNative(window, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void DebugNodeWindow(ref ImGuiWindow window, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowNative((ImGuiWindow*)pwindow, (byte*)plabel);
				}
			}
		}

		public static void DebugNodeWindow(ref ImGuiWindow window, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowNative((ImGuiWindow*)pwindow, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeWindowSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeWindowSettingsNative(ImGuiWindowSettings* settings);

		public static void DebugNodeWindowSettings(ImGuiWindowSettingsPtr settings)
		{
			DebugNodeWindowSettingsNative(settings);
		}

		public static void DebugNodeWindowSettings(ref ImGuiWindowSettings settings)
		{
			fixed (ImGuiWindowSettings* psettings = &settings)
			{
				DebugNodeWindowSettingsNative((ImGuiWindowSettings*)psettings);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeWindowsList")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeWindowsListNative(ImVectorImGuiWindowPtr* windows, byte* label);

		public static void DebugNodeWindowsList(ImVectorImGuiWindowPtrPtr windows, byte* label)
		{
			DebugNodeWindowsListNative(windows, label);
		}

		public static void DebugNodeWindowsList(ref ImVectorImGuiWindowPtr windows, byte* label)
		{
			fixed (ImVectorImGuiWindowPtr* pwindows = &windows)
			{
				DebugNodeWindowsListNative((ImVectorImGuiWindowPtr*)pwindows, label);
			}
		}

		public static void DebugNodeWindowsList(ImVectorImGuiWindowPtrPtr windows, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		public static void DebugNodeWindowsList(ImVectorImGuiWindowPtrPtr windows, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowsListNative(windows, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void DebugNodeWindowsList(ref ImVectorImGuiWindowPtr windows, ref byte label)
		{
			fixed (ImVectorImGuiWindowPtr* pwindows = &windows)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowsListNative((ImVectorImGuiWindowPtr*)pwindows, (byte*)plabel);
				}
			}
		}

		public static void DebugNodeWindowsList(ref ImVectorImGuiWindowPtr windows, string label)
		{
			fixed (ImVectorImGuiWindowPtr* pwindows = &windows)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowsListNative((ImVectorImGuiWindowPtr*)pwindows, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeWindowsListByBeginStackParent")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeWindowsListByBeginStackParentNative(ImGuiWindow** windows, int windowsSize, ImGuiWindow* parentInBeginStack);

		public static void DebugNodeWindowsListByBeginStackParent(ImGuiWindowPtrPtr windows, int windowsSize, ImGuiWindowPtr parentInBeginStack)
		{
			DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, parentInBeginStack);
		}

		public static void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windowsSize, ImGuiWindowPtr parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, parentInBeginStack);
			}
		}

		public static void DebugNodeWindowsListByBeginStackParent(ImGuiWindowPtrPtr windows, int windowsSize, ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
			{
				DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
			}
		}

		public static void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windowsSize, ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
				{
					DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugNodeViewport")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeViewportNative(ImGuiViewportP* viewport);

		public static void DebugNodeViewport(ImGuiViewportPPtr viewport)
		{
			DebugNodeViewportNative(viewport);
		}

		public static void DebugNodeViewport(ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugNodeViewportNative((ImGuiViewportP*)pviewport);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugRenderKeyboardPreview")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugRenderKeyboardPreviewNative(ImDrawList* drawList);

		public static void DebugRenderKeyboardPreview(ImDrawListPtr drawList)
		{
			DebugRenderKeyboardPreviewNative(drawList);
		}

		public static void DebugRenderKeyboardPreview(ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugRenderKeyboardPreviewNative((ImDrawList*)pdrawList);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igDebugRenderViewportThumbnail")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugRenderViewportThumbnailNative(ImDrawList* drawList, ImGuiViewportP* viewport, ImRect bb);

		public static void DebugRenderViewportThumbnail(ImDrawListPtr drawList, ImGuiViewportPPtr viewport, ImRect bb)
		{
			DebugRenderViewportThumbnailNative(drawList, viewport, bb);
		}

		public static void DebugRenderViewportThumbnail(ref ImDrawList drawList, ImGuiViewportPPtr viewport, ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, viewport, bb);
			}
		}

		public static void DebugRenderViewportThumbnail(ImDrawListPtr drawList, ref ImGuiViewportP viewport, ImRect bb)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugRenderViewportThumbnailNative(drawList, (ImGuiViewportP*)pviewport, bb);
			}
		}

		public static void DebugRenderViewportThumbnail(ref ImDrawList drawList, ref ImGuiViewportP viewport, ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, (ImGuiViewportP*)pviewport, bb);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasGetBuilderForStbTruetype")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetypeNative();

		public static ImFontBuilderIOPtr ImFontAtlasGetBuilderForStbTruetype()
		{
			ImFontBuilderIOPtr ret = ImFontAtlasGetBuilderForStbTruetypeNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasUpdateConfigDataPointers")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasUpdateConfigDataPointersNative(ImFontAtlas* atlas);

		public static void ImFontAtlasUpdateConfigDataPointers(ImFontAtlasPtr atlas)
		{
			ImFontAtlasUpdateConfigDataPointersNative(atlas);
		}

		public static void ImFontAtlasUpdateConfigDataPointers(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasUpdateConfigDataPointersNative((ImFontAtlas*)patlas);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildInit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildInitNative(ImFontAtlas* atlas);

		public static void ImFontAtlasBuildInit(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildInitNative(atlas);
		}

		public static void ImFontAtlasBuildInit(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildInitNative((ImFontAtlas*)patlas);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildSetupFont")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildSetupFontNative(ImFontAtlas* atlas, ImFont* font, ImFontConfig* fontConfig, float ascent, float descent);

		public static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ImFontPtr font, ImFontConfigPtr fontConfig, float ascent, float descent)
		{
			ImFontAtlasBuildSetupFontNative(atlas, font, fontConfig, ascent, descent);
		}

		public static void ImFontAtlasBuildSetupFont(ref ImFontAtlas atlas, ImFontPtr font, ImFontConfigPtr fontConfig, float ascent, float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, font, fontConfig, ascent, descent);
			}
		}

		public static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ref ImFont font, ImFontConfigPtr fontConfig, float ascent, float descent)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasBuildSetupFontNative(atlas, (ImFont*)pfont, fontConfig, ascent, descent);
			}
		}

		public static void ImFontAtlasBuildSetupFont(ref ImFontAtlas atlas, ref ImFont font, ImFontConfigPtr fontConfig, float ascent, float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, (ImFont*)pfont, fontConfig, ascent, descent);
				}
			}
		}

		public static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ImFontPtr font, ref ImFontConfig fontConfig, float ascent, float descent)
		{
			fixed (ImFontConfig* pfontConfig = &fontConfig)
			{
				ImFontAtlasBuildSetupFontNative(atlas, font, (ImFontConfig*)pfontConfig, ascent, descent);
			}
		}

		public static void ImFontAtlasBuildSetupFont(ref ImFontAtlas atlas, ImFontPtr font, ref ImFontConfig fontConfig, float ascent, float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* pfontConfig = &fontConfig)
				{
					ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, font, (ImFontConfig*)pfontConfig, ascent, descent);
				}
			}
		}

		public static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ref ImFont font, ref ImFontConfig fontConfig, float ascent, float descent)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontConfig* pfontConfig = &fontConfig)
				{
					ImFontAtlasBuildSetupFontNative(atlas, (ImFont*)pfont, (ImFontConfig*)pfontConfig, ascent, descent);
				}
			}
		}

		public static void ImFontAtlasBuildSetupFont(ref ImFontAtlas atlas, ref ImFont font, ref ImFontConfig fontConfig, float ascent, float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontConfig* pfontConfig = &fontConfig)
					{
						ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, (ImFont*)pfont, (ImFontConfig*)pfontConfig, ascent, descent);
					}
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildPackCustomRects")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildPackCustomRectsNative(ImFontAtlas* atlas, void* stbrpContextOpaque);

		public static void ImFontAtlasBuildPackCustomRects(ImFontAtlasPtr atlas, void* stbrpContextOpaque)
		{
			ImFontAtlasBuildPackCustomRectsNative(atlas, stbrpContextOpaque);
		}

		public static void ImFontAtlasBuildPackCustomRects(ref ImFontAtlas atlas, void* stbrpContextOpaque)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildPackCustomRectsNative((ImFontAtlas*)patlas, stbrpContextOpaque);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildFinish")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildFinishNative(ImFontAtlas* atlas);

		public static void ImFontAtlasBuildFinish(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildFinishNative(atlas);
		}

		public static void ImFontAtlasBuildFinish(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildFinishNative((ImFontAtlas*)patlas);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildRender8bppRectFromString")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildRender8bppRectFromStringNative(ImFontAtlas* atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, byte inMarkerPixelValue);

		public static void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			ImFontAtlasBuildRender8bppRectFromStringNative(atlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
		}

		public static void ImFontAtlasBuildRender8bppRectFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildRender8bppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		public static void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRender8bppRectFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		public static void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, string inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRender8bppRectFromStringNative(atlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ImFontAtlasBuildRender8bppRectFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = &inStr)
				{
					ImFontAtlasBuildRender8bppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		public static void ImFontAtlasBuildRender8bppRectFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, string inStr, byte inMarkerChar, byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFontAtlasBuildRender8bppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildRender32bppRectFromString")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildRender32bppRectFromStringNative(ImFontAtlas* atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, uint inMarkerPixelValue);

		public static void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			ImFontAtlasBuildRender32bppRectFromStringNative(atlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
		}

		public static void ImFontAtlasBuildRender32bppRectFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildRender32bppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		public static void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRender32bppRectFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		public static void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, string inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRender32bppRectFromStringNative(atlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ImFontAtlasBuildRender32bppRectFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = &inStr)
				{
					ImFontAtlasBuildRender32bppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		public static void ImFontAtlasBuildRender32bppRectFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, string inStr, byte inMarkerChar, uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFontAtlasBuildRender32bppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildMultiplyCalcLookupTable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildMultiplyCalcLookupTableNative(byte* outTable, float inMultiplyFactor);

		public static void ImFontAtlasBuildMultiplyCalcLookupTable(byte* outTable, float inMultiplyFactor)
		{
			ImFontAtlasBuildMultiplyCalcLookupTableNative(outTable, inMultiplyFactor);
		}

		public static void ImFontAtlasBuildMultiplyCalcLookupTable(ref byte outTable, float inMultiplyFactor)
		{
			fixed (byte* poutTable = &outTable)
			{
				ImFontAtlasBuildMultiplyCalcLookupTableNative((byte*)poutTable, inMultiplyFactor);
			}
		}

		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildMultiplyRectAlpha8")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildMultiplyRectAlpha8Native(byte* table, byte* pixels, int x, int y, int w, int h, int stride);

		public static void ImFontAtlasBuildMultiplyRectAlpha8(byte* table, byte* pixels, int x, int y, int w, int h, int stride)
		{
			ImFontAtlasBuildMultiplyRectAlpha8Native(table, pixels, x, y, w, h, stride);
		}

		public static void ImFontAtlasBuildMultiplyRectAlpha8(ref byte table, byte* pixels, int x, int y, int w, int h, int stride)
		{
			fixed (byte* ptable = &table)
			{
				ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, pixels, x, y, w, h, stride);
			}
		}

		public static void ImFontAtlasBuildMultiplyRectAlpha8(byte* table, ref byte pixels, int x, int y, int w, int h, int stride)
		{
			fixed (byte* ppixels = &pixels)
			{
				ImFontAtlasBuildMultiplyRectAlpha8Native(table, (byte*)ppixels, x, y, w, h, stride);
			}
		}

		public static void ImFontAtlasBuildMultiplyRectAlpha8(ref byte table, ref byte pixels, int x, int y, int w, int h, int stride)
		{
			fixed (byte* ptable = &table)
			{
				fixed (byte* ppixels = &pixels)
				{
					ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, (byte*)ppixels, x, y, w, h, stride);
				}
			}
		}

		/// <summary>
		/// //////////////////////hand written functions
		/// no LogTextV
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igLogText")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LogTextNative(byte* fmt);

		/// <summary>
/// //////////////////////hand written functions
/// no LogTextV
/// </summary>
public static void LogText(byte* fmt)
		{
			LogTextNative(fmt);
		}

		/// <summary>
/// //////////////////////hand written functions
/// no LogTextV
/// </summary>
public static void LogText(ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				LogTextNative((byte*)pfmt);
			}
		}

		/// <summary>
/// //////////////////////hand written functions
/// no LogTextV
/// </summary>
public static void LogText(string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogTextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// no appendfV
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTextBuffer_appendf")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void appendfNative(ImGuiTextBuffer* buffer, byte* fmt);

		/// <summary>
/// no appendfV
/// </summary>
public static void appendf(ImGuiTextBufferPtr buffer, byte* fmt)
		{
			appendfNative(buffer, fmt);
		}

		/// <summary>
/// no appendfV
/// </summary>
public static void appendf(ref ImGuiTextBuffer buffer, byte* fmt)
		{
			fixed (ImGuiTextBuffer* pbuffer = &buffer)
			{
				appendfNative((ImGuiTextBuffer*)pbuffer, fmt);
			}
		}

		/// <summary>
/// no appendfV
/// </summary>
public static void appendf(ImGuiTextBufferPtr buffer, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				appendfNative(buffer, (byte*)pfmt);
			}
		}

		/// <summary>
/// no appendfV
/// </summary>
public static void appendf(ImGuiTextBufferPtr buffer, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			appendfNative(buffer, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
/// no appendfV
/// </summary>
public static void appendf(ref ImGuiTextBuffer buffer, ref byte fmt)
		{
			fixed (ImGuiTextBuffer* pbuffer = &buffer)
			{
				fixed (byte* pfmt = &fmt)
				{
					appendfNative((ImGuiTextBuffer*)pbuffer, (byte*)pfmt);
				}
			}
		}

		/// <summary>
/// no appendfV
/// </summary>
public static void appendf(ref ImGuiTextBuffer buffer, string fmt)
		{
			fixed (ImGuiTextBuffer* pbuffer = &buffer)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				appendfNative((ImGuiTextBuffer*)pbuffer, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// for getting FLT_MAX in bindings
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGET_FLT_MAX")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float GETFLTMAXNative();

		/// <summary>
/// for getting FLT_MAX in bindings
/// </summary>
public static float GETFLTMAX()
		{
			float ret = GETFLTMAXNative();
			return ret;
		}

		/// <summary>
		/// for getting FLT_MIN in bindings
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGET_FLT_MIN")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float GETFLTMINNative();

		/// <summary>
/// for getting FLT_MIN in bindings
/// </summary>
public static float GETFLTMIN()
		{
			float ret = GETFLTMINNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImVector_ImWchar_create")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImVectorImWchar* ImVectorImWcharCreateNative();

		public static ImVectorImWcharPtr ImVectorImWcharCreate()
		{
			ImVectorImWcharPtr ret = ImVectorImWcharCreateNative();
			return ret;
		}

		[LibraryImport(LibName, EntryPoint = "ImVector_ImWchar_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImVectorImWcharDestroyNative(ImVectorImWchar* self);

		public static void ImVectorImWcharDestroy(ImVectorImWcharPtr self)
		{
			ImVectorImWcharDestroyNative(self);
		}

		public static void ImVectorImWcharDestroy(ref ImVectorImWchar self)
		{
			fixed (ImVectorImWchar* pself = &self)
			{
				ImVectorImWcharDestroyNative((ImVectorImWchar*)pself);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImVector_ImWchar_Init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImVectorImWcharInitNative(ImVectorImWchar* p);

		public static void ImVectorImWcharInit(ImVectorImWcharPtr p)
		{
			ImVectorImWcharInitNative(p);
		}

		public static void ImVectorImWcharInit(ref ImVectorImWchar p)
		{
			fixed (ImVectorImWchar* pp = &p)
			{
				ImVectorImWcharInitNative((ImVectorImWchar*)pp);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImVector_ImWchar_UnInit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImVectorImWcharUnInitNative(ImVectorImWchar* p);

		public static void ImVectorImWcharUnInit(ImVectorImWcharPtr p)
		{
			ImVectorImWcharUnInitNative(p);
		}

		public static void ImVectorImWcharUnInit(ref ImVectorImWchar p)
		{
			fixed (ImVectorImWchar* pp = &p)
			{
				ImVectorImWcharUnInitNative((ImVectorImWchar*)pp);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiPlatformIO_Set_Platform_GetWindowPos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiPlatformIOSetPlatformGetWindowPosNative(ImGuiPlatformIO* platformIo, delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*>> userCallback);

		public static void ImGuiPlatformIOSetPlatformGetWindowPos(ImGuiPlatformIOPtr platformIo, delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*>> userCallback)
		{
			ImGuiPlatformIOSetPlatformGetWindowPosNative(platformIo, userCallback);
		}

		public static void ImGuiPlatformIOSetPlatformGetWindowPos(ref ImGuiPlatformIO platformIo, delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*>> userCallback)
		{
			fixed (ImGuiPlatformIO* pplatformIo = &platformIo)
			{
				ImGuiPlatformIOSetPlatformGetWindowPosNative((ImGuiPlatformIO*)pplatformIo, userCallback);
			}
		}

		[LibraryImport(LibName, EntryPoint = "ImGuiPlatformIO_Set_Platform_GetWindowSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiPlatformIOSetPlatformGetWindowSizeNative(ImGuiPlatformIO* platformIo, delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*>> userCallback);

		public static void ImGuiPlatformIOSetPlatformGetWindowSize(ImGuiPlatformIOPtr platformIo, delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*>> userCallback)
		{
			ImGuiPlatformIOSetPlatformGetWindowSizeNative(platformIo, userCallback);
		}

		public static void ImGuiPlatformIOSetPlatformGetWindowSize(ref ImGuiPlatformIO platformIo, delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*>> userCallback)
		{
			fixed (ImGuiPlatformIO* pplatformIo = &platformIo)
			{
				ImGuiPlatformIOSetPlatformGetWindowSizeNative((ImGuiPlatformIO*)pplatformIo, userCallback);
			}
		}

	}
}
