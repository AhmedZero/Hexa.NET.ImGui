// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		public static void ImGuiStackLevelInfoDestroy(ref ImGuiStackLevelInfo self)
		{
			fixed (ImGuiStackLevelInfo* pself = &self)
			{
				ImGuiStackLevelInfoDestroyNative((ImGuiStackLevelInfo*)pself);
			}
		}

		internal static ImGuiIDStackTool* ImGuiIDStackToolImGuiIDStackToolNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiIDStackTool*>)vt[939])();
			#else
			return (ImGuiIDStackTool*)((delegate* unmanaged[Cdecl]<nint>)vt[939])();
			#endif
		}

		public static ImGuiIDStackToolPtr ImGuiIDStackToolImGuiIDStackTool()
		{
			ImGuiIDStackToolPtr ret = ImGuiIDStackToolImGuiIDStackToolNative();
			return ret;
		}

		internal static void ImGuiIDStackToolDestroyNative(ImGuiIDStackTool* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIDStackTool*, void>)vt[940])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[940])((nint)self);
			#endif
		}

		public static void ImGuiIDStackToolDestroy(ImGuiIDStackToolPtr self)
		{
			ImGuiIDStackToolDestroyNative(self);
		}

		public static void ImGuiIDStackToolDestroy(ref ImGuiIDStackTool self)
		{
			fixed (ImGuiIDStackTool* pself = &self)
			{
				ImGuiIDStackToolDestroyNative((ImGuiIDStackTool*)pself);
			}
		}

		internal static ImGuiContextHook* ImGuiContextHookImGuiContextHookNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiContextHook*>)vt[941])();
			#else
			return (ImGuiContextHook*)((delegate* unmanaged[Cdecl]<nint>)vt[941])();
			#endif
		}

		public static ImGuiContextHookPtr ImGuiContextHookImGuiContextHook()
		{
			ImGuiContextHookPtr ret = ImGuiContextHookImGuiContextHookNative();
			return ret;
		}

		internal static void ImGuiContextHookDestroyNative(ImGuiContextHook* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContextHook*, void>)vt[942])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[942])((nint)self);
			#endif
		}

		public static void ImGuiContextHookDestroy(ImGuiContextHookPtr self)
		{
			ImGuiContextHookDestroyNative(self);
		}

		public static void ImGuiContextHookDestroy(ref ImGuiContextHook self)
		{
			fixed (ImGuiContextHook* pself = &self)
			{
				ImGuiContextHookDestroyNative((ImGuiContextHook*)pself);
			}
		}

		internal static ImGuiContext* ImGuiContextImGuiContextNative(ImFontAtlas* sharedFontAtlas)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImGuiContext*>)vt[943])(sharedFontAtlas);
			#else
			return (ImGuiContext*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[943])((nint)sharedFontAtlas);
			#endif
		}

		public static ImGuiContextPtr ImGuiContextImGuiContext(ImFontAtlasPtr sharedFontAtlas)
		{
			ImGuiContextPtr ret = ImGuiContextImGuiContextNative(sharedFontAtlas);
			return ret;
		}

		public static ImGuiContextPtr ImGuiContextImGuiContext(ref ImFontAtlas sharedFontAtlas)
		{
			fixed (ImFontAtlas* psharedFontAtlas = &sharedFontAtlas)
			{
				ImGuiContextPtr ret = ImGuiContextImGuiContextNative((ImFontAtlas*)psharedFontAtlas);
				return ret;
			}
		}

		internal static void ImGuiContextDestroyNative(ImGuiContext* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)vt[944])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[944])((nint)self);
			#endif
		}

		public static void ImGuiContextDestroy(ImGuiContextPtr self)
		{
			ImGuiContextDestroyNative(self);
		}

		public static void ImGuiContextDestroy(ref ImGuiContext self)
		{
			fixed (ImGuiContext* pself = &self)
			{
				ImGuiContextDestroyNative((ImGuiContext*)pself);
			}
		}

		internal static ImGuiWindow* ImGuiWindowImGuiWindowNative(ImGuiContext* context, byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiContext*, byte*, ImGuiWindow*>)vt[945])(context, name);
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[945])((nint)context, (nint)name);
			#endif
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ImGuiContextPtr context, byte* name)
		{
			ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative(context, name);
			return ret;
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ref ImGuiContext context, byte* name)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative((ImGuiContext*)pcontext, name);
				return ret;
			}
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ImGuiContextPtr context, ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative(context, (byte*)pname);
				return ret;
			}
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ImGuiContextPtr context, string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative(context, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ImGuiContextPtr context, ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative(context, (byte*)pname);
				return ret;
			}
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ref ImGuiContext context, ref byte name)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				fixed (byte* pname = &name)
				{
					ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative((ImGuiContext*)pcontext, (byte*)pname);
					return ret;
				}
			}
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ref ImGuiContext context, string name)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative((ImGuiContext*)pcontext, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static ImGuiWindowPtr ImGuiWindowImGuiWindow(ref ImGuiContext context, ReadOnlySpan<byte> name)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				fixed (byte* pname = name)
				{
					ImGuiWindowPtr ret = ImGuiWindowImGuiWindowNative((ImGuiContext*)pcontext, (byte*)pname);
					return ret;
				}
			}
		}

		internal static void ImGuiWindowDestroyNative(ImGuiWindow* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[946])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[946])((nint)self);
			#endif
		}

		public static void ImGuiWindowDestroy(ImGuiWindowPtr self)
		{
			ImGuiWindowDestroyNative(self);
		}

		public static void ImGuiWindowDestroy(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowDestroyNative((ImGuiWindow*)pself);
			}
		}

		internal static int ImGuiWindowGetIDNative(ImGuiWindow* self, byte* str, byte* strEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte*, byte*, int>)vt[947])(self, str, strEnd);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)vt[947])((nint)self, (nint)str, (nint)strEnd);
			#endif
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, byte* str, byte* strEnd)
		{
			int ret = ImGuiWindowGetIDNative(self, str, strEnd);
			return ret;
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, byte* str, byte* strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, str, strEnd);
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, ref byte str, byte* strEnd)
		{
			fixed (byte* pstr = &str)
			{
				int ret = ImGuiWindowGetIDNative(self, (byte*)pstr, strEnd);
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, string str, byte* strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImGuiWindowGetIDNative(self, pStr0, strEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, ReadOnlySpan<byte> str, byte* strEnd)
		{
			fixed (byte* pstr = str)
			{
				int ret = ImGuiWindowGetIDNative(self, (byte*)pstr, strEnd);
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, ref byte str, byte* strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, (byte*)pstr, strEnd);
					return ret;
				}
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, string str, byte* strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, pStr0, strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, ReadOnlySpan<byte> str, byte* strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				fixed (byte* pstr = str)
				{
					int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, (byte*)pstr, strEnd);
					return ret;
				}
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, byte* str, ref byte strEnd)
		{
			fixed (byte* pstrEnd = &strEnd)
			{
				int ret = ImGuiWindowGetIDNative(self, str, (byte*)pstrEnd);
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, byte* str, string strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImGuiWindowGetIDNative(self, str, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, byte* str, ReadOnlySpan<byte> strEnd)
		{
			fixed (byte* pstrEnd = strEnd)
			{
				int ret = ImGuiWindowGetIDNative(self, str, (byte*)pstrEnd);
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, byte* str, ref byte strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, str, (byte*)pstrEnd);
					return ret;
				}
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, byte* str, string strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (strEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, str, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, byte* str, ReadOnlySpan<byte> strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				fixed (byte* pstrEnd = strEnd)
				{
					int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, str, (byte*)pstrEnd);
					return ret;
				}
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, ref byte str, ref byte strEnd)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					int ret = ImGuiWindowGetIDNative(self, (byte*)pstr, (byte*)pstrEnd);
					return ret;
				}
			}
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, string str, string strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImGuiWindowGetIDNative(self, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int ImGuiWindowGetID(ImGuiWindowPtr self, ReadOnlySpan<byte> str, ReadOnlySpan<byte> strEnd)
		{
			fixed (byte* pstr = str)
			{
				fixed (byte* pstrEnd = strEnd)
				{
					int ret = ImGuiWindowGetIDNative(self, (byte*)pstr, (byte*)pstrEnd);
					return ret;
				}
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, ref byte str, ref byte strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					fixed (byte* pstrEnd = &strEnd)
					{
						int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, (byte*)pstr, (byte*)pstrEnd);
						return ret;
					}
				}
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, string str, string strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (strEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		public static int ImGuiWindowGetID(ref ImGuiWindow self, ReadOnlySpan<byte> str, ReadOnlySpan<byte> strEnd)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				fixed (byte* pstr = str)
				{
					fixed (byte* pstrEnd = strEnd)
					{
						int ret = ImGuiWindowGetIDNative((ImGuiWindow*)pself, (byte*)pstr, (byte*)pstrEnd);
						return ret;
					}
				}
			}
		}

		internal static int ImGuiWindowGetIDPtrNative(ImGuiWindow* self, void* ptr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, void*, int>)vt[948])(self, ptr);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[948])((nint)self, (nint)ptr);
			#endif
		}

		public static int ImGuiWindowGetIDPtr(ImGuiWindowPtr self, void* ptr)
		{
			int ret = ImGuiWindowGetIDPtrNative(self, ptr);
			return ret;
		}

		public static int ImGuiWindowGetIDPtr(ref ImGuiWindow self, void* ptr)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				int ret = ImGuiWindowGetIDPtrNative((ImGuiWindow*)pself, ptr);
				return ret;
			}
		}

		internal static int ImGuiWindowGetIDIntNative(ImGuiWindow* self, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, int, int>)vt[949])(self, n);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)vt[949])((nint)self, n);
			#endif
		}

		public static int ImGuiWindowGetIDInt(ImGuiWindowPtr self, int n)
		{
			int ret = ImGuiWindowGetIDIntNative(self, n);
			return ret;
		}

		public static int ImGuiWindowGetIDInt(ref ImGuiWindow self, int n)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				int ret = ImGuiWindowGetIDIntNative((ImGuiWindow*)pself, n);
				return ret;
			}
		}

		internal static int ImGuiWindowGetIDFromRectangleNative(ImGuiWindow* self, ImRect rAbs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImRect, int>)vt[950])(self, rAbs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, ImRect, int>)vt[950])((nint)self, rAbs);
			#endif
		}

		public static int ImGuiWindowGetIDFromRectangle(ImGuiWindowPtr self, ImRect rAbs)
		{
			int ret = ImGuiWindowGetIDFromRectangleNative(self, rAbs);
			return ret;
		}

		public static int ImGuiWindowGetIDFromRectangle(ref ImGuiWindow self, ImRect rAbs)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				int ret = ImGuiWindowGetIDFromRectangleNative((ImGuiWindow*)pself, rAbs);
				return ret;
			}
		}

		internal static void ImGuiWindowRectNative(ImRect* output, ImGuiWindow* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, void>)vt[951])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[951])((nint)output, (nint)self);
			#endif
		}

		public static ImRect ImGuiWindowRect(ImGuiWindowPtr self)
		{
			ImRect ret;
			ImGuiWindowRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiWindowRect(ImRectPtr output, ImGuiWindowPtr self)
		{
			ImGuiWindowRectNative(output, self);
		}

		public static void ImGuiWindowRect(ref ImRect output, ImGuiWindowPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiWindowRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiWindowRect(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImRect ret;
				ImGuiWindowRectNative(&ret, (ImGuiWindow*)pself);
				return ret;
			}
		}

		public static void ImGuiWindowRect(ImRectPtr output, ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowRectNative(output, (ImGuiWindow*)pself);
			}
		}

		public static void ImGuiWindowRect(ref ImRect output, ref ImGuiWindow self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pself = &self)
				{
					ImGuiWindowRectNative((ImRect*)poutput, (ImGuiWindow*)pself);
				}
			}
		}

		internal static float ImGuiWindowCalcFontSizeNative(ImGuiWindow* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, float>)vt[952])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[952])((nint)self);
			#endif
		}

		public static float ImGuiWindowCalcFontSize(ImGuiWindowPtr self)
		{
			float ret = ImGuiWindowCalcFontSizeNative(self);
			return ret;
		}

		public static float ImGuiWindowCalcFontSize(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				float ret = ImGuiWindowCalcFontSizeNative((ImGuiWindow*)pself);
				return ret;
			}
		}

		internal static void ImGuiWindowTitleBarRectNative(ImRect* output, ImGuiWindow* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, void>)vt[953])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[953])((nint)output, (nint)self);
			#endif
		}

		public static ImRect ImGuiWindowTitleBarRect(ImGuiWindowPtr self)
		{
			ImRect ret;
			ImGuiWindowTitleBarRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiWindowTitleBarRect(ImRectPtr output, ImGuiWindowPtr self)
		{
			ImGuiWindowTitleBarRectNative(output, self);
		}

		public static void ImGuiWindowTitleBarRect(ref ImRect output, ImGuiWindowPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiWindowTitleBarRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiWindowTitleBarRect(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImRect ret;
				ImGuiWindowTitleBarRectNative(&ret, (ImGuiWindow*)pself);
				return ret;
			}
		}

		public static void ImGuiWindowTitleBarRect(ImRectPtr output, ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowTitleBarRectNative(output, (ImGuiWindow*)pself);
			}
		}

		public static void ImGuiWindowTitleBarRect(ref ImRect output, ref ImGuiWindow self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pself = &self)
				{
					ImGuiWindowTitleBarRectNative((ImRect*)poutput, (ImGuiWindow*)pself);
				}
			}
		}

		internal static void ImGuiWindowMenuBarRectNative(ImRect* output, ImGuiWindow* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, void>)vt[954])(output, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[954])((nint)output, (nint)self);
			#endif
		}

		public static ImRect ImGuiWindowMenuBarRect(ImGuiWindowPtr self)
		{
			ImRect ret;
			ImGuiWindowMenuBarRectNative(&ret, self);
			return ret;
		}

		public static void ImGuiWindowMenuBarRect(ImRectPtr output, ImGuiWindowPtr self)
		{
			ImGuiWindowMenuBarRectNative(output, self);
		}

		public static void ImGuiWindowMenuBarRect(ref ImRect output, ImGuiWindowPtr self)
		{
			fixed (ImRect* poutput = &output)
			{
				ImGuiWindowMenuBarRectNative((ImRect*)poutput, self);
			}
		}

		public static ImRect ImGuiWindowMenuBarRect(ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImRect ret;
				ImGuiWindowMenuBarRectNative(&ret, (ImGuiWindow*)pself);
				return ret;
			}
		}

		public static void ImGuiWindowMenuBarRect(ImRectPtr output, ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowMenuBarRectNative(output, (ImGuiWindow*)pself);
			}
		}

		public static void ImGuiWindowMenuBarRect(ref ImRect output, ref ImGuiWindow self)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pself = &self)
				{
					ImGuiWindowMenuBarRectNative((ImRect*)poutput, (ImGuiWindow*)pself);
				}
			}
		}

		internal static ImGuiTabItem* ImGuiTabItemImGuiTabItemNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabItem*>)vt[955])();
			#else
			return (ImGuiTabItem*)((delegate* unmanaged[Cdecl]<nint>)vt[955])();
			#endif
		}

		public static ImGuiTabItemPtr ImGuiTabItemImGuiTabItem()
		{
			ImGuiTabItemPtr ret = ImGuiTabItemImGuiTabItemNative();
			return ret;
		}

		internal static void ImGuiTabItemDestroyNative(ImGuiTabItem* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabItem*, void>)vt[956])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[956])((nint)self);
			#endif
		}

		public static void ImGuiTabItemDestroy(ImGuiTabItemPtr self)
		{
			ImGuiTabItemDestroyNative(self);
		}

		public static void ImGuiTabItemDestroy(ref ImGuiTabItem self)
		{
			fixed (ImGuiTabItem* pself = &self)
			{
				ImGuiTabItemDestroyNative((ImGuiTabItem*)pself);
			}
		}

		internal static ImGuiTabBar* ImGuiTabBarImGuiTabBarNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabBar*>)vt[957])();
			#else
			return (ImGuiTabBar*)((delegate* unmanaged[Cdecl]<nint>)vt[957])();
			#endif
		}

		public static ImGuiTabBarPtr ImGuiTabBarImGuiTabBar()
		{
			ImGuiTabBarPtr ret = ImGuiTabBarImGuiTabBarNative();
			return ret;
		}

		internal static void ImGuiTabBarDestroyNative(ImGuiTabBar* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, void>)vt[958])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[958])((nint)self);
			#endif
		}

		public static void ImGuiTabBarDestroy(ImGuiTabBarPtr self)
		{
			ImGuiTabBarDestroyNative(self);
		}

		public static void ImGuiTabBarDestroy(ref ImGuiTabBar self)
		{
			fixed (ImGuiTabBar* pself = &self)
			{
				ImGuiTabBarDestroyNative((ImGuiTabBar*)pself);
			}
		}

		internal static ImGuiTableColumn* ImGuiTableColumnImGuiTableColumnNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableColumn*>)vt[959])();
			#else
			return (ImGuiTableColumn*)((delegate* unmanaged[Cdecl]<nint>)vt[959])();
			#endif
		}

		public static ImGuiTableColumnPtr ImGuiTableColumnImGuiTableColumn()
		{
			ImGuiTableColumnPtr ret = ImGuiTableColumnImGuiTableColumnNative();
			return ret;
		}

		internal static void ImGuiTableColumnDestroyNative(ImGuiTableColumn* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableColumn*, void>)vt[960])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[960])((nint)self);
			#endif
		}

		public static void ImGuiTableColumnDestroy(ImGuiTableColumnPtr self)
		{
			ImGuiTableColumnDestroyNative(self);
		}

		public static void ImGuiTableColumnDestroy(ref ImGuiTableColumn self)
		{
			fixed (ImGuiTableColumn* pself = &self)
			{
				ImGuiTableColumnDestroyNative((ImGuiTableColumn*)pself);
			}
		}

		internal static ImGuiTableInstanceData* ImGuiTableInstanceDataImGuiTableInstanceDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableInstanceData*>)vt[961])();
			#else
			return (ImGuiTableInstanceData*)((delegate* unmanaged[Cdecl]<nint>)vt[961])();
			#endif
		}

		public static ImGuiTableInstanceDataPtr ImGuiTableInstanceDataImGuiTableInstanceData()
		{
			ImGuiTableInstanceDataPtr ret = ImGuiTableInstanceDataImGuiTableInstanceDataNative();
			return ret;
		}

		internal static void ImGuiTableInstanceDataDestroyNative(ImGuiTableInstanceData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableInstanceData*, void>)vt[962])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[962])((nint)self);
			#endif
		}

		public static void ImGuiTableInstanceDataDestroy(ImGuiTableInstanceDataPtr self)
		{
			ImGuiTableInstanceDataDestroyNative(self);
		}

		public static void ImGuiTableInstanceDataDestroy(ref ImGuiTableInstanceData self)
		{
			fixed (ImGuiTableInstanceData* pself = &self)
			{
				ImGuiTableInstanceDataDestroyNative((ImGuiTableInstanceData*)pself);
			}
		}

		internal static ImGuiTable* ImGuiTableImGuiTableNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*>)vt[963])();
			#else
			return (ImGuiTable*)((delegate* unmanaged[Cdecl]<nint>)vt[963])();
			#endif
		}

		public static ImGuiTablePtr ImGuiTableImGuiTable()
		{
			ImGuiTablePtr ret = ImGuiTableImGuiTableNative();
			return ret;
		}

		internal static void ImGuiTableDestroyNative(ImGuiTable* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[964])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[964])((nint)self);
			#endif
		}

		public static void ImGuiTableDestroy(ImGuiTablePtr self)
		{
			ImGuiTableDestroyNative(self);
		}

		public static void ImGuiTableDestroy(ref ImGuiTable self)
		{
			fixed (ImGuiTable* pself = &self)
			{
				ImGuiTableDestroyNative((ImGuiTable*)pself);
			}
		}

		internal static ImGuiTableTempData* ImGuiTableTempDataImGuiTableTempDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableTempData*>)vt[965])();
			#else
			return (ImGuiTableTempData*)((delegate* unmanaged[Cdecl]<nint>)vt[965])();
			#endif
		}

		public static ImGuiTableTempDataPtr ImGuiTableTempDataImGuiTableTempData()
		{
			ImGuiTableTempDataPtr ret = ImGuiTableTempDataImGuiTableTempDataNative();
			return ret;
		}

		internal static void ImGuiTableTempDataDestroyNative(ImGuiTableTempData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableTempData*, void>)vt[966])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[966])((nint)self);
			#endif
		}

		public static void ImGuiTableTempDataDestroy(ImGuiTableTempDataPtr self)
		{
			ImGuiTableTempDataDestroyNative(self);
		}

		public static void ImGuiTableTempDataDestroy(ref ImGuiTableTempData self)
		{
			fixed (ImGuiTableTempData* pself = &self)
			{
				ImGuiTableTempDataDestroyNative((ImGuiTableTempData*)pself);
			}
		}

		internal static ImGuiTableColumnSettings* ImGuiTableColumnSettingsImGuiTableColumnSettingsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableColumnSettings*>)vt[967])();
			#else
			return (ImGuiTableColumnSettings*)((delegate* unmanaged[Cdecl]<nint>)vt[967])();
			#endif
		}

		public static ImGuiTableColumnSettingsPtr ImGuiTableColumnSettingsImGuiTableColumnSettings()
		{
			ImGuiTableColumnSettingsPtr ret = ImGuiTableColumnSettingsImGuiTableColumnSettingsNative();
			return ret;
		}

		internal static void ImGuiTableColumnSettingsDestroyNative(ImGuiTableColumnSettings* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableColumnSettings*, void>)vt[968])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[968])((nint)self);
			#endif
		}

		public static void ImGuiTableColumnSettingsDestroy(ImGuiTableColumnSettingsPtr self)
		{
			ImGuiTableColumnSettingsDestroyNative(self);
		}

		public static void ImGuiTableColumnSettingsDestroy(ref ImGuiTableColumnSettings self)
		{
			fixed (ImGuiTableColumnSettings* pself = &self)
			{
				ImGuiTableColumnSettingsDestroyNative((ImGuiTableColumnSettings*)pself);
			}
		}

		internal static ImGuiTableSettings* ImGuiTableSettingsImGuiTableSettingsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableSettings*>)vt[969])();
			#else
			return (ImGuiTableSettings*)((delegate* unmanaged[Cdecl]<nint>)vt[969])();
			#endif
		}

		public static ImGuiTableSettingsPtr ImGuiTableSettingsImGuiTableSettings()
		{
			ImGuiTableSettingsPtr ret = ImGuiTableSettingsImGuiTableSettingsNative();
			return ret;
		}

		internal static void ImGuiTableSettingsDestroyNative(ImGuiTableSettings* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableSettings*, void>)vt[970])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[970])((nint)self);
			#endif
		}

		public static void ImGuiTableSettingsDestroy(ImGuiTableSettingsPtr self)
		{
			ImGuiTableSettingsDestroyNative(self);
		}

		public static void ImGuiTableSettingsDestroy(ref ImGuiTableSettings self)
		{
			fixed (ImGuiTableSettings* pself = &self)
			{
				ImGuiTableSettingsDestroyNative((ImGuiTableSettings*)pself);
			}
		}

		internal static ImGuiTableColumnSettings* ImGuiTableSettingsGetColumnSettingsNative(ImGuiTableSettings* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableSettings*, ImGuiTableColumnSettings*>)vt[971])(self);
			#else
			return (ImGuiTableColumnSettings*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[971])((nint)self);
			#endif
		}

		public static ImGuiTableColumnSettingsPtr ImGuiTableSettingsGetColumnSettings(ImGuiTableSettingsPtr self)
		{
			ImGuiTableColumnSettingsPtr ret = ImGuiTableSettingsGetColumnSettingsNative(self);
			return ret;
		}

		public static ImGuiTableColumnSettingsPtr ImGuiTableSettingsGetColumnSettings(ref ImGuiTableSettings self)
		{
			fixed (ImGuiTableSettings* pself = &self)
			{
				ImGuiTableColumnSettingsPtr ret = ImGuiTableSettingsGetColumnSettingsNative((ImGuiTableSettings*)pself);
				return ret;
			}
		}

		internal static ImGuiWindow* GetCurrentWindowReadNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*>)vt[972])();
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint>)vt[972])();
			#endif
		}

		public static ImGuiWindowPtr GetCurrentWindowRead()
		{
			ImGuiWindowPtr ret = GetCurrentWindowReadNative();
			return ret;
		}

		internal static ImGuiWindow* GetCurrentWindowNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*>)vt[973])();
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint>)vt[973])();
			#endif
		}

		public static ImGuiWindowPtr GetCurrentWindow()
		{
			ImGuiWindowPtr ret = GetCurrentWindowNative();
			return ret;
		}

		internal static ImGuiWindow* FindWindowByIDNative(int id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiWindow*>)vt[974])(id);
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<int, nint>)vt[974])(id);
			#endif
		}

		public static ImGuiWindowPtr FindWindowByID(int id)
		{
			ImGuiWindowPtr ret = FindWindowByIDNative(id);
			return ret;
		}

		internal static ImGuiWindow* FindWindowByNameNative(byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiWindow*>)vt[975])(name);
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[975])((nint)name);
			#endif
		}

		public static ImGuiWindowPtr FindWindowByName(byte* name)
		{
			ImGuiWindowPtr ret = FindWindowByNameNative(name);
			return ret;
		}

		public static ImGuiWindowPtr FindWindowByName(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImGuiWindowPtr ret = FindWindowByNameNative((byte*)pname);
				return ret;
			}
		}

		public static ImGuiWindowPtr FindWindowByName(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiWindowPtr ret = FindWindowByNameNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImGuiWindowPtr FindWindowByName(ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				ImGuiWindowPtr ret = FindWindowByNameNative((byte*)pname);
				return ret;
			}
		}

		internal static void UpdateWindowParentAndRootLinksNative(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWindow* parentWindow)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindowFlags, ImGuiWindow*, void>)vt[976])(window, flags, parentWindow);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiWindowFlags, nint, void>)vt[976])((nint)window, flags, (nint)parentWindow);
			#endif
		}

		public static void UpdateWindowParentAndRootLinks(ImGuiWindowPtr window, ImGuiWindowFlags flags, ImGuiWindowPtr parentWindow)
		{
			UpdateWindowParentAndRootLinksNative(window, flags, parentWindow);
		}

		public static void UpdateWindowParentAndRootLinks(ref ImGuiWindow window, ImGuiWindowFlags flags, ImGuiWindowPtr parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				UpdateWindowParentAndRootLinksNative((ImGuiWindow*)pwindow, flags, parentWindow);
			}
		}

		public static void UpdateWindowParentAndRootLinks(ImGuiWindowPtr window, ImGuiWindowFlags flags, ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pparentWindow = &parentWindow)
			{
				UpdateWindowParentAndRootLinksNative(window, flags, (ImGuiWindow*)pparentWindow);
			}
		}

		public static void UpdateWindowParentAndRootLinks(ref ImGuiWindow window, ImGuiWindowFlags flags, ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* pparentWindow = &parentWindow)
				{
					UpdateWindowParentAndRootLinksNative((ImGuiWindow*)pwindow, flags, (ImGuiWindow*)pparentWindow);
				}
			}
		}

		internal static void UpdateWindowSkipRefreshNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[977])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[977])((nint)window);
			#endif
		}

		public static void UpdateWindowSkipRefresh(ImGuiWindowPtr window)
		{
			UpdateWindowSkipRefreshNative(window);
		}

		public static void UpdateWindowSkipRefresh(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				UpdateWindowSkipRefreshNative((ImGuiWindow*)pwindow);
			}
		}

		internal static void CalcWindowNextAutoFitSizeNative(Vector2* output, ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, void>)vt[978])(output, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[978])((nint)output, (nint)window);
			#endif
		}

		public static Vector2 CalcWindowNextAutoFitSize(ImGuiWindowPtr window)
		{
			Vector2 ret;
			CalcWindowNextAutoFitSizeNative(&ret, window);
			return ret;
		}

		public static void CalcWindowNextAutoFitSize(Vector2* output, ImGuiWindowPtr window)
		{
			CalcWindowNextAutoFitSizeNative(output, window);
		}

		public static void CalcWindowNextAutoFitSize(ref Vector2 output, ImGuiWindowPtr window)
		{
			fixed (Vector2* poutput = &output)
			{
				CalcWindowNextAutoFitSizeNative((Vector2*)poutput, window);
			}
		}

		public static Vector2 CalcWindowNextAutoFitSize(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				CalcWindowNextAutoFitSizeNative(&ret, (ImGuiWindow*)pwindow);
				return ret;
			}
		}

		public static void CalcWindowNextAutoFitSize(Vector2* output, ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				CalcWindowNextAutoFitSizeNative(output, (ImGuiWindow*)pwindow);
			}
		}

		public static void CalcWindowNextAutoFitSize(ref Vector2 output, ref ImGuiWindow window)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					CalcWindowNextAutoFitSizeNative((Vector2*)poutput, (ImGuiWindow*)pwindow);
				}
			}
		}

		internal static byte IsWindowChildOfNative(ImGuiWindow* window, ImGuiWindow* potentialParent, byte popupHierarchy, byte dockHierarchy)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, byte, byte, byte>)vt[979])(window, potentialParent, popupHierarchy, dockHierarchy);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte, byte, byte>)vt[979])((nint)window, (nint)potentialParent, popupHierarchy, dockHierarchy);
			#endif
		}

		public static bool IsWindowChildOf(ImGuiWindowPtr window, ImGuiWindowPtr potentialParent, bool popupHierarchy, bool dockHierarchy)
		{
			byte ret = IsWindowChildOfNative(window, potentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
			return ret != 0;
		}

		public static bool IsWindowChildOf(ref ImGuiWindow window, ImGuiWindowPtr potentialParent, bool popupHierarchy, bool dockHierarchy)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowChildOfNative((ImGuiWindow*)pwindow, potentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		public static bool IsWindowChildOf(ImGuiWindowPtr window, ref ImGuiWindow potentialParent, bool popupHierarchy, bool dockHierarchy)
		{
			fixed (ImGuiWindow* ppotentialParent = &potentialParent)
			{
				byte ret = IsWindowChildOfNative(window, (ImGuiWindow*)ppotentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		public static bool IsWindowChildOf(ref ImGuiWindow window, ref ImGuiWindow potentialParent, bool popupHierarchy, bool dockHierarchy)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* ppotentialParent = &potentialParent)
				{
					byte ret = IsWindowChildOfNative((ImGuiWindow*)pwindow, (ImGuiWindow*)ppotentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		internal static byte IsWindowWithinBeginStackOfNative(ImGuiWindow* window, ImGuiWindow* potentialParent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, byte>)vt[980])(window, potentialParent);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[980])((nint)window, (nint)potentialParent);
			#endif
		}

		public static bool IsWindowWithinBeginStackOf(ImGuiWindowPtr window, ImGuiWindowPtr potentialParent)
		{
			byte ret = IsWindowWithinBeginStackOfNative(window, potentialParent);
			return ret != 0;
		}

		public static bool IsWindowWithinBeginStackOf(ref ImGuiWindow window, ImGuiWindowPtr potentialParent)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowWithinBeginStackOfNative((ImGuiWindow*)pwindow, potentialParent);
				return ret != 0;
			}
		}

		public static bool IsWindowWithinBeginStackOf(ImGuiWindowPtr window, ref ImGuiWindow potentialParent)
		{
			fixed (ImGuiWindow* ppotentialParent = &potentialParent)
			{
				byte ret = IsWindowWithinBeginStackOfNative(window, (ImGuiWindow*)ppotentialParent);
				return ret != 0;
			}
		}

		public static bool IsWindowWithinBeginStackOf(ref ImGuiWindow window, ref ImGuiWindow potentialParent)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* ppotentialParent = &potentialParent)
				{
					byte ret = IsWindowWithinBeginStackOfNative((ImGuiWindow*)pwindow, (ImGuiWindow*)ppotentialParent);
					return ret != 0;
				}
			}
		}

		internal static byte IsWindowAboveNative(ImGuiWindow* potentialAbove, ImGuiWindow* potentialBelow)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, byte>)vt[981])(potentialAbove, potentialBelow);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[981])((nint)potentialAbove, (nint)potentialBelow);
			#endif
		}

		public static bool IsWindowAbove(ImGuiWindowPtr potentialAbove, ImGuiWindowPtr potentialBelow)
		{
			byte ret = IsWindowAboveNative(potentialAbove, potentialBelow);
			return ret != 0;
		}

		public static bool IsWindowAbove(ref ImGuiWindow potentialAbove, ImGuiWindowPtr potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialAbove = &potentialAbove)
			{
				byte ret = IsWindowAboveNative((ImGuiWindow*)ppotentialAbove, potentialBelow);
				return ret != 0;
			}
		}

		public static bool IsWindowAbove(ImGuiWindowPtr potentialAbove, ref ImGuiWindow potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialBelow = &potentialBelow)
			{
				byte ret = IsWindowAboveNative(potentialAbove, (ImGuiWindow*)ppotentialBelow);
				return ret != 0;
			}
		}

		public static bool IsWindowAbove(ref ImGuiWindow potentialAbove, ref ImGuiWindow potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialAbove = &potentialAbove)
			{
				fixed (ImGuiWindow* ppotentialBelow = &potentialBelow)
				{
					byte ret = IsWindowAboveNative((ImGuiWindow*)ppotentialAbove, (ImGuiWindow*)ppotentialBelow);
					return ret != 0;
				}
			}
		}

		internal static byte IsWindowNavFocusableNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte>)vt[982])(window);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[982])((nint)window);
			#endif
		}

		public static bool IsWindowNavFocusable(ImGuiWindowPtr window)
		{
			byte ret = IsWindowNavFocusableNative(window);
			return ret != 0;
		}

		public static bool IsWindowNavFocusable(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowNavFocusableNative((ImGuiWindow*)pwindow);
				return ret != 0;
			}
		}

		internal static void SetWindowPosWindowPtrNative(ImGuiWindow* window, Vector2 pos, ImGuiCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, Vector2, ImGuiCond, void>)vt[983])(window, pos, cond);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, ImGuiCond, void>)vt[983])((nint)window, pos, cond);
			#endif
		}

		public static void SetWindowPosWindowPtr(ImGuiWindowPtr window, Vector2 pos, ImGuiCond cond)
		{
			SetWindowPosWindowPtrNative(window, pos, cond);
		}

		public static void SetWindowPosWindowPtr(ref ImGuiWindow window, Vector2 pos, ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowPosWindowPtrNative((ImGuiWindow*)pwindow, pos, cond);
			}
		}

		internal static void SetWindowSizeWindowPtrNative(ImGuiWindow* window, Vector2 size, ImGuiCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, Vector2, ImGuiCond, void>)vt[984])(window, size, cond);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, ImGuiCond, void>)vt[984])((nint)window, size, cond);
			#endif
		}

		public static void SetWindowSizeWindowPtr(ImGuiWindowPtr window, Vector2 size, ImGuiCond cond)
		{
			SetWindowSizeWindowPtrNative(window, size, cond);
		}

		public static void SetWindowSizeWindowPtr(ref ImGuiWindow window, Vector2 size, ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowSizeWindowPtrNative((ImGuiWindow*)pwindow, size, cond);
			}
		}

		internal static void SetWindowCollapsedWindowPtrNative(ImGuiWindow* window, byte collapsed, ImGuiCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte, ImGuiCond, void>)vt[985])(window, collapsed, cond);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, ImGuiCond, void>)vt[985])((nint)window, collapsed, cond);
			#endif
		}

		public static void SetWindowCollapsedWindowPtr(ImGuiWindowPtr window, bool collapsed, ImGuiCond cond)
		{
			SetWindowCollapsedWindowPtrNative(window, collapsed ? (byte)1 : (byte)0, cond);
		}

		public static void SetWindowCollapsedWindowPtr(ref ImGuiWindow window, bool collapsed, ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowCollapsedWindowPtrNative((ImGuiWindow*)pwindow, collapsed ? (byte)1 : (byte)0, cond);
			}
		}

		internal static void SetWindowHitTestHoleNative(ImGuiWindow* window, Vector2 pos, Vector2 size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, Vector2, Vector2, void>)vt[986])(window, pos, size);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[986])((nint)window, pos, size);
			#endif
		}

		public static void SetWindowHitTestHole(ImGuiWindowPtr window, Vector2 pos, Vector2 size)
		{
			SetWindowHitTestHoleNative(window, pos, size);
		}

		public static void SetWindowHitTestHole(ref ImGuiWindow window, Vector2 pos, Vector2 size)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowHitTestHoleNative((ImGuiWindow*)pwindow, pos, size);
			}
		}

		internal static void SetWindowHiddenAndSkipItemsForCurrentFrameNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[987])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[987])((nint)window);
			#endif
		}

		public static void SetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindowPtr window)
		{
			SetWindowHiddenAndSkipItemsForCurrentFrameNative(window);
		}

		public static void SetWindowHiddenAndSkipItemsForCurrentFrame(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowHiddenAndSkipItemsForCurrentFrameNative((ImGuiWindow*)pwindow);
			}
		}

		internal static void SetWindowParentWindowForFocusRouteNative(ImGuiWindow* window, ImGuiWindow* parentWindow)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, void>)vt[988])(window, parentWindow);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[988])((nint)window, (nint)parentWindow);
			#endif
		}

		public static void SetWindowParentWindowForFocusRoute(ImGuiWindowPtr window, ImGuiWindowPtr parentWindow)
		{
			SetWindowParentWindowForFocusRouteNative(window, parentWindow);
		}

		public static void SetWindowParentWindowForFocusRoute(ref ImGuiWindow window, ImGuiWindowPtr parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowParentWindowForFocusRouteNative((ImGuiWindow*)pwindow, parentWindow);
			}
		}

		public static void SetWindowParentWindowForFocusRoute(ImGuiWindowPtr window, ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pparentWindow = &parentWindow)
			{
				SetWindowParentWindowForFocusRouteNative(window, (ImGuiWindow*)pparentWindow);
			}
		}

		public static void SetWindowParentWindowForFocusRoute(ref ImGuiWindow window, ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* pparentWindow = &parentWindow)
				{
					SetWindowParentWindowForFocusRouteNative((ImGuiWindow*)pwindow, (ImGuiWindow*)pparentWindow);
				}
			}
		}

		internal static void WindowRectAbsToRelNative(ImRect* output, ImGuiWindow* window, ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, ImRect, void>)vt[989])(output, window, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, void>)vt[989])((nint)output, (nint)window, r);
			#endif
		}

		public static ImRect WindowRectAbsToRel(ImGuiWindowPtr window, ImRect r)
		{
			ImRect ret;
			WindowRectAbsToRelNative(&ret, window, r);
			return ret;
		}

		public static void WindowRectAbsToRel(ImRectPtr output, ImGuiWindowPtr window, ImRect r)
		{
			WindowRectAbsToRelNative(output, window, r);
		}

		public static void WindowRectAbsToRel(ref ImRect output, ImGuiWindowPtr window, ImRect r)
		{
			fixed (ImRect* poutput = &output)
			{
				WindowRectAbsToRelNative((ImRect*)poutput, window, r);
			}
		}

		public static ImRect WindowRectAbsToRel(ref ImGuiWindow window, ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImRect ret;
				WindowRectAbsToRelNative(&ret, (ImGuiWindow*)pwindow, r);
				return ret;
			}
		}

		public static void WindowRectAbsToRel(ImRectPtr output, ref ImGuiWindow window, ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowRectAbsToRelNative(output, (ImGuiWindow*)pwindow, r);
			}
		}

		public static void WindowRectAbsToRel(ref ImRect output, ref ImGuiWindow window, ImRect r)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowRectAbsToRelNative((ImRect*)poutput, (ImGuiWindow*)pwindow, r);
				}
			}
		}

		internal static void WindowRectRelToAbsNative(ImRect* output, ImGuiWindow* window, ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, ImRect, void>)vt[990])(output, window, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, void>)vt[990])((nint)output, (nint)window, r);
			#endif
		}

		public static ImRect WindowRectRelToAbs(ImGuiWindowPtr window, ImRect r)
		{
			ImRect ret;
			WindowRectRelToAbsNative(&ret, window, r);
			return ret;
		}

		public static void WindowRectRelToAbs(ImRectPtr output, ImGuiWindowPtr window, ImRect r)
		{
			WindowRectRelToAbsNative(output, window, r);
		}

		public static void WindowRectRelToAbs(ref ImRect output, ImGuiWindowPtr window, ImRect r)
		{
			fixed (ImRect* poutput = &output)
			{
				WindowRectRelToAbsNative((ImRect*)poutput, window, r);
			}
		}

		public static ImRect WindowRectRelToAbs(ref ImGuiWindow window, ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImRect ret;
				WindowRectRelToAbsNative(&ret, (ImGuiWindow*)pwindow, r);
				return ret;
			}
		}

		public static void WindowRectRelToAbs(ImRectPtr output, ref ImGuiWindow window, ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowRectRelToAbsNative(output, (ImGuiWindow*)pwindow, r);
			}
		}

		public static void WindowRectRelToAbs(ref ImRect output, ref ImGuiWindow window, ImRect r)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowRectRelToAbsNative((ImRect*)poutput, (ImGuiWindow*)pwindow, r);
				}
			}
		}

		internal static void WindowPosRelToAbsNative(Vector2* output, ImGuiWindow* window, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, Vector2, void>)vt[991])(output, window, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, Vector2, void>)vt[991])((nint)output, (nint)window, p);
			#endif
		}

		public static Vector2 WindowPosRelToAbs(ImGuiWindowPtr window, Vector2 p)
		{
			Vector2 ret;
			WindowPosRelToAbsNative(&ret, window, p);
			return ret;
		}

		public static void WindowPosRelToAbs(Vector2* output, ImGuiWindowPtr window, Vector2 p)
		{
			WindowPosRelToAbsNative(output, window, p);
		}

		public static void WindowPosRelToAbs(ref Vector2 output, ImGuiWindowPtr window, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				WindowPosRelToAbsNative((Vector2*)poutput, window, p);
			}
		}

		public static Vector2 WindowPosRelToAbs(ref ImGuiWindow window, Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				WindowPosRelToAbsNative(&ret, (ImGuiWindow*)pwindow, p);
				return ret;
			}
		}

		public static void WindowPosRelToAbs(Vector2* output, ref ImGuiWindow window, Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowPosRelToAbsNative(output, (ImGuiWindow*)pwindow, p);
			}
		}

		public static void WindowPosRelToAbs(ref Vector2 output, ref ImGuiWindow window, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowPosRelToAbsNative((Vector2*)poutput, (ImGuiWindow*)pwindow, p);
				}
			}
		}

		internal static void WindowPosAbsToRelNative(Vector2* output, ImGuiWindow* window, Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, Vector2, void>)vt[992])(output, window, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, Vector2, void>)vt[992])((nint)output, (nint)window, p);
			#endif
		}

		public static Vector2 WindowPosAbsToRel(ImGuiWindowPtr window, Vector2 p)
		{
			Vector2 ret;
			WindowPosAbsToRelNative(&ret, window, p);
			return ret;
		}

		public static void WindowPosAbsToRel(Vector2* output, ImGuiWindowPtr window, Vector2 p)
		{
			WindowPosAbsToRelNative(output, window, p);
		}

		public static void WindowPosAbsToRel(ref Vector2 output, ImGuiWindowPtr window, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				WindowPosAbsToRelNative((Vector2*)poutput, window, p);
			}
		}

		public static Vector2 WindowPosAbsToRel(ref ImGuiWindow window, Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				WindowPosAbsToRelNative(&ret, (ImGuiWindow*)pwindow, p);
				return ret;
			}
		}

		public static void WindowPosAbsToRel(Vector2* output, ref ImGuiWindow window, Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowPosAbsToRelNative(output, (ImGuiWindow*)pwindow, p);
			}
		}

		public static void WindowPosAbsToRel(ref Vector2 output, ref ImGuiWindow window, Vector2 p)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowPosAbsToRelNative((Vector2*)poutput, (ImGuiWindow*)pwindow, p);
				}
			}
		}

		internal static void FocusWindowNative(ImGuiWindow* window, ImGuiFocusRequestFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiFocusRequestFlags, void>)vt[993])(window, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiFocusRequestFlags, void>)vt[993])((nint)window, flags);
			#endif
		}

		public static void FocusWindow(ImGuiWindowPtr window, ImGuiFocusRequestFlags flags)
		{
			FocusWindowNative(window, flags);
		}

		public static void FocusWindow(ref ImGuiWindow window, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				FocusWindowNative((ImGuiWindow*)pwindow, flags);
			}
		}

		internal static void FocusTopMostWindowUnderOneNative(ImGuiWindow* underThisWindow, ImGuiWindow* ignoreWindow, ImGuiViewport* filterViewport, ImGuiFocusRequestFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, ImGuiViewport*, ImGuiFocusRequestFlags, void>)vt[994])(underThisWindow, ignoreWindow, filterViewport, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, ImGuiFocusRequestFlags, void>)vt[994])((nint)underThisWindow, (nint)ignoreWindow, (nint)filterViewport, flags);
			#endif
		}

		public static void FocusTopMostWindowUnderOne(ImGuiWindowPtr underThisWindow, ImGuiWindowPtr ignoreWindow, ImGuiViewportPtr filterViewport, ImGuiFocusRequestFlags flags)
		{
			FocusTopMostWindowUnderOneNative(underThisWindow, ignoreWindow, filterViewport, flags);
		}

		public static void FocusTopMostWindowUnderOne(ref ImGuiWindow underThisWindow, ImGuiWindowPtr ignoreWindow, ImGuiViewportPtr filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, ignoreWindow, filterViewport, flags);
			}
		}

		public static void FocusTopMostWindowUnderOne(ImGuiWindowPtr underThisWindow, ref ImGuiWindow ignoreWindow, ImGuiViewportPtr filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
			{
				FocusTopMostWindowUnderOneNative(underThisWindow, (ImGuiWindow*)pignoreWindow, filterViewport, flags);
			}
		}

		public static void FocusTopMostWindowUnderOne(ref ImGuiWindow underThisWindow, ref ImGuiWindow ignoreWindow, ImGuiViewportPtr filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
				{
					FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, (ImGuiWindow*)pignoreWindow, filterViewport, flags);
				}
			}
		}

		public static void FocusTopMostWindowUnderOne(ImGuiWindowPtr underThisWindow, ImGuiWindowPtr ignoreWindow, ref ImGuiViewport filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiViewport* pfilterViewport = &filterViewport)
			{
				FocusTopMostWindowUnderOneNative(underThisWindow, ignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
			}
		}

		public static void FocusTopMostWindowUnderOne(ref ImGuiWindow underThisWindow, ImGuiWindowPtr ignoreWindow, ref ImGuiViewport filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				fixed (ImGuiViewport* pfilterViewport = &filterViewport)
				{
					FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, ignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
				}
			}
		}

		public static void FocusTopMostWindowUnderOne(ImGuiWindowPtr underThisWindow, ref ImGuiWindow ignoreWindow, ref ImGuiViewport filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
			{
				fixed (ImGuiViewport* pfilterViewport = &filterViewport)
				{
					FocusTopMostWindowUnderOneNative(underThisWindow, (ImGuiWindow*)pignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
				}
			}
		}

		public static void FocusTopMostWindowUnderOne(ref ImGuiWindow underThisWindow, ref ImGuiWindow ignoreWindow, ref ImGuiViewport filterViewport, ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
				{
					fixed (ImGuiViewport* pfilterViewport = &filterViewport)
					{
						FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, (ImGuiWindow*)pignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
					}
				}
			}
		}

		internal static void BringWindowToFocusFrontNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[995])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[995])((nint)window);
			#endif
		}

		public static void BringWindowToFocusFront(ImGuiWindowPtr window)
		{
			BringWindowToFocusFrontNative(window);
		}

		public static void BringWindowToFocusFront(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToFocusFrontNative((ImGuiWindow*)pwindow);
			}
		}

		internal static void BringWindowToDisplayFrontNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[996])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[996])((nint)window);
			#endif
		}

		public static void BringWindowToDisplayFront(ImGuiWindowPtr window)
		{
			BringWindowToDisplayFrontNative(window);
		}

		public static void BringWindowToDisplayFront(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToDisplayFrontNative((ImGuiWindow*)pwindow);
			}
		}

		internal static void BringWindowToDisplayBackNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[997])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[997])((nint)window);
			#endif
		}

		public static void BringWindowToDisplayBack(ImGuiWindowPtr window)
		{
			BringWindowToDisplayBackNative(window);
		}

		public static void BringWindowToDisplayBack(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToDisplayBackNative((ImGuiWindow*)pwindow);
			}
		}

		internal static void BringWindowToDisplayBehindNative(ImGuiWindow* window, ImGuiWindow* aboveWindow)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, void>)vt[998])(window, aboveWindow);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[998])((nint)window, (nint)aboveWindow);
			#endif
		}

		public static void BringWindowToDisplayBehind(ImGuiWindowPtr window, ImGuiWindowPtr aboveWindow)
		{
			BringWindowToDisplayBehindNative(window, aboveWindow);
		}

		public static void BringWindowToDisplayBehind(ref ImGuiWindow window, ImGuiWindowPtr aboveWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToDisplayBehindNative((ImGuiWindow*)pwindow, aboveWindow);
			}
		}

		public static void BringWindowToDisplayBehind(ImGuiWindowPtr window, ref ImGuiWindow aboveWindow)
		{
			fixed (ImGuiWindow* paboveWindow = &aboveWindow)
			{
				BringWindowToDisplayBehindNative(window, (ImGuiWindow*)paboveWindow);
			}
		}

		public static void BringWindowToDisplayBehind(ref ImGuiWindow window, ref ImGuiWindow aboveWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* paboveWindow = &aboveWindow)
				{
					BringWindowToDisplayBehindNative((ImGuiWindow*)pwindow, (ImGuiWindow*)paboveWindow);
				}
			}
		}

		internal static int FindWindowDisplayIndexNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, int>)vt[999])(window);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[999])((nint)window);
			#endif
		}

		public static int FindWindowDisplayIndex(ImGuiWindowPtr window)
		{
			int ret = FindWindowDisplayIndexNative(window);
			return ret;
		}

		public static int FindWindowDisplayIndex(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				int ret = FindWindowDisplayIndexNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		internal static ImGuiWindow* FindBottomMostVisibleWindowWithinBeginStackNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*>)vt[1000])(window);
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1000])((nint)window);
			#endif
		}

		public static ImGuiWindowPtr FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindowPtr window)
		{
			ImGuiWindowPtr ret = FindBottomMostVisibleWindowWithinBeginStackNative(window);
			return ret;
		}

		public static ImGuiWindowPtr FindBottomMostVisibleWindowWithinBeginStack(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImGuiWindowPtr ret = FindBottomMostVisibleWindowWithinBeginStackNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		internal static void SetNextWindowRefreshPolicyNative(ImGuiWindowRefreshFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowRefreshFlags, void>)vt[1001])(flags);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiWindowRefreshFlags, void>)vt[1001])(flags);
			#endif
		}

		public static void SetNextWindowRefreshPolicy(ImGuiWindowRefreshFlags flags)
		{
			SetNextWindowRefreshPolicyNative(flags);
		}

		internal static void SetCurrentFontNative(ImFont* font)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, void>)vt[1002])(font);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1002])((nint)font);
			#endif
		}

		public static void SetCurrentFont(ImFontPtr font)
		{
			SetCurrentFontNative(font);
		}

		public static void SetCurrentFont(ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				SetCurrentFontNative((ImFont*)pfont);
			}
		}

		internal static ImFont* GetDefaultFontNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFont*>)vt[1003])();
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint>)vt[1003])();
			#endif
		}

		public static ImFontPtr GetDefaultFont()
		{
			ImFontPtr ret = GetDefaultFontNative();
			return ret;
		}

		internal static ImDrawList* GetForegroundDrawListWindowPtrNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImDrawList*>)vt[1004])(window);
			#else
			return (ImDrawList*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1004])((nint)window);
			#endif
		}

		public static ImDrawListPtr GetForegroundDrawListWindowPtr(ImGuiWindowPtr window)
		{
			ImDrawListPtr ret = GetForegroundDrawListWindowPtrNative(window);
			return ret;
		}

		public static ImDrawListPtr GetForegroundDrawListWindowPtr(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImDrawListPtr ret = GetForegroundDrawListWindowPtrNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		internal static void AddDrawListToDrawDataExNative(ImDrawData* drawData, ImVectorImDrawListPtr* outList, ImDrawList* drawList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, ImVectorImDrawListPtr*, ImDrawList*, void>)vt[1005])(drawData, outList, drawList);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[1005])((nint)drawData, (nint)outList, (nint)drawList);
			#endif
		}

		public static void AddDrawListToDrawDataEx(ImDrawDataPtr drawData, ImVectorImDrawListPtrPtr outList, ImDrawListPtr drawList)
		{
			AddDrawListToDrawDataExNative(drawData, outList, drawList);
		}

		public static void AddDrawListToDrawDataEx(ref ImDrawData drawData, ImVectorImDrawListPtrPtr outList, ImDrawListPtr drawList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				AddDrawListToDrawDataExNative((ImDrawData*)pdrawData, outList, drawList);
			}
		}

		public static void AddDrawListToDrawDataEx(ImDrawDataPtr drawData, ref ImVectorImDrawListPtr outList, ImDrawListPtr drawList)
		{
			fixed (ImVectorImDrawListPtr* poutList = &outList)
			{
				AddDrawListToDrawDataExNative(drawData, (ImVectorImDrawListPtr*)poutList, drawList);
			}
		}

		public static void AddDrawListToDrawDataEx(ref ImDrawData drawData, ref ImVectorImDrawListPtr outList, ImDrawListPtr drawList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				fixed (ImVectorImDrawListPtr* poutList = &outList)
				{
					AddDrawListToDrawDataExNative((ImDrawData*)pdrawData, (ImVectorImDrawListPtr*)poutList, drawList);
				}
			}
		}

		public static void AddDrawListToDrawDataEx(ImDrawDataPtr drawData, ImVectorImDrawListPtrPtr outList, ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				AddDrawListToDrawDataExNative(drawData, outList, (ImDrawList*)pdrawList);
			}
		}

		public static void AddDrawListToDrawDataEx(ref ImDrawData drawData, ImVectorImDrawListPtrPtr outList, ref ImDrawList drawList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					AddDrawListToDrawDataExNative((ImDrawData*)pdrawData, outList, (ImDrawList*)pdrawList);
				}
			}
		}

		public static void AddDrawListToDrawDataEx(ImDrawDataPtr drawData, ref ImVectorImDrawListPtr outList, ref ImDrawList drawList)
		{
			fixed (ImVectorImDrawListPtr* poutList = &outList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					AddDrawListToDrawDataExNative(drawData, (ImVectorImDrawListPtr*)poutList, (ImDrawList*)pdrawList);
				}
			}
		}

		public static void AddDrawListToDrawDataEx(ref ImDrawData drawData, ref ImVectorImDrawListPtr outList, ref ImDrawList drawList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				fixed (ImVectorImDrawListPtr* poutList = &outList)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						AddDrawListToDrawDataExNative((ImDrawData*)pdrawData, (ImVectorImDrawListPtr*)poutList, (ImDrawList*)pdrawList);
					}
				}
			}
		}

		internal static void InitializeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1006])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1006])();
			#endif
		}

		public static void Initialize()
		{
			InitializeNative();
		}

		internal static void ShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1007])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1007])();
			#endif
		}

		public static void Shutdown()
		{
			ShutdownNative();
		}

		internal static void UpdateInputEventsNative(byte trickleFastInputs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)vt[1008])(trickleFastInputs);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)vt[1008])(trickleFastInputs);
			#endif
		}

		public static void UpdateInputEvents(bool trickleFastInputs)
		{
			UpdateInputEventsNative(trickleFastInputs ? (byte)1 : (byte)0);
		}

		internal static void UpdateHoveredWindowAndCaptureFlagsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1009])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1009])();
			#endif
		}

		public static void UpdateHoveredWindowAndCaptureFlags()
		{
			UpdateHoveredWindowAndCaptureFlagsNative();
		}

		internal static void FindHoveredWindowExNative(Vector2 pos, byte findFirstAndInAnyViewport, ImGuiWindow** outHoveredWindow, ImGuiWindow** outHoveredWindowUnderMovingWindow)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, byte, ImGuiWindow**, ImGuiWindow**, void>)vt[1010])(pos, findFirstAndInAnyViewport, outHoveredWindow, outHoveredWindowUnderMovingWindow);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, byte, nint, nint, void>)vt[1010])(pos, findFirstAndInAnyViewport, (nint)outHoveredWindow, (nint)outHoveredWindowUnderMovingWindow);
			#endif
		}

		public static void FindHoveredWindowEx(Vector2 pos, bool findFirstAndInAnyViewport, ImGuiWindowPtrPtr outHoveredWindow, ImGuiWindowPtrPtr outHoveredWindowUnderMovingWindow)
		{
			FindHoveredWindowExNative(pos, findFirstAndInAnyViewport ? (byte)1 : (byte)0, outHoveredWindow, outHoveredWindowUnderMovingWindow);
		}

		public static void FindHoveredWindowEx(Vector2 pos, bool findFirstAndInAnyViewport, ref ImGuiWindow* outHoveredWindow, ImGuiWindowPtrPtr outHoveredWindowUnderMovingWindow)
		{
			fixed (ImGuiWindow** poutHoveredWindow = &outHoveredWindow)
			{
				FindHoveredWindowExNative(pos, findFirstAndInAnyViewport ? (byte)1 : (byte)0, (ImGuiWindow**)poutHoveredWindow, outHoveredWindowUnderMovingWindow);
			}
		}

		public static void FindHoveredWindowEx(Vector2 pos, bool findFirstAndInAnyViewport, ImGuiWindowPtrPtr outHoveredWindow, ref ImGuiWindow* outHoveredWindowUnderMovingWindow)
		{
			fixed (ImGuiWindow** poutHoveredWindowUnderMovingWindow = &outHoveredWindowUnderMovingWindow)
			{
				FindHoveredWindowExNative(pos, findFirstAndInAnyViewport ? (byte)1 : (byte)0, outHoveredWindow, (ImGuiWindow**)poutHoveredWindowUnderMovingWindow);
			}
		}

		public static void FindHoveredWindowEx(Vector2 pos, bool findFirstAndInAnyViewport, ref ImGuiWindow* outHoveredWindow, ref ImGuiWindow* outHoveredWindowUnderMovingWindow)
		{
			fixed (ImGuiWindow** poutHoveredWindow = &outHoveredWindow)
			{
				fixed (ImGuiWindow** poutHoveredWindowUnderMovingWindow = &outHoveredWindowUnderMovingWindow)
				{
					FindHoveredWindowExNative(pos, findFirstAndInAnyViewport ? (byte)1 : (byte)0, (ImGuiWindow**)poutHoveredWindow, (ImGuiWindow**)poutHoveredWindowUnderMovingWindow);
				}
			}
		}

		internal static void StartMouseMovingWindowNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[1011])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1011])((nint)window);
			#endif
		}

		public static void StartMouseMovingWindow(ImGuiWindowPtr window)
		{
			StartMouseMovingWindowNative(window);
		}

		public static void StartMouseMovingWindow(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				StartMouseMovingWindowNative((ImGuiWindow*)pwindow);
			}
		}

		internal static void StartMouseMovingWindowOrNodeNative(ImGuiWindow* window, ImGuiDockNode* node, byte undock)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiDockNode*, byte, void>)vt[1012])(window, node, undock);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, byte, void>)vt[1012])((nint)window, (nint)node, undock);
			#endif
		}

		public static void StartMouseMovingWindowOrNode(ImGuiWindowPtr window, ImGuiDockNodePtr node, bool undock)
		{
			StartMouseMovingWindowOrNodeNative(window, node, undock ? (byte)1 : (byte)0);
		}

		public static void StartMouseMovingWindowOrNode(ref ImGuiWindow window, ImGuiDockNodePtr node, bool undock)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				StartMouseMovingWindowOrNodeNative((ImGuiWindow*)pwindow, node, undock ? (byte)1 : (byte)0);
			}
		}

		public static void StartMouseMovingWindowOrNode(ImGuiWindowPtr window, ref ImGuiDockNode node, bool undock)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				StartMouseMovingWindowOrNodeNative(window, (ImGuiDockNode*)pnode, undock ? (byte)1 : (byte)0);
			}
		}

		public static void StartMouseMovingWindowOrNode(ref ImGuiWindow window, ref ImGuiDockNode node, bool undock)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiDockNode* pnode = &node)
				{
					StartMouseMovingWindowOrNodeNative((ImGuiWindow*)pwindow, (ImGuiDockNode*)pnode, undock ? (byte)1 : (byte)0);
				}
			}
		}

		internal static void UpdateMouseMovingWindowNewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1013])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1013])();
			#endif
		}

		public static void UpdateMouseMovingWindowNewFrame()
		{
			UpdateMouseMovingWindowNewFrameNative();
		}

		internal static void UpdateMouseMovingWindowEndFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1014])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1014])();
			#endif
		}

		public static void UpdateMouseMovingWindowEndFrame()
		{
			UpdateMouseMovingWindowEndFrameNative();
		}

		internal static int AddContextHookNative(ImGuiContext* context, ImGuiContextHook* hook)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiContextHook*, int>)vt[1015])(context, hook);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[1015])((nint)context, (nint)hook);
			#endif
		}

		public static int AddContextHook(ImGuiContextPtr context, ImGuiContextHookPtr hook)
		{
			int ret = AddContextHookNative(context, hook);
			return ret;
		}

		public static int AddContextHook(ref ImGuiContext context, ImGuiContextHookPtr hook)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				int ret = AddContextHookNative((ImGuiContext*)pcontext, hook);
				return ret;
			}
		}

		public static int AddContextHook(ImGuiContextPtr context, ref ImGuiContextHook hook)
		{
			fixed (ImGuiContextHook* phook = &hook)
			{
				int ret = AddContextHookNative(context, (ImGuiContextHook*)phook);
				return ret;
			}
		}

		public static int AddContextHook(ref ImGuiContext context, ref ImGuiContextHook hook)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				fixed (ImGuiContextHook* phook = &hook)
				{
					int ret = AddContextHookNative((ImGuiContext*)pcontext, (ImGuiContextHook*)phook);
					return ret;
				}
			}
		}

		internal static void RemoveContextHookNative(ImGuiContext* context, int hookToRemove)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, int, void>)vt[1016])(context, hookToRemove);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[1016])((nint)context, hookToRemove);
			#endif
		}

		public static void RemoveContextHook(ImGuiContextPtr context, int hookToRemove)
		{
			RemoveContextHookNative(context, hookToRemove);
		}

		public static void RemoveContextHook(ref ImGuiContext context, int hookToRemove)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				RemoveContextHookNative((ImGuiContext*)pcontext, hookToRemove);
			}
		}

		internal static void CallContextHooksNative(ImGuiContext* context, ImGuiContextHookType type)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiContextHookType, void>)vt[1017])(context, type);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiContextHookType, void>)vt[1017])((nint)context, type);
			#endif
		}

		public static void CallContextHooks(ImGuiContextPtr context, ImGuiContextHookType type)
		{
			CallContextHooksNative(context, type);
		}

		public static void CallContextHooks(ref ImGuiContext context, ImGuiContextHookType type)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				CallContextHooksNative((ImGuiContext*)pcontext, type);
			}
		}

		internal static void TranslateWindowsInViewportNative(ImGuiViewportP* viewport, Vector2 oldPos, Vector2 newPos)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, Vector2, Vector2, void>)vt[1018])(viewport, oldPos, newPos);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[1018])((nint)viewport, oldPos, newPos);
			#endif
		}

		public static void TranslateWindowsInViewport(ImGuiViewportPPtr viewport, Vector2 oldPos, Vector2 newPos)
		{
			TranslateWindowsInViewportNative(viewport, oldPos, newPos);
		}

		public static void TranslateWindowsInViewport(ref ImGuiViewportP viewport, Vector2 oldPos, Vector2 newPos)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				TranslateWindowsInViewportNative((ImGuiViewportP*)pviewport, oldPos, newPos);
			}
		}

		internal static void ScaleWindowsInViewportNative(ImGuiViewportP* viewport, float scale)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, float, void>)vt[1019])(viewport, scale);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[1019])((nint)viewport, scale);
			#endif
		}

		public static void ScaleWindowsInViewport(ImGuiViewportPPtr viewport, float scale)
		{
			ScaleWindowsInViewportNative(viewport, scale);
		}

		public static void ScaleWindowsInViewport(ref ImGuiViewportP viewport, float scale)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				ScaleWindowsInViewportNative((ImGuiViewportP*)pviewport, scale);
			}
		}

		internal static void DestroyPlatformWindowNative(ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, void>)vt[1020])(viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1020])((nint)viewport);
			#endif
		}

		public static void DestroyPlatformWindow(ImGuiViewportPPtr viewport)
		{
			DestroyPlatformWindowNative(viewport);
		}

		public static void DestroyPlatformWindow(ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DestroyPlatformWindowNative((ImGuiViewportP*)pviewport);
			}
		}

		internal static void SetWindowViewportNative(ImGuiWindow* window, ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiViewportP*, void>)vt[1021])(window, viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1021])((nint)window, (nint)viewport);
			#endif
		}

		public static void SetWindowViewport(ImGuiWindowPtr window, ImGuiViewportPPtr viewport)
		{
			SetWindowViewportNative(window, viewport);
		}

		public static void SetWindowViewport(ref ImGuiWindow window, ImGuiViewportPPtr viewport)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowViewportNative((ImGuiWindow*)pwindow, viewport);
			}
		}

		public static void SetWindowViewport(ImGuiWindowPtr window, ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				SetWindowViewportNative(window, (ImGuiViewportP*)pviewport);
			}
		}

		public static void SetWindowViewport(ref ImGuiWindow window, ref ImGuiViewportP viewport)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					SetWindowViewportNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport);
				}
			}
		}

		internal static void SetCurrentViewportNative(ImGuiWindow* window, ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiViewportP*, void>)vt[1022])(window, viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1022])((nint)window, (nint)viewport);
			#endif
		}

		public static void SetCurrentViewport(ImGuiWindowPtr window, ImGuiViewportPPtr viewport)
		{
			SetCurrentViewportNative(window, viewport);
		}

		public static void SetCurrentViewport(ref ImGuiWindow window, ImGuiViewportPPtr viewport)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetCurrentViewportNative((ImGuiWindow*)pwindow, viewport);
			}
		}

		public static void SetCurrentViewport(ImGuiWindowPtr window, ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				SetCurrentViewportNative(window, (ImGuiViewportP*)pviewport);
			}
		}

		public static void SetCurrentViewport(ref ImGuiWindow window, ref ImGuiViewportP viewport)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					SetCurrentViewportNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport);
				}
			}
		}

		internal static ImGuiPlatformMonitor* GetViewportPlatformMonitorNative(ImGuiViewport* viewport)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiViewport*, ImGuiPlatformMonitor*>)vt[1023])(viewport);
			#else
			return (ImGuiPlatformMonitor*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1023])((nint)viewport);
			#endif
		}

		public static ImGuiPlatformMonitorPtr GetViewportPlatformMonitor(ImGuiViewportPtr viewport)
		{
			ImGuiPlatformMonitorPtr ret = GetViewportPlatformMonitorNative(viewport);
			return ret;
		}

		public static ImGuiPlatformMonitorPtr GetViewportPlatformMonitor(ref ImGuiViewport viewport)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				ImGuiPlatformMonitorPtr ret = GetViewportPlatformMonitorNative((ImGuiViewport*)pviewport);
				return ret;
			}
		}

		internal static ImGuiViewportP* FindHoveredViewportFromPlatformWindowStackNative(Vector2 mousePlatformPos)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, ImGuiViewportP*>)vt[1024])(mousePlatformPos);
			#else
			return (ImGuiViewportP*)((delegate* unmanaged[Cdecl]<Vector2, nint>)vt[1024])(mousePlatformPos);
			#endif
		}

		public static ImGuiViewportPPtr FindHoveredViewportFromPlatformWindowStack(Vector2 mousePlatformPos)
		{
			ImGuiViewportPPtr ret = FindHoveredViewportFromPlatformWindowStackNative(mousePlatformPos);
			return ret;
		}

		internal static void MarkIniSettingsDirtyNilNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1025])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1025])();
			#endif
		}

		public static void MarkIniSettingsDirtyNil()
		{
			MarkIniSettingsDirtyNilNative();
		}

		internal static void MarkIniSettingsDirtyWindowPtrNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[1026])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1026])((nint)window);
			#endif
		}

		public static void MarkIniSettingsDirtyWindowPtr(ImGuiWindowPtr window)
		{
			MarkIniSettingsDirtyWindowPtrNative(window);
		}

		public static void MarkIniSettingsDirtyWindowPtr(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				MarkIniSettingsDirtyWindowPtrNative((ImGuiWindow*)pwindow);
			}
		}

		internal static void ClearIniSettingsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1027])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1027])();
			#endif
		}

		public static void ClearIniSettings()
		{
			ClearIniSettingsNative();
		}

		internal static void AddSettingsHandlerNative(ImGuiSettingsHandler* handler)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSettingsHandler*, void>)vt[1028])(handler);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1028])((nint)handler);
			#endif
		}

		public static void AddSettingsHandler(ImGuiSettingsHandlerPtr handler)
		{
			AddSettingsHandlerNative(handler);
		}

		public static void AddSettingsHandler(ref ImGuiSettingsHandler handler)
		{
			fixed (ImGuiSettingsHandler* phandler = &handler)
			{
				AddSettingsHandlerNative((ImGuiSettingsHandler*)phandler);
			}
		}

		internal static void RemoveSettingsHandlerNative(byte* typeName)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[1029])(typeName);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1029])((nint)typeName);
			#endif
		}

		public static void RemoveSettingsHandler(byte* typeName)
		{
			RemoveSettingsHandlerNative(typeName);
		}

		public static void RemoveSettingsHandler(ref byte typeName)
		{
			fixed (byte* ptypeName = &typeName)
			{
				RemoveSettingsHandlerNative((byte*)ptypeName);
			}
		}

		public static void RemoveSettingsHandler(string typeName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (typeName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(typeName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(typeName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RemoveSettingsHandlerNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void RemoveSettingsHandler(ReadOnlySpan<byte> typeName)
		{
			fixed (byte* ptypeName = typeName)
			{
				RemoveSettingsHandlerNative((byte*)ptypeName);
			}
		}

		internal static ImGuiSettingsHandler* FindSettingsHandlerNative(byte* typeName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiSettingsHandler*>)vt[1030])(typeName);
			#else
			return (ImGuiSettingsHandler*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1030])((nint)typeName);
			#endif
		}

		public static ImGuiSettingsHandlerPtr FindSettingsHandler(byte* typeName)
		{
			ImGuiSettingsHandlerPtr ret = FindSettingsHandlerNative(typeName);
			return ret;
		}

		public static ImGuiSettingsHandlerPtr FindSettingsHandler(ref byte typeName)
		{
			fixed (byte* ptypeName = &typeName)
			{
				ImGuiSettingsHandlerPtr ret = FindSettingsHandlerNative((byte*)ptypeName);
				return ret;
			}
		}

		public static ImGuiSettingsHandlerPtr FindSettingsHandler(string typeName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (typeName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(typeName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(typeName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiSettingsHandlerPtr ret = FindSettingsHandlerNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImGuiSettingsHandlerPtr FindSettingsHandler(ReadOnlySpan<byte> typeName)
		{
			fixed (byte* ptypeName = typeName)
			{
				ImGuiSettingsHandlerPtr ret = FindSettingsHandlerNative((byte*)ptypeName);
				return ret;
			}
		}

		internal static ImGuiWindowSettings* CreateNewWindowSettingsNative(byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiWindowSettings*>)vt[1031])(name);
			#else
			return (ImGuiWindowSettings*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1031])((nint)name);
			#endif
		}

		public static ImGuiWindowSettingsPtr CreateNewWindowSettings(byte* name)
		{
			ImGuiWindowSettingsPtr ret = CreateNewWindowSettingsNative(name);
			return ret;
		}

		public static ImGuiWindowSettingsPtr CreateNewWindowSettings(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImGuiWindowSettingsPtr ret = CreateNewWindowSettingsNative((byte*)pname);
				return ret;
			}
		}

		public static ImGuiWindowSettingsPtr CreateNewWindowSettings(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiWindowSettingsPtr ret = CreateNewWindowSettingsNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static ImGuiWindowSettingsPtr CreateNewWindowSettings(ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				ImGuiWindowSettingsPtr ret = CreateNewWindowSettingsNative((byte*)pname);
				return ret;
			}
		}

		internal static ImGuiWindowSettings* FindWindowSettingsByIDNative(int id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiWindowSettings*>)vt[1032])(id);
			#else
			return (ImGuiWindowSettings*)((delegate* unmanaged[Cdecl]<int, nint>)vt[1032])(id);
			#endif
		}

		public static ImGuiWindowSettingsPtr FindWindowSettingsByID(int id)
		{
			ImGuiWindowSettingsPtr ret = FindWindowSettingsByIDNative(id);
			return ret;
		}

		internal static ImGuiWindowSettings* FindWindowSettingsByWindowNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindowSettings*>)vt[1033])(window);
			#else
			return (ImGuiWindowSettings*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1033])((nint)window);
			#endif
		}

		public static ImGuiWindowSettingsPtr FindWindowSettingsByWindow(ImGuiWindowPtr window)
		{
			ImGuiWindowSettingsPtr ret = FindWindowSettingsByWindowNative(window);
			return ret;
		}

		public static ImGuiWindowSettingsPtr FindWindowSettingsByWindow(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImGuiWindowSettingsPtr ret = FindWindowSettingsByWindowNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		internal static void ClearWindowSettingsNative(byte* name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[1034])(name);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1034])((nint)name);
			#endif
		}

		public static void ClearWindowSettings(byte* name)
		{
			ClearWindowSettingsNative(name);
		}

		public static void ClearWindowSettings(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ClearWindowSettingsNative((byte*)pname);
			}
		}

		public static void ClearWindowSettings(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ClearWindowSettingsNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ClearWindowSettings(ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				ClearWindowSettingsNative((byte*)pname);
			}
		}

		internal static void LocalizeRegisterEntriesNative(ImGuiLocEntry* entries, int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiLocEntry*, int, void>)vt[1035])(entries, count);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[1035])((nint)entries, count);
			#endif
		}

		public static void LocalizeRegisterEntries(ImGuiLocEntryPtr entries, int count)
		{
			LocalizeRegisterEntriesNative(entries, count);
		}

		public static void LocalizeRegisterEntries(ref ImGuiLocEntry entries, int count)
		{
			fixed (ImGuiLocEntry* pentries = &entries)
			{
				LocalizeRegisterEntriesNative((ImGuiLocEntry*)pentries, count);
			}
		}

		internal static byte* LocalizeGetMsgNative(ImGuiLocKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiLocKey, byte*>)vt[1036])(key);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<ImGuiLocKey, nint>)vt[1036])(key);
			#endif
		}

		public static byte* LocalizeGetMsg(ImGuiLocKey key)
		{
			byte* ret = LocalizeGetMsgNative(key);
			return ret;
		}

		public static string LocalizeGetMsgS(ImGuiLocKey key)
		{
			string ret = Utils.DecodeStringUTF8(LocalizeGetMsgNative(key));
			return ret;
		}

		internal static void SetScrollXWindowPtrNative(ImGuiWindow* window, float scrollX)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, float, void>)vt[1037])(window, scrollX);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[1037])((nint)window, scrollX);
			#endif
		}

		public static void SetScrollXWindowPtr(ImGuiWindowPtr window, float scrollX)
		{
			SetScrollXWindowPtrNative(window, scrollX);
		}

		public static void SetScrollXWindowPtr(ref ImGuiWindow window, float scrollX)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetScrollXWindowPtrNative((ImGuiWindow*)pwindow, scrollX);
			}
		}

		internal static void SetScrollYWindowPtrNative(ImGuiWindow* window, float scrollY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, float, void>)vt[1038])(window, scrollY);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[1038])((nint)window, scrollY);
			#endif
		}

		public static void SetScrollYWindowPtr(ImGuiWindowPtr window, float scrollY)
		{
			SetScrollYWindowPtrNative(window, scrollY);
		}

		public static void SetScrollYWindowPtr(ref ImGuiWindow window, float scrollY)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetScrollYWindowPtrNative((ImGuiWindow*)pwindow, scrollY);
			}
		}

		internal static void SetScrollFromPosXWindowPtrNative(ImGuiWindow* window, float localX, float centerXRatio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, float, float, void>)vt[1039])(window, localX, centerXRatio);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)vt[1039])((nint)window, localX, centerXRatio);
			#endif
		}

		public static void SetScrollFromPosXWindowPtr(ImGuiWindowPtr window, float localX, float centerXRatio)
		{
			SetScrollFromPosXWindowPtrNative(window, localX, centerXRatio);
		}

		public static void SetScrollFromPosXWindowPtr(ref ImGuiWindow window, float localX, float centerXRatio)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetScrollFromPosXWindowPtrNative((ImGuiWindow*)pwindow, localX, centerXRatio);
			}
		}

		internal static void SetScrollFromPosYWindowPtrNative(ImGuiWindow* window, float localY, float centerYRatio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, float, float, void>)vt[1040])(window, localY, centerYRatio);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)vt[1040])((nint)window, localY, centerYRatio);
			#endif
		}

		public static void SetScrollFromPosYWindowPtr(ImGuiWindowPtr window, float localY, float centerYRatio)
		{
			SetScrollFromPosYWindowPtrNative(window, localY, centerYRatio);
		}

		public static void SetScrollFromPosYWindowPtr(ref ImGuiWindow window, float localY, float centerYRatio)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetScrollFromPosYWindowPtrNative((ImGuiWindow*)pwindow, localY, centerYRatio);
			}
		}

		internal static void ScrollToItemNative(ImGuiScrollFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiScrollFlags, void>)vt[1041])(flags);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiScrollFlags, void>)vt[1041])(flags);
			#endif
		}

		public static void ScrollToItem(ImGuiScrollFlags flags)
		{
			ScrollToItemNative(flags);
		}

		internal static void ScrollToRectNative(ImGuiWindow* window, ImRect rect, ImGuiScrollFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImRect, ImGuiScrollFlags, void>)vt[1042])(window, rect, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, ImGuiScrollFlags, void>)vt[1042])((nint)window, rect, flags);
			#endif
		}

		public static void ScrollToRect(ImGuiWindowPtr window, ImRect rect, ImGuiScrollFlags flags)
		{
			ScrollToRectNative(window, rect, flags);
		}

		public static void ScrollToRect(ref ImGuiWindow window, ImRect rect, ImGuiScrollFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ScrollToRectNative((ImGuiWindow*)pwindow, rect, flags);
			}
		}

		internal static void ScrollToRectExNative(Vector2* output, ImGuiWindow* window, ImRect rect, ImGuiScrollFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, ImRect, ImGuiScrollFlags, void>)vt[1043])(output, window, rect, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, ImGuiScrollFlags, void>)vt[1043])((nint)output, (nint)window, rect, flags);
			#endif
		}

		public static Vector2 ScrollToRectEx(ImGuiWindowPtr window, ImRect rect, ImGuiScrollFlags flags)
		{
			Vector2 ret;
			ScrollToRectExNative(&ret, window, rect, flags);
			return ret;
		}

		public static void ScrollToRectEx(Vector2* output, ImGuiWindowPtr window, ImRect rect, ImGuiScrollFlags flags)
		{
			ScrollToRectExNative(output, window, rect, flags);
		}

		public static void ScrollToRectEx(ref Vector2 output, ImGuiWindowPtr window, ImRect rect, ImGuiScrollFlags flags)
		{
			fixed (Vector2* poutput = &output)
			{
				ScrollToRectExNative((Vector2*)poutput, window, rect, flags);
			}
		}

		public static Vector2 ScrollToRectEx(ref ImGuiWindow window, ImRect rect, ImGuiScrollFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				ScrollToRectExNative(&ret, (ImGuiWindow*)pwindow, rect, flags);
				return ret;
			}
		}

		public static void ScrollToRectEx(Vector2* output, ref ImGuiWindow window, ImRect rect, ImGuiScrollFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ScrollToRectExNative(output, (ImGuiWindow*)pwindow, rect, flags);
			}
		}

		public static void ScrollToRectEx(ref Vector2 output, ref ImGuiWindow window, ImRect rect, ImGuiScrollFlags flags)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					ScrollToRectExNative((Vector2*)poutput, (ImGuiWindow*)pwindow, rect, flags);
				}
			}
		}

		internal static void ScrollToBringRectIntoViewNative(ImGuiWindow* window, ImRect rect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImRect, void>)vt[1044])(window, rect);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[1044])((nint)window, rect);
			#endif
		}

		public static void ScrollToBringRectIntoView(ImGuiWindowPtr window, ImRect rect)
		{
			ScrollToBringRectIntoViewNative(window, rect);
		}

		public static void ScrollToBringRectIntoView(ref ImGuiWindow window, ImRect rect)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ScrollToBringRectIntoViewNative((ImGuiWindow*)pwindow, rect);
			}
		}

		internal static ImGuiItemStatusFlags GetItemStatusFlagsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiItemStatusFlags>)vt[1045])();
			#else
			return (ImGuiItemStatusFlags)((delegate* unmanaged[Cdecl]<ImGuiItemStatusFlags>)vt[1045])();
			#endif
		}

		public static ImGuiItemStatusFlags GetItemStatusFlags()
		{
			ImGuiItemStatusFlags ret = GetItemStatusFlagsNative();
			return ret;
		}

		internal static ImGuiItemFlags GetItemFlagsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiItemFlags>)vt[1046])();
			#else
			return (ImGuiItemFlags)((delegate* unmanaged[Cdecl]<ImGuiItemFlags>)vt[1046])();
			#endif
		}

		public static ImGuiItemFlags GetItemFlags()
		{
			ImGuiItemFlags ret = GetItemFlagsNative();
			return ret;
		}

		internal static int GetActiveIDNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[1047])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[1047])();
			#endif
		}

		public static int GetActiveID()
		{
			int ret = GetActiveIDNative();
			return ret;
		}

		internal static int GetFocusIDNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[1048])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[1048])();
			#endif
		}

		public static int GetFocusID()
		{
			int ret = GetFocusIDNative();
			return ret;
		}

		internal static void SetActiveIDNative(int id, ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ImGuiWindow*, void>)vt[1049])(id, window);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)vt[1049])(id, (nint)window);
			#endif
		}

		public static void SetActiveID(int id, ImGuiWindowPtr window)
		{
			SetActiveIDNative(id, window);
		}

		public static void SetActiveID(int id, ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetActiveIDNative(id, (ImGuiWindow*)pwindow);
			}
		}

		internal static void SetFocusIDNative(int id, ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ImGuiWindow*, void>)vt[1050])(id, window);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)vt[1050])(id, (nint)window);
			#endif
		}

		public static void SetFocusID(int id, ImGuiWindowPtr window)
		{
			SetFocusIDNative(id, window);
		}

		public static void SetFocusID(int id, ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetFocusIDNative(id, (ImGuiWindow*)pwindow);
			}
		}

		internal static void ClearActiveIDNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1051])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1051])();
			#endif
		}

		public static void ClearActiveID()
		{
			ClearActiveIDNative();
		}

		internal static int GetHoveredIDNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[1052])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[1052])();
			#endif
		}

		public static int GetHoveredID()
		{
			int ret = GetHoveredIDNative();
			return ret;
		}

		internal static void SetHoveredIDNative(int id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[1053])(id);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[1053])(id);
			#endif
		}

		public static void SetHoveredID(int id)
		{
			SetHoveredIDNative(id);
		}

		internal static void KeepAliveIDNative(int id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[1054])(id);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[1054])(id);
			#endif
		}

		public static void KeepAliveID(int id)
		{
			KeepAliveIDNative(id);
		}

		internal static void MarkItemEditedNative(int id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[1055])(id);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[1055])(id);
			#endif
		}

		public static void MarkItemEdited(int id)
		{
			MarkItemEditedNative(id);
		}

		internal static void PushOverrideIDNative(int id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[1056])(id);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[1056])(id);
			#endif
		}

		public static void PushOverrideID(int id)
		{
			PushOverrideIDNative(id);
		}

		internal static int GetIDWithSeedNative(byte* strIdBegin, byte* strIdEnd, int seed)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int, int>)vt[1057])(strIdBegin, strIdEnd, seed);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)vt[1057])((nint)strIdBegin, (nint)strIdEnd, seed);
			#endif
		}

		public static int GetIDWithSeed(byte* strIdBegin, byte* strIdEnd, int seed)
		{
			int ret = GetIDWithSeedNative(strIdBegin, strIdEnd, seed);
			return ret;
		}

		public static int GetIDWithSeed(ref byte strIdBegin, byte* strIdEnd, int seed)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				int ret = GetIDWithSeedNative((byte*)pstrIdBegin, strIdEnd, seed);
				return ret;
			}
		}

		public static int GetIDWithSeed(string strIdBegin, byte* strIdEnd, int seed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetIDWithSeedNative(pStr0, strIdEnd, seed);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int GetIDWithSeed(ReadOnlySpan<byte> strIdBegin, byte* strIdEnd, int seed)
		{
			fixed (byte* pstrIdBegin = strIdBegin)
			{
				int ret = GetIDWithSeedNative((byte*)pstrIdBegin, strIdEnd, seed);
				return ret;
			}
		}

		public static int GetIDWithSeed(byte* strIdBegin, ref byte strIdEnd, int seed)
		{
			fixed (byte* pstrIdEnd = &strIdEnd)
			{
				int ret = GetIDWithSeedNative(strIdBegin, (byte*)pstrIdEnd, seed);
				return ret;
			}
		}

		public static int GetIDWithSeed(byte* strIdBegin, string strIdEnd, int seed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetIDWithSeedNative(strIdBegin, pStr0, seed);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int GetIDWithSeed(byte* strIdBegin, ReadOnlySpan<byte> strIdEnd, int seed)
		{
			fixed (byte* pstrIdEnd = strIdEnd)
			{
				int ret = GetIDWithSeedNative(strIdBegin, (byte*)pstrIdEnd, seed);
				return ret;
			}
		}

		public static int GetIDWithSeed(ref byte strIdBegin, ref byte strIdEnd, int seed)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				fixed (byte* pstrIdEnd = &strIdEnd)
				{
					int ret = GetIDWithSeedNative((byte*)pstrIdBegin, (byte*)pstrIdEnd, seed);
					return ret;
				}
			}
		}

		public static int GetIDWithSeed(string strIdBegin, string strIdEnd, int seed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strIdEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strIdEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = GetIDWithSeedNative(pStr0, pStr1, seed);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int GetIDWithSeed(ReadOnlySpan<byte> strIdBegin, ReadOnlySpan<byte> strIdEnd, int seed)
		{
			fixed (byte* pstrIdBegin = strIdBegin)
			{
				fixed (byte* pstrIdEnd = strIdEnd)
				{
					int ret = GetIDWithSeedNative((byte*)pstrIdBegin, (byte*)pstrIdEnd, seed);
					return ret;
				}
			}
		}

		internal static int GetIDWithSeedIntNative(int n, int seed)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int>)vt[1058])(n, seed);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int>)vt[1058])(n, seed);
			#endif
		}

		public static int GetIDWithSeedInt(int n, int seed)
		{
			int ret = GetIDWithSeedIntNative(n, seed);
			return ret;
		}

		internal static void ItemSizeVec2Native(Vector2 size, float textBaselineY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, float, void>)vt[1059])(size, textBaselineY);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, float, void>)vt[1059])(size, textBaselineY);
			#endif
		}

		public static void ItemSizeVec2(Vector2 size, float textBaselineY)
		{
			ItemSizeVec2Native(size, textBaselineY);
		}

		internal static void ItemSizeRectNative(ImRect bb, float textBaselineY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect, float, void>)vt[1060])(bb, textBaselineY);
			#else
			((delegate* unmanaged[Cdecl]<ImRect, float, void>)vt[1060])(bb, textBaselineY);
			#endif
		}

		public static void ItemSizeRect(ImRect bb, float textBaselineY)
		{
			ItemSizeRectNative(bb, textBaselineY);
		}

		internal static byte ItemAddNative(ImRect bb, int id, ImRect* navBb, ImGuiItemFlags extraFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, int, ImRect*, ImGuiItemFlags, byte>)vt[1061])(bb, id, navBb, extraFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, int, nint, ImGuiItemFlags, byte>)vt[1061])(bb, id, (nint)navBb, extraFlags);
			#endif
		}

		public static bool ItemAdd(ImRect bb, int id, ImRectPtr navBb, ImGuiItemFlags extraFlags)
		{
			byte ret = ItemAddNative(bb, id, navBb, extraFlags);
			return ret != 0;
		}

		public static bool ItemAdd(ImRect bb, int id, ref ImRect navBb, ImGuiItemFlags extraFlags)
		{
			fixed (ImRect* pnavBb = &navBb)
			{
				byte ret = ItemAddNative(bb, id, (ImRect*)pnavBb, extraFlags);
				return ret != 0;
			}
		}

		internal static byte ItemHoverableNative(ImRect bb, int id, ImGuiItemFlags itemFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, int, ImGuiItemFlags, byte>)vt[1062])(bb, id, itemFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, int, ImGuiItemFlags, byte>)vt[1062])(bb, id, itemFlags);
			#endif
		}

		public static bool ItemHoverable(ImRect bb, int id, ImGuiItemFlags itemFlags)
		{
			byte ret = ItemHoverableNative(bb, id, itemFlags);
			return ret != 0;
		}

		internal static byte IsWindowContentHoverableNative(ImGuiWindow* window, ImGuiHoveredFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiHoveredFlags, byte>)vt[1063])(window, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiHoveredFlags, byte>)vt[1063])((nint)window, flags);
			#endif
		}

		public static bool IsWindowContentHoverable(ImGuiWindowPtr window, ImGuiHoveredFlags flags)
		{
			byte ret = IsWindowContentHoverableNative(window, flags);
			return ret != 0;
		}

		public static bool IsWindowContentHoverable(ref ImGuiWindow window, ImGuiHoveredFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowContentHoverableNative((ImGuiWindow*)pwindow, flags);
				return ret != 0;
			}
		}

		internal static byte IsClippedExNative(ImRect bb, int id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, int, byte>)vt[1064])(bb, id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, int, byte>)vt[1064])(bb, id);
			#endif
		}

		public static bool IsClippedEx(ImRect bb, int id)
		{
			byte ret = IsClippedExNative(bb, id);
			return ret != 0;
		}

		internal static void SetLastItemDataNative(int itemId, ImGuiItemFlags inFlags, ImGuiItemStatusFlags statusFlags, ImRect itemRect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ImGuiItemFlags, ImGuiItemStatusFlags, ImRect, void>)vt[1065])(itemId, inFlags, statusFlags, itemRect);
			#else
			((delegate* unmanaged[Cdecl]<int, ImGuiItemFlags, ImGuiItemStatusFlags, ImRect, void>)vt[1065])(itemId, inFlags, statusFlags, itemRect);
			#endif
		}

		public static void SetLastItemData(int itemId, ImGuiItemFlags inFlags, ImGuiItemStatusFlags statusFlags, ImRect itemRect)
		{
			SetLastItemDataNative(itemId, inFlags, statusFlags, itemRect);
		}

		internal static void CalcItemSizeNative(Vector2* output, Vector2 size, float defaultW, float defaultH)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, float, float, void>)vt[1066])(output, size, defaultW, defaultH);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, float, void>)vt[1066])((nint)output, size, defaultW, defaultH);
			#endif
		}

		public static Vector2 CalcItemSize(Vector2 size, float defaultW, float defaultH)
		{
			Vector2 ret;
			CalcItemSizeNative(&ret, size, defaultW, defaultH);
			return ret;
		}

		public static void CalcItemSize(Vector2* output, Vector2 size, float defaultW, float defaultH)
		{
			CalcItemSizeNative(output, size, defaultW, defaultH);
		}

		public static void CalcItemSize(ref Vector2 output, Vector2 size, float defaultW, float defaultH)
		{
			fixed (Vector2* poutput = &output)
			{
				CalcItemSizeNative((Vector2*)poutput, size, defaultW, defaultH);
			}
		}

		internal static float CalcWrapWidthForPosNative(Vector2 pos, float wrapPosX)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, float, float>)vt[1067])(pos, wrapPosX);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, float, float>)vt[1067])(pos, wrapPosX);
			#endif
		}

		public static float CalcWrapWidthForPos(Vector2 pos, float wrapPosX)
		{
			float ret = CalcWrapWidthForPosNative(pos, wrapPosX);
			return ret;
		}

		internal static void PushMultiItemsWidthsNative(int components, float widthFull)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[1068])(components, widthFull);
			#else
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[1068])(components, widthFull);
			#endif
		}

		public static void PushMultiItemsWidths(int components, float widthFull)
		{
			PushMultiItemsWidthsNative(components, widthFull);
		}

		internal static void ShrinkWidthsNative(ImGuiShrinkWidthItem* items, int count, float widthExcess)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiShrinkWidthItem*, int, float, void>)vt[1069])(items, count, widthExcess);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, float, void>)vt[1069])((nint)items, count, widthExcess);
			#endif
		}

		public static void ShrinkWidths(ImGuiShrinkWidthItemPtr items, int count, float widthExcess)
		{
			ShrinkWidthsNative(items, count, widthExcess);
		}

		public static void ShrinkWidths(ref ImGuiShrinkWidthItem items, int count, float widthExcess)
		{
			fixed (ImGuiShrinkWidthItem* pitems = &items)
			{
				ShrinkWidthsNative((ImGuiShrinkWidthItem*)pitems, count, widthExcess);
			}
		}

		internal static ImGuiDataVarInfo* GetStyleVarInfoNative(ImGuiStyleVar idx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, ImGuiDataVarInfo*>)vt[1070])(idx);
			#else
			return (ImGuiDataVarInfo*)((delegate* unmanaged[Cdecl]<ImGuiStyleVar, nint>)vt[1070])(idx);
			#endif
		}

		public static ImGuiDataVarInfoPtr GetStyleVarInfo(ImGuiStyleVar idx)
		{
			ImGuiDataVarInfoPtr ret = GetStyleVarInfoNative(idx);
			return ret;
		}

		internal static void BeginDisabledOverrideReenableNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1071])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1071])();
			#endif
		}

		public static void BeginDisabledOverrideReenable()
		{
			BeginDisabledOverrideReenableNative();
		}

		internal static void EndDisabledOverrideReenableNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1072])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1072])();
			#endif
		}

		public static void EndDisabledOverrideReenable()
		{
			EndDisabledOverrideReenableNative();
		}

		internal static void LogBeginNative(ImGuiLogType type, int autoOpenDepth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiLogType, int, void>)vt[1073])(type, autoOpenDepth);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiLogType, int, void>)vt[1073])(type, autoOpenDepth);
			#endif
		}

		public static void LogBegin(ImGuiLogType type, int autoOpenDepth)
		{
			LogBeginNative(type, autoOpenDepth);
		}

		internal static void LogToBufferNative(int autoOpenDepth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[1074])(autoOpenDepth);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[1074])(autoOpenDepth);
			#endif
		}

		public static void LogToBuffer(int autoOpenDepth)
		{
			LogToBufferNative(autoOpenDepth);
		}

		internal static void LogRenderedTextNative(Vector2* refPos, byte* text, byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, byte*, byte*, void>)vt[1075])(refPos, text, textEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[1075])((nint)refPos, (nint)text, (nint)textEnd);
			#endif
		}

		public static void LogRenderedText(Vector2* refPos, byte* text, byte* textEnd)
		{
			LogRenderedTextNative(refPos, text, textEnd);
		}

		public static void LogRenderedText(ref Vector2 refPos, byte* text, byte* textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				LogRenderedTextNative((Vector2*)prefPos, text, textEnd);
			}
		}

		public static void LogRenderedText(Vector2* refPos, ref byte text, byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				LogRenderedTextNative(refPos, (byte*)ptext, textEnd);
			}
		}

		public static void LogRenderedText(Vector2* refPos, string text, byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogRenderedTextNative(refPos, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LogRenderedText(Vector2* refPos, ReadOnlySpan<byte> text, byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				LogRenderedTextNative(refPos, (byte*)ptext, textEnd);
			}
		}

		public static void LogRenderedText(ref Vector2 refPos, ref byte text, byte* textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptext = &text)
				{
					LogRenderedTextNative((Vector2*)prefPos, (byte*)ptext, textEnd);
				}
			}
		}

		public static void LogRenderedText(ref Vector2 refPos, string text, byte* textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				LogRenderedTextNative((Vector2*)prefPos, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void LogRenderedText(ref Vector2 refPos, ReadOnlySpan<byte> text, byte* textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptext = text)
				{
					LogRenderedTextNative((Vector2*)prefPos, (byte*)ptext, textEnd);
				}
			}
		}

		public static void LogRenderedText(Vector2* refPos, byte* text, ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				LogRenderedTextNative(refPos, text, (byte*)ptextEnd);
			}
		}

		public static void LogRenderedText(Vector2* refPos, byte* text, string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogRenderedTextNative(refPos, text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LogRenderedText(Vector2* refPos, byte* text, ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				LogRenderedTextNative(refPos, text, (byte*)ptextEnd);
			}
		}

		public static void LogRenderedText(ref Vector2 refPos, byte* text, ref byte textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					LogRenderedTextNative((Vector2*)prefPos, text, (byte*)ptextEnd);
				}
			}
		}

		public static void LogRenderedText(ref Vector2 refPos, byte* text, string textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				LogRenderedTextNative((Vector2*)prefPos, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void LogRenderedText(ref Vector2 refPos, byte* text, ReadOnlySpan<byte> textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					LogRenderedTextNative((Vector2*)prefPos, text, (byte*)ptextEnd);
				}
			}
		}

		public static void LogRenderedText(Vector2* refPos, ref byte text, ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					LogRenderedTextNative(refPos, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		public static void LogRenderedText(Vector2* refPos, string text, string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			LogRenderedTextNative(refPos, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LogRenderedText(Vector2* refPos, ReadOnlySpan<byte> text, ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					LogRenderedTextNative(refPos, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		public static void LogRenderedText(ref Vector2 refPos, ref byte text, ref byte textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						LogRenderedTextNative((Vector2*)prefPos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		public static void LogRenderedText(ref Vector2 refPos, string text, string textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				LogRenderedTextNative((Vector2*)prefPos, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		public static void LogRenderedText(ref Vector2 refPos, ReadOnlySpan<byte> text, ReadOnlySpan<byte> textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						LogRenderedTextNative((Vector2*)prefPos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		internal static void LogSetNextTextDecorationNative(byte* prefix, byte* suffix)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[1076])(prefix, suffix);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1076])((nint)prefix, (nint)suffix);
			#endif
		}

		public static void LogSetNextTextDecoration(byte* prefix, byte* suffix)
		{
			LogSetNextTextDecorationNative(prefix, suffix);
		}

		public static void LogSetNextTextDecoration(ref byte prefix, byte* suffix)
		{
			fixed (byte* pprefix = &prefix)
			{
				LogSetNextTextDecorationNative((byte*)pprefix, suffix);
			}
		}

		public static void LogSetNextTextDecoration(string prefix, byte* suffix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (prefix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(prefix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(prefix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogSetNextTextDecorationNative(pStr0, suffix);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LogSetNextTextDecoration(ReadOnlySpan<byte> prefix, byte* suffix)
		{
			fixed (byte* pprefix = prefix)
			{
				LogSetNextTextDecorationNative((byte*)pprefix, suffix);
			}
		}

		public static void LogSetNextTextDecoration(byte* prefix, ref byte suffix)
		{
			fixed (byte* psuffix = &suffix)
			{
				LogSetNextTextDecorationNative(prefix, (byte*)psuffix);
			}
		}

		public static void LogSetNextTextDecoration(byte* prefix, string suffix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (suffix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(suffix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(suffix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogSetNextTextDecorationNative(prefix, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LogSetNextTextDecoration(byte* prefix, ReadOnlySpan<byte> suffix)
		{
			fixed (byte* psuffix = suffix)
			{
				LogSetNextTextDecorationNative(prefix, (byte*)psuffix);
			}
		}

		public static void LogSetNextTextDecoration(ref byte prefix, ref byte suffix)
		{
			fixed (byte* pprefix = &prefix)
			{
				fixed (byte* psuffix = &suffix)
				{
					LogSetNextTextDecorationNative((byte*)pprefix, (byte*)psuffix);
				}
			}
		}

		public static void LogSetNextTextDecoration(string prefix, string suffix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (prefix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(prefix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(prefix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (suffix != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(suffix);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(suffix, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			LogSetNextTextDecorationNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LogSetNextTextDecoration(ReadOnlySpan<byte> prefix, ReadOnlySpan<byte> suffix)
		{
			fixed (byte* pprefix = prefix)
			{
				fixed (byte* psuffix = suffix)
				{
					LogSetNextTextDecorationNative((byte*)pprefix, (byte*)psuffix);
				}
			}
		}

		internal static byte BeginChildExNative(byte* name, int id, Vector2 sizeArg, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, Vector2, ImGuiChildFlags, ImGuiWindowFlags, byte>)vt[1077])(name, id, sizeArg, childFlags, windowFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, Vector2, ImGuiChildFlags, ImGuiWindowFlags, byte>)vt[1077])((nint)name, id, sizeArg, childFlags, windowFlags);
			#endif
		}

		public static bool BeginChildEx(byte* name, int id, Vector2 sizeArg, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildExNative(name, id, sizeArg, childFlags, windowFlags);
			return ret != 0;
		}

		public static bool BeginChildEx(ref byte name, int id, Vector2 sizeArg, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pname = &name)
			{
				byte ret = BeginChildExNative((byte*)pname, id, sizeArg, childFlags, windowFlags);
				return ret != 0;
			}
		}

		public static bool BeginChildEx(string name, int id, Vector2 sizeArg, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildExNative(pStr0, id, sizeArg, childFlags, windowFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool BeginChildEx(ReadOnlySpan<byte> name, int id, Vector2 sizeArg, ImGuiChildFlags childFlags, ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pname = name)
			{
				byte ret = BeginChildExNative((byte*)pname, id, sizeArg, childFlags, windowFlags);
				return ret != 0;
			}
		}

		internal static byte BeginPopupExNative(int id, ImGuiWindowFlags extraWindowFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiWindowFlags, byte>)vt[1078])(id, extraWindowFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, ImGuiWindowFlags, byte>)vt[1078])(id, extraWindowFlags);
			#endif
		}

		public static bool BeginPopupEx(int id, ImGuiWindowFlags extraWindowFlags)
		{
			byte ret = BeginPopupExNative(id, extraWindowFlags);
			return ret != 0;
		}

		internal static void OpenPopupExNative(int id, ImGuiPopupFlags popupFlags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ImGuiPopupFlags, void>)vt[1079])(id, popupFlags);
			#else
			((delegate* unmanaged[Cdecl]<int, ImGuiPopupFlags, void>)vt[1079])(id, popupFlags);
			#endif
		}

		public static void OpenPopupEx(int id, ImGuiPopupFlags popupFlags)
		{
			OpenPopupExNative(id, popupFlags);
		}

		internal static void ClosePopupToLevelNative(int remaining, byte restoreFocusToWindowUnderPopup)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte, void>)vt[1080])(remaining, restoreFocusToWindowUnderPopup);
			#else
			((delegate* unmanaged[Cdecl]<int, byte, void>)vt[1080])(remaining, restoreFocusToWindowUnderPopup);
			#endif
		}

		public static void ClosePopupToLevel(int remaining, bool restoreFocusToWindowUnderPopup)
		{
			ClosePopupToLevelNative(remaining, restoreFocusToWindowUnderPopup ? (byte)1 : (byte)0);
		}

		internal static void ClosePopupsOverWindowNative(ImGuiWindow* refWindow, byte restoreFocusToWindowUnderPopup)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte, void>)vt[1081])(refWindow, restoreFocusToWindowUnderPopup);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[1081])((nint)refWindow, restoreFocusToWindowUnderPopup);
			#endif
		}

		public static void ClosePopupsOverWindow(ImGuiWindowPtr refWindow, bool restoreFocusToWindowUnderPopup)
		{
			ClosePopupsOverWindowNative(refWindow, restoreFocusToWindowUnderPopup ? (byte)1 : (byte)0);
		}

		public static void ClosePopupsOverWindow(ref ImGuiWindow refWindow, bool restoreFocusToWindowUnderPopup)
		{
			fixed (ImGuiWindow* prefWindow = &refWindow)
			{
				ClosePopupsOverWindowNative((ImGuiWindow*)prefWindow, restoreFocusToWindowUnderPopup ? (byte)1 : (byte)0);
			}
		}

		internal static void ClosePopupsExceptModalsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1082])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1082])();
			#endif
		}

		public static void ClosePopupsExceptModals()
		{
			ClosePopupsExceptModalsNative();
		}

		internal static byte IsPopupOpenIDNative(int id, ImGuiPopupFlags popupFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiPopupFlags, byte>)vt[1083])(id, popupFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, ImGuiPopupFlags, byte>)vt[1083])(id, popupFlags);
			#endif
		}

		public static bool IsPopupOpenID(int id, ImGuiPopupFlags popupFlags)
		{
			byte ret = IsPopupOpenIDNative(id, popupFlags);
			return ret != 0;
		}

		internal static void GetPopupAllowedExtentRectNative(ImRect* output, ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, void>)vt[1084])(output, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1084])((nint)output, (nint)window);
			#endif
		}

		public static ImRect GetPopupAllowedExtentRect(ImGuiWindowPtr window)
		{
			ImRect ret;
			GetPopupAllowedExtentRectNative(&ret, window);
			return ret;
		}

		public static void GetPopupAllowedExtentRect(ImRectPtr output, ImGuiWindowPtr window)
		{
			GetPopupAllowedExtentRectNative(output, window);
		}

		public static void GetPopupAllowedExtentRect(ref ImRect output, ImGuiWindowPtr window)
		{
			fixed (ImRect* poutput = &output)
			{
				GetPopupAllowedExtentRectNative((ImRect*)poutput, window);
			}
		}

		public static ImRect GetPopupAllowedExtentRect(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImRect ret;
				GetPopupAllowedExtentRectNative(&ret, (ImGuiWindow*)pwindow);
				return ret;
			}
		}

		public static void GetPopupAllowedExtentRect(ImRectPtr output, ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				GetPopupAllowedExtentRectNative(output, (ImGuiWindow*)pwindow);
			}
		}

		public static void GetPopupAllowedExtentRect(ref ImRect output, ref ImGuiWindow window)
		{
			fixed (ImRect* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					GetPopupAllowedExtentRectNative((ImRect*)poutput, (ImGuiWindow*)pwindow);
				}
			}
		}

		internal static ImGuiWindow* GetTopMostPopupModalNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*>)vt[1085])();
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint>)vt[1085])();
			#endif
		}

		public static ImGuiWindowPtr GetTopMostPopupModal()
		{
			ImGuiWindowPtr ret = GetTopMostPopupModalNative();
			return ret;
		}

		internal static ImGuiWindow* GetTopMostAndVisiblePopupModalNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*>)vt[1086])();
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint>)vt[1086])();
			#endif
		}

		public static ImGuiWindowPtr GetTopMostAndVisiblePopupModal()
		{
			ImGuiWindowPtr ret = GetTopMostAndVisiblePopupModalNative();
			return ret;
		}

		internal static ImGuiWindow* FindBlockingModalNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*>)vt[1087])(window);
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1087])((nint)window);
			#endif
		}

		public static ImGuiWindowPtr FindBlockingModal(ImGuiWindowPtr window)
		{
			ImGuiWindowPtr ret = FindBlockingModalNative(window);
			return ret;
		}

		public static ImGuiWindowPtr FindBlockingModal(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImGuiWindowPtr ret = FindBlockingModalNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		internal static void FindBestWindowPosForPopupNative(Vector2* output, ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, void>)vt[1088])(output, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1088])((nint)output, (nint)window);
			#endif
		}

		public static Vector2 FindBestWindowPosForPopup(ImGuiWindowPtr window)
		{
			Vector2 ret;
			FindBestWindowPosForPopupNative(&ret, window);
			return ret;
		}

		public static void FindBestWindowPosForPopup(Vector2* output, ImGuiWindowPtr window)
		{
			FindBestWindowPosForPopupNative(output, window);
		}

		public static void FindBestWindowPosForPopup(ref Vector2 output, ImGuiWindowPtr window)
		{
			fixed (Vector2* poutput = &output)
			{
				FindBestWindowPosForPopupNative((Vector2*)poutput, window);
			}
		}

		public static Vector2 FindBestWindowPosForPopup(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				FindBestWindowPosForPopupNative(&ret, (ImGuiWindow*)pwindow);
				return ret;
			}
		}

		public static void FindBestWindowPosForPopup(Vector2* output, ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				FindBestWindowPosForPopupNative(output, (ImGuiWindow*)pwindow);
			}
		}

		public static void FindBestWindowPosForPopup(ref Vector2 output, ref ImGuiWindow window)
		{
			fixed (Vector2* poutput = &output)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					FindBestWindowPosForPopupNative((Vector2*)poutput, (ImGuiWindow*)pwindow);
				}
			}
		}

		internal static void FindBestWindowPosForPopupExNative(Vector2* output, Vector2 refPos, Vector2 size, ImGuiDir* lastDir, ImRect rOuter, ImRect rAvoid, ImGuiPopupPositionPolicy policy)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, ImGuiDir*, ImRect, ImRect, ImGuiPopupPositionPolicy, void>)vt[1089])(output, refPos, size, lastDir, rOuter, rAvoid, policy);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, nint, ImRect, ImRect, ImGuiPopupPositionPolicy, void>)vt[1089])((nint)output, refPos, size, (nint)lastDir, rOuter, rAvoid, policy);
			#endif
		}

		public static Vector2 FindBestWindowPosForPopupEx(Vector2 refPos, Vector2 size, ImGuiDir* lastDir, ImRect rOuter, ImRect rAvoid, ImGuiPopupPositionPolicy policy)
		{
			Vector2 ret;
			FindBestWindowPosForPopupExNative(&ret, refPos, size, lastDir, rOuter, rAvoid, policy);
			return ret;
		}

		public static void FindBestWindowPosForPopupEx(Vector2* output, Vector2 refPos, Vector2 size, ImGuiDir* lastDir, ImRect rOuter, ImRect rAvoid, ImGuiPopupPositionPolicy policy)
		{
			FindBestWindowPosForPopupExNative(output, refPos, size, lastDir, rOuter, rAvoid, policy);
		}
	}
}
